
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLPARENleftLBRACEleftIDleftDEFINEleftCOMMAleftLBRACKleftRBRACKleftDOTleftSEMICOLONleftCOLONleftINTleftFLOATleftSTRINGleftBREAKleftCONTINUEleftRETURNleftLORleftLANDleftEQLNEQLTNLEQGTNGEQleftADDSUBORXORleftMULDIVMODANDAND_NOTSHLSHRADD ADD_ASSIGN AND AND_NOT ASSIGN BREAK CASE COLON COMMA CONST CONTINUE DEC DEFAULT DEFINE DIV DIV_ASSIGN DOT ELSE EQL FALSE FLOAT FOR FUNC GEQ GTN ID IF IMPORT INC INT LAND LBRACE LBRACK LEQ LOR LPAREN LTN MOD MOD_ASSIGN MUL MUL_ASSIGN NEQ NOT OR OR_ASSIGN PACKAGE PRINT RBRACE RBRACK RETURN RPAREN RUNE SCAN SEMICOLON SHL SHL_ASSIGN SHR SHR_ASSIGN STRING STRUCT SUB SUB_ASSIGN SWITCH TRUE TYPE VAR XOR XOR_ASSIGN\n    SourceFile : PackageClause SEMICOLON ImportDecl_curl TopLevelDecl_curl\n    OpenS : CloseS : OpenStructS : CloseStructS : \n    TopLevelDecl_curl : TopLevelDecl_curl TopLevelDecl SEMICOLON\n                      |\n    \n    ImportDecl_curl : ImportDecl_curl ImportDecl SEMICOLON\n                    |\n    \n    PackageClause : PACKAGE ID\n    \n    ImportDecl : IMPORT ImportSpec\n               | IMPORT LPAREN ImportSpec_curl RPAREN\n    \n    ImportSpec_curl : ImportSpec_curl ImportSpec SEMICOLON\n                    |\n    \n    ImportSpec : ID ImportPath\n               | ImportPath\n    \n    ImportPath : STRING\n    \n    TopLevelDecl : Declaration\n                 | FunctionDecl\n    \n    Declaration : ConstDecl\n                | StructDecl\n                | VarDecl\n    \n    ConstDecl : CONST ConstSpec\n              | CONST LPAREN ConstSpec_curl RPAREN\n    \n    ConstSpec_curl : ConstSpec_curl ConstSpec SEMICOLON\n                   |\n    \n    ConstSpec : IdentifierList ID ASSIGN ExpressionList\n    \n    IdentifierList : ID\n                   | ID COMMA IdentifierList\n    \n    ExpressionList : Expression\n                   | ExpressionList COMMA Expression\n    \n    StructDecl : TYPE StructName StructType\n    \n    StructName : ID\n    \n    VarDecl : VAR VarSpec\n            | VAR LPAREN VarSpec_curl RPAREN\n    \n    VarSpec_curl : VarSpec_curl VarSpec SEMICOLON\n                 |\n    \n    VarSpec : IdentifierList Type ASSIGN ExpressionList\n            | IdentifierList ID ASSIGN ExpressionList\n            | IdentifierList ASSIGN ExpressionList\n            | IdentifierList ID\n            | IdentifierList Type\n    \n    FunctionDecl : FUNC SetBase FuncName OpenS Signature Block CloseBase CloseS\n    SetBase : CloseBase : \n    FuncName : ID\n    \n    Type : LPAREN Type RPAREN\n         | LPAREN ID RPAREN\n         | TypeLit\n    \n    TypeLit : ArrayType\n            | PointerType\n    \n    ArrayType : LBRACK INT RBRACK Type\n              | LBRACK INT RBRACK ID\n    \n    StructType : STRUCT OpenStructS LBRACE FieldDecl_curl RBRACE CloseStructS\n    \n    FieldDecl_curl : FieldDecl_curl FieldDecl SEMICOLON\n                   |\n    \n    FieldDecl : ID COMMA IdentifierList Type\n              | ID COMMA IdentifierList ID\n              | ID Type\n              | ID ID\n              | ID STRUCT MUL ID\n              | ID COMMA IdentifierList STRUCT MUL ID\n    \n    PointerType : MUL Type\n                | MUL ID\n    \n    Signature : Parameters Result\n    \n    Result : LPAREN TypeList RPAREN\n           |\n    \n    TypeList : ID\n             | Type\n             | TypeList COMMA ID\n             | TypeList COMMA Type\n    \n    Parameters : LPAREN RPAREN\n               | LPAREN ParameterList RPAREN\n               | LPAREN ParameterList COMMA RPAREN\n    \n    ParameterList : ParameterDecl\n                  | ParameterList COMMA ParameterDecl\n    \n    ParameterDecl : ParaIdList Type\n                  | ID Type\n                  | ParaIdList ID\n                  | ID ID\n    \n    ParaIdList : ID COMMA ID\n               | ParaIdList COMMA ID\n    \n    Block : LBRACE StatementList RBRACE\n    \n    StatementList : Statement_curl\n    \n    Statement_curl : Statement_curl Statement SEMICOLON\n                   |\n    \n    Expression : UnaryExpr\n               | Expression BinaryOp UnaryExpr\n    \n    UnaryExpr : PrimaryExpr\n              | UnaryOp UnaryExpr\n    \n    BinaryOp : LOR\n             | LAND\n             | RelOp\n             | AddOp\n             | MulOp\n    \n    RelOp : EQL\n          | NEQ\n          | LTN\n          | LEQ\n          | GTN\n          | GEQ\n    \n    AddOp : ADD\n          | SUB\n          | OR\n          | XOR\n    \n    MulOp : MUL\n          | DIV\n          | MOD\n          | SHL\n          | SHR\n          | AND\n          | AND_NOT\n    \n    UnaryOp : ADD\n            | SUB\n            | NOT\n            | XOR\n            | MUL\n            | AND\n    \n    PrimaryExpr : Literal\n                | ID\n                | PrimaryExpr DOT ID\n                | LPAREN Expression RPAREN\n                | PrimaryExpr Index\n                | PrimaryExpr Arguments\n    \n    Index : LBRACK Expression RBRACK\n    \n    Arguments : LPAREN RPAREN\n              | LPAREN ExpressionList RPAREN\n              | LPAREN ExpressionList COMMA RPAREN\n    \n    Literal : BasicLit\n    \n    BasicLit : IntLit\n             | FloatLit\n             | RuneLit\n             | StringLit\n             | TrueLit\n             | FalseLit\n    \n    TrueLit : TRUE\n    \n    FalseLit : FALSE\n    \n    IntLit : INT\n    \n    FloatLit : FLOAT\n    \n    RuneLit : RUNE\n    \n    StringLit : STRING\n    \n    Statement : Declaration\n              | SimpleStmt\n              | ReturnStmt\n              | BreakStmt\n              | ContinueStmt\n              | IfStmt\n              | OpenS Block CloseS\n              | SwitchStmt\n              | ForStmt\n              | PrintStmt\n              | ScanStmt\n    \n    PrintStmt : PRINT ExpressionList\n    \n    ScanStmt : SCAN ExpressionList\n    \n    SimpleStmt : Expression\n               | IncDecStmt\n               | Assignment\n               | ShortVarDecl\n               |\n    \n    IncDecStmt : Expression INC\n               | Expression DEC\n    \n    Assignment : ExpressionList AssignOp ExpressionList\n    \n    AssignOp : ADD_ASSIGN\n             | SUB_ASSIGN\n             | MUL_ASSIGN\n             | DIV_ASSIGN\n             | MOD_ASSIGN\n             | OR_ASSIGN\n             | XOR_ASSIGN\n             | SHL_ASSIGN\n             | SHR_ASSIGN\n             | ASSIGN\n    \n    ReturnStmt : RETURN ExpressionList\n               | RETURN\n    \n    BreakStmt : BREAK ID\n              | BREAK\n    \n    ContinueStmt : CONTINUE ID\n                 | CONTINUE\n    \n    ShortVarDecl : IdentifierList DEFINE ExpressionList\n    \n    IfStmt : IF OpenS Expression Block CloseS\n           | IF OpenS Expression Block CloseS ELSE IfStmt\n           | IF OpenS Expression Block CloseS ELSE OpenS Block CloseS\n    \n    SwitchStmt : SWITCH ExpressionName LBRACE OpenW ExprCaseClause_curl CloseW RBRACE\n    \n    ExpressionName : Expression\n    \n    ExprCaseClause_curl : ExprCaseClause ExprCaseClause_curl\n                        | DefCaseClause\n                        | ExprCaseClause\n    \n    ExprCaseClause : OpenS CASE Expression COLON StatementList CloseS\n    \n    DefCaseClause : DEFAULT COLON OpenS StatementList CloseS\n    \n    ForStmt : FOR OpenS OpenF Expression Block CloseF CloseS\n            | FOR OpenS OpenF ForClause Block CloseF CloseS\n            | FOR OpenS OpenF Block CloseF CloseS\n    \n    OpenF :\n    \n    CloseF :\n    \n    OpenW :\n    \n    CloseW :\n    \n    ForClause : SimpleStmt SEMICOLON SEMICOLON SimpleStmt\n              | SimpleStmt SEMICOLON Expression SEMICOLON SimpleStmt\n    '
    
_lr_action_items = {'FUNC':([4,6,7,25,30,],[-9,-7,15,-8,-6,]),'RETURN':([151,174,227,289,298,304,],[-86,196,-85,-2,-86,-86,]),'CONST':([4,6,7,25,30,151,174,227,289,298,304,],[-9,-7,10,-8,-6,-86,10,-85,-2,-86,-86,]),'SUB':([48,60,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,90,91,92,97,98,108,109,110,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,151,155,156,158,159,160,161,174,177,178,179,196,198,200,204,207,210,213,214,218,227,230,232,235,236,237,238,239,240,241,242,243,244,245,246,251,256,259,266,267,272,283,284,289,291,294,298,299,304,],[66,66,-114,66,-135,-119,-130,-117,-136,-129,-140,-116,-141,-87,-131,-89,-113,66,-132,116,-120,-118,-137,-138,-139,-133,-115,-134,66,66,-90,-123,66,-124,66,66,116,-103,-91,-106,-107,-97,-101,-92,-112,66,-94,-110,-105,-95,-100,-102,-96,-109,-98,-111,-93,-99,-104,-108,-86,116,-126,-121,116,-122,-88,66,-125,-127,66,66,66,-2,66,116,66,-120,-2,-128,-85,66,-193,116,-164,66,-165,-169,-172,-171,-168,-167,-170,-166,-163,66,66,116,116,-120,66,66,116,-2,66,66,-86,116,-86,]),'SCAN':([151,174,227,289,298,304,],[-86,210,-85,-2,-86,-86,]),'DEFAULT':([174,227,257,269,279,304,307,309,],[-84,-85,-195,278,278,-86,-3,-188,]),'SHL_ASSIGN':([68,69,70,72,73,74,76,77,78,79,83,85,87,88,89,90,92,108,109,111,156,158,159,160,161,177,178,206,207,213,218,266,267,],[-135,-119,-130,-136,-129,-140,-141,-87,-131,-89,-132,-120,-137,-138,-139,-133,-134,-90,-123,-124,-126,-121,-31,-122,-88,-125,-127,244,-30,-120,-128,-30,-120,]),'LOR':([68,69,70,72,73,74,76,77,78,79,83,84,85,87,88,89,90,92,108,109,111,115,155,156,158,159,160,161,177,178,207,213,218,235,259,266,267,284,299,],[-135,-119,-130,-136,-129,-140,-141,-87,-131,-89,-132,117,-120,-137,-138,-139,-133,-134,-90,-123,-124,117,117,-126,-121,117,-122,-88,-125,-127,117,-120,-128,117,117,117,-120,117,117,]),'COLON':([68,69,70,72,73,74,76,77,78,79,83,85,87,88,89,90,92,108,109,111,156,158,160,161,177,178,218,278,299,],[-135,-119,-130,-136,-129,-140,-141,-87,-131,-89,-132,-120,-137,-138,-139,-133,-134,-90,-123,-124,-126,-121,-122,-88,-125,-127,-128,289,304,]),'DIV_ASSIGN':([68,69,70,72,73,74,76,77,78,79,83,85,87,88,89,90,92,108,109,111,156,158,159,160,161,177,178,206,207,213,218,266,267,],[-135,-119,-130,-136,-129,-140,-141,-87,-131,-89,-132,-120,-137,-138,-139,-133,-134,-90,-123,-124,-126,-121,-31,-122,-88,-125,-127,245,-30,-120,-128,-30,-120,]),'PRINT':([151,174,227,289,298,304,],[-86,198,-85,-2,-86,-86,]),'MUL':([29,34,48,49,51,60,61,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,90,91,92,97,98,107,108,109,110,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,146,148,149,151,155,156,158,159,160,161,174,177,178,179,181,185,186,188,196,198,200,204,207,210,213,214,218,220,227,230,232,235,236,237,238,239,240,241,242,243,244,245,246,251,253,256,259,261,266,267,272,283,284,289,291,294,298,299,304,],[-28,51,71,51,51,71,-29,-114,71,-135,-119,-130,-117,-136,-129,-140,-116,-141,-87,-131,-89,-113,71,-132,118,-120,-118,-137,-138,-139,-133,-115,-134,71,71,51,-90,-123,71,-124,71,71,118,-103,-91,-106,-107,-97,-101,-92,-112,71,-94,-110,-105,-95,-100,-102,-96,-109,-98,-111,-93,-99,-104,-108,51,51,51,-86,118,-126,-121,118,-122,-88,71,-125,-127,71,51,-82,-81,51,71,71,-2,71,118,71,-120,-2,-128,252,-85,71,-193,118,-164,71,-165,-169,-172,-171,-168,-167,-170,-166,-163,71,51,71,118,271,118,-120,71,71,118,-2,71,71,-86,118,-86,]),'DIV':([68,69,70,72,73,74,76,77,78,79,83,84,85,87,88,89,90,92,108,109,111,115,155,156,158,159,160,161,177,178,207,213,218,235,259,266,267,284,299,],[-135,-119,-130,-136,-129,-140,-141,-87,-131,-89,-132,119,-120,-137,-138,-139,-133,-134,-90,-123,-124,119,119,-126,-121,119,-122,-88,-125,-127,119,-120,-128,119,119,119,-120,119,119,]),'RUNE':([48,60,66,67,71,75,80,82,86,91,97,98,110,112,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,151,174,179,196,198,200,204,210,214,227,230,232,236,237,238,239,240,241,242,243,244,245,246,251,256,272,283,289,291,294,298,304,],[74,74,-114,74,-117,-116,-113,74,-118,-115,74,74,74,74,74,-103,-91,-106,-107,-97,-101,-92,-112,74,-94,-110,-105,-95,-100,-102,-96,-109,-98,-111,-93,-99,-104,-108,-86,74,74,74,74,-2,74,74,-2,-85,74,-193,-164,74,-165,-169,-172,-171,-168,-167,-170,-166,-163,74,74,74,74,-2,74,74,-86,-86,]),'TRUE':([48,60,66,67,71,75,80,82,86,91,97,98,110,112,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,151,174,179,196,198,200,204,210,214,227,230,232,236,237,238,239,240,241,242,243,244,245,246,251,256,272,283,289,291,294,298,304,],[72,72,-114,72,-117,-116,-113,72,-118,-115,72,72,72,72,72,-103,-91,-106,-107,-97,-101,-92,-112,72,-94,-110,-105,-95,-100,-102,-96,-109,-98,-111,-93,-99,-104,-108,-86,72,72,72,72,-2,72,72,-2,-85,72,-193,-164,72,-165,-169,-172,-171,-168,-167,-170,-166,-163,72,72,72,72,-2,72,72,-86,-86,]),'DOT':([68,69,70,72,73,74,76,78,79,83,85,87,88,89,90,92,109,111,156,158,160,177,178,213,218,267,],[-135,-119,-130,-136,-129,-140,-141,-131,113,-132,-120,-137,-138,-139,-133,-134,-123,-124,-126,-121,-122,-125,-127,-120,-128,-120,]),'NEQ':([68,69,70,72,73,74,76,77,78,79,83,84,85,87,88,89,90,92,108,109,111,115,155,156,158,159,160,161,177,178,207,213,218,235,259,266,267,284,299,],[-135,-119,-130,-136,-129,-140,-141,-87,-131,-89,-132,120,-120,-137,-138,-139,-133,-134,-90,-123,-124,120,120,-126,-121,120,-122,-88,-125,-127,120,-120,-128,120,120,120,-120,120,120,]),'CASE':([174,227,257,269,279,280,304,307,309,],[-84,-85,-195,-2,-2,291,-86,-3,-188,]),'BREAK':([151,174,227,289,298,304,],[-86,208,-85,-2,-86,-86,]),'GEQ':([68,69,70,72,73,74,76,77,78,79,83,84,85,87,88,89,90,92,108,109,111,115,155,156,158,159,160,161,177,178,207,213,218,235,259,266,267,284,299,],[-135,-119,-130,-136,-129,-140,-141,-87,-131,-89,-132,121,-120,-137,-138,-139,-133,-134,-90,-123,-124,121,121,-126,-121,121,-122,-88,-125,-127,121,-120,-128,121,121,121,-120,121,121,]),'DEC':([68,69,70,72,73,74,76,77,78,79,83,85,87,88,89,90,92,108,109,111,156,158,160,161,177,178,207,213,218,266,267,],[-135,-119,-130,-136,-129,-140,-141,-87,-131,-89,-132,-120,-137,-138,-139,-133,-134,-90,-123,-124,-126,-121,-122,-88,-125,-127,247,-120,-128,247,-120,]),'RPAREN':([23,27,33,37,39,44,45,47,50,68,69,70,72,73,74,76,77,78,79,83,84,85,87,88,89,90,92,93,94,95,96,100,101,103,106,108,109,111,112,115,139,140,145,147,153,154,156,157,158,159,160,161,163,166,167,168,170,171,172,173,177,178,179,184,218,225,226,],[-14,-26,-37,56,58,63,-49,-50,-51,-135,-119,-130,-136,-129,-140,-141,-87,-131,-89,-132,-30,-120,-137,-138,-139,-133,-134,139,140,-63,-64,-13,-25,144,-36,-90,-123,-124,156,160,-47,-48,164,-75,-52,-53,-126,178,-121,-31,-122,-88,183,-77,-79,-78,-80,187,-69,-68,-125,-127,218,-76,-128,-71,-70,]),'SEMICOLON':([1,5,9,11,12,13,14,18,19,20,21,22,26,32,38,45,47,50,52,53,54,56,57,58,59,63,64,68,69,70,72,73,74,76,77,78,79,81,83,84,85,87,88,89,90,92,95,96,102,108,109,111,139,140,141,142,151,152,153,154,156,158,159,160,161,174,176,177,178,180,182,189,190,191,192,193,195,196,199,200,201,202,203,205,207,208,209,211,212,213,215,216,217,218,222,223,224,227,228,229,231,232,233,247,248,249,250,254,255,256,258,260,262,263,264,266,267,268,270,272,273,274,275,281,282,284,285,286,287,289,295,296,297,298,301,304,305,308,],[4,-10,25,-21,-19,30,-18,-22,-20,-17,-11,-16,-23,-34,-15,-49,-50,-51,-42,-41,-32,-12,100,-24,101,-35,106,-135,-119,-130,-136,-129,-140,-141,-87,-131,-89,-40,-132,-30,-120,-137,-138,-139,-133,-134,-63,-64,-27,-90,-123,-124,-47,-48,-38,-39,-86,-45,-52,-53,-126,-121,-31,-122,-88,-159,-3,-125,-127,219,-5,-146,-152,227,-147,-157,-151,-174,-156,-2,-149,-178,-158,-142,-155,-176,-144,-143,-150,-120,-145,-83,-43,-128,-59,-60,-54,-85,-3,-173,-153,-193,-177,-161,-160,-175,-154,-148,-179,-159,-162,-61,-57,-58,272,-155,-120,-194,-3,283,-194,-194,-3,-180,-62,294,-3,-3,-192,-2,-191,-190,-183,-86,-181,-86,-3,-182,]),'SHR_ASSIGN':([68,69,70,72,73,74,76,77,78,79,83,85,87,88,89,90,92,108,109,111,156,158,159,160,161,177,178,206,207,213,218,266,267,],[-135,-119,-130,-136,-129,-140,-141,-87,-131,-89,-132,-120,-137,-138,-139,-133,-134,-90,-123,-124,-126,-121,-31,-122,-88,-125,-127,241,-30,-120,-128,-30,-120,]),'MOD':([68,69,70,72,73,74,76,77,78,79,83,84,85,87,88,89,90,92,108,109,111,115,155,156,158,159,160,161,177,178,207,213,218,235,259,266,267,284,299,],[-135,-119,-130,-136,-129,-140,-141,-87,-131,-89,-132,138,-120,-137,-138,-139,-133,-134,-90,-123,-124,138,138,-126,-121,138,-122,-88,-125,-127,138,-120,-128,138,138,138,-120,138,138,]),'SWITCH':([151,174,227,289,298,304,],[-86,204,-85,-2,-86,-86,]),'LTN':([68,69,70,72,73,74,76,77,78,79,83,84,85,87,88,89,90,92,108,109,111,115,155,156,158,159,160,161,177,178,207,213,218,235,259,266,267,284,299,],[-135,-119,-130,-136,-129,-140,-141,-87,-131,-89,-132,133,-120,-137,-138,-139,-133,-134,-90,-123,-124,133,133,-126,-121,133,-122,-88,-125,-127,133,-120,-128,133,133,133,-120,133,133,]),'AND_NOT':([68,69,70,72,73,74,76,77,78,79,83,84,85,87,88,89,90,92,108,109,111,115,155,156,158,159,160,161,177,178,207,213,218,235,259,266,267,284,299,],[-135,-119,-130,-136,-129,-140,-141,-87,-131,-89,-132,123,-120,-137,-138,-139,-133,-134,-90,-123,-124,123,123,-126,-121,123,-122,-88,-125,-127,123,-120,-128,123,123,123,-120,123,123,]),'COMMA':([29,45,47,50,68,69,70,72,73,74,76,77,78,79,81,83,84,85,87,88,89,90,92,95,96,102,108,109,111,139,140,141,142,145,146,147,148,153,154,156,157,158,159,160,161,166,167,168,170,171,172,173,177,178,181,184,185,186,206,207,213,218,225,226,229,231,250,255,258,266,267,],[41,-49,-50,-51,-135,-119,-130,-136,-129,-140,-141,-87,-131,-89,114,-132,-30,-120,-137,-138,-139,-133,-134,-63,-64,114,-90,-123,-124,-47,-48,114,114,163,165,-75,169,-52,-53,-126,179,-121,-31,-122,-88,-77,-79,-78,-80,188,-69,-68,-125,-127,221,-76,-82,-81,114,-30,41,-128,-71,-70,114,114,114,114,114,-30,41,]),'IMPORT':([4,6,25,],[-9,8,-8,]),'ASSIGN':([29,34,40,45,47,50,52,53,61,68,69,70,72,73,74,76,77,78,79,83,85,87,88,89,90,92,95,96,108,109,111,139,140,153,154,156,158,159,160,161,177,178,206,207,213,218,266,267,],[-28,48,60,-49,-50,-51,97,98,-29,-135,-119,-130,-136,-129,-140,-141,-87,-131,-89,-132,-120,-137,-138,-139,-133,-134,-63,-64,-90,-123,-124,-47,-48,-52,-53,-126,-121,-31,-122,-88,-125,-127,240,-30,-120,-128,-30,-120,]),'DEFINE':([29,61,197,213,267,],[-28,-29,230,-28,-28,]),'SUB_ASSIGN':([68,69,70,72,73,74,76,77,78,79,83,85,87,88,89,90,92,108,109,111,156,158,159,160,161,177,178,206,207,213,218,266,267,],[-135,-119,-130,-136,-129,-140,-141,-87,-131,-89,-132,-120,-137,-138,-139,-133,-134,-90,-123,-124,-126,-121,-31,-122,-88,-125,-127,236,-30,-120,-128,-30,-120,]),'SHR':([68,69,70,72,73,74,76,77,78,79,83,84,85,87,88,89,90,92,108,109,111,115,155,156,158,159,160,161,177,178,207,213,218,235,259,266,267,284,299,],[-135,-119,-130,-136,-129,-140,-141,-87,-131,-89,-132,126,-120,-137,-138,-139,-133,-134,-90,-123,-124,126,126,-126,-121,126,-122,-88,-125,-127,126,-120,-128,126,126,126,-120,126,126,]),'XOR':([48,60,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,90,91,92,97,98,108,109,110,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,151,155,156,158,159,160,161,174,177,178,179,196,198,200,204,207,210,213,214,218,227,230,232,235,236,237,238,239,240,241,242,243,244,245,246,251,256,259,266,267,272,283,284,289,291,294,298,299,304,],[75,75,-114,75,-135,-119,-130,-117,-136,-129,-140,-116,-141,-87,-131,-89,-113,75,-132,127,-120,-118,-137,-138,-139,-133,-115,-134,75,75,-90,-123,75,-124,75,75,127,-103,-91,-106,-107,-97,-101,-92,-112,75,-94,-110,-105,-95,-100,-102,-96,-109,-98,-111,-93,-99,-104,-108,-86,127,-126,-121,127,-122,-88,75,-125,-127,75,75,75,-2,75,127,75,-120,-2,-128,-85,75,-193,127,-164,75,-165,-169,-172,-171,-168,-167,-170,-166,-163,75,75,127,127,-120,75,75,127,-2,75,75,-86,127,-86,]),'STRING':([8,23,24,37,48,60,66,67,71,75,80,82,86,91,97,98,100,110,112,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,151,174,179,196,198,200,204,210,214,227,230,232,236,237,238,239,240,241,242,243,244,245,246,251,256,272,283,289,291,294,298,304,],[20,-14,20,20,76,76,-114,76,-117,-116,-113,76,-118,-115,76,76,-13,76,76,76,-103,-91,-106,-107,-97,-101,-92,-112,76,-94,-110,-105,-95,-100,-102,-96,-109,-98,-111,-93,-99,-104,-108,-86,76,76,76,76,-2,76,76,-2,-85,76,-193,-164,76,-165,-169,-172,-171,-168,-167,-170,-166,-163,76,76,76,76,-2,76,76,-86,-86,]),'FOR':([151,174,227,289,298,304,],[-86,200,-85,-2,-86,-86,]),'PACKAGE':([0,],[3,]),'RBRACK':([65,68,69,70,72,73,74,76,77,78,79,83,85,87,88,89,90,92,108,109,111,155,156,158,160,161,177,178,218,],[107,-135,-119,-130,-136,-129,-140,-141,-87,-131,-89,-132,-120,-137,-138,-139,-133,-134,-90,-123,-124,177,-126,-121,-122,-88,-125,-127,-128,]),'GTN':([68,69,70,72,73,74,76,77,78,79,83,84,85,87,88,89,90,92,108,109,111,115,155,156,158,159,160,161,177,178,207,213,218,235,259,266,267,284,299,],[-135,-119,-130,-136,-129,-140,-141,-87,-131,-89,-132,129,-120,-137,-138,-139,-133,-134,-90,-123,-124,129,129,-126,-121,129,-122,-88,-125,-127,129,-120,-128,129,129,129,-120,129,129,]),'ELSE':([216,270,281,],[-83,-3,292,]),'ADD':([48,60,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,90,91,92,97,98,108,109,110,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,151,155,156,158,159,160,161,174,177,178,179,196,198,200,204,207,210,213,214,218,227,230,232,235,236,237,238,239,240,241,242,243,244,245,246,251,256,259,266,267,272,283,284,289,291,294,298,299,304,],[80,80,-114,80,-135,-119,-130,-117,-136,-129,-140,-116,-141,-87,-131,-89,-113,80,-132,130,-120,-118,-137,-138,-139,-133,-115,-134,80,80,-90,-123,80,-124,80,80,130,-103,-91,-106,-107,-97,-101,-92,-112,80,-94,-110,-105,-95,-100,-102,-96,-109,-98,-111,-93,-99,-104,-108,-86,130,-126,-121,130,-122,-88,80,-125,-127,80,80,80,-2,80,130,80,-120,-2,-128,-85,80,-193,130,-164,80,-165,-169,-172,-171,-168,-167,-170,-166,-163,80,80,130,130,-120,80,80,130,-2,80,80,-86,130,-86,]),'LAND':([68,69,70,72,73,74,76,77,78,79,83,84,85,87,88,89,90,92,108,109,111,115,155,156,158,159,160,161,177,178,207,213,218,235,259,266,267,284,299,],[-135,-119,-130,-136,-129,-140,-141,-87,-131,-89,-132,122,-120,-137,-138,-139,-133,-134,-90,-123,-124,122,122,-126,-121,122,-122,-88,-125,-127,122,-120,-128,122,122,122,-120,122,122,]),'EQL':([68,69,70,72,73,74,76,77,78,79,83,84,85,87,88,89,90,92,108,109,111,115,155,156,158,159,160,161,177,178,207,213,218,235,259,266,267,284,299,],[-135,-119,-130,-136,-129,-140,-141,-87,-131,-89,-132,131,-120,-137,-138,-139,-133,-134,-90,-123,-124,131,131,-126,-121,131,-122,-88,-125,-127,131,-120,-128,131,131,131,-120,131,131,]),'LPAREN':([8,10,16,29,34,42,43,48,49,51,60,61,62,66,67,68,69,70,71,72,73,74,75,76,78,79,80,82,83,85,86,87,88,89,90,91,92,97,98,104,107,109,110,111,112,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,144,146,148,149,151,156,158,160,164,174,177,178,179,181,183,185,186,188,196,198,200,204,210,213,214,218,227,230,232,236,237,238,239,240,241,242,243,244,245,246,251,253,256,267,272,283,289,291,294,298,304,],[23,27,33,-28,49,-2,-46,82,49,49,82,-29,103,-114,82,-135,-119,-130,-117,-136,-129,-140,-116,-141,-131,112,-113,82,-132,-120,-118,-137,-138,-139,-133,-115,-134,82,82,149,49,-123,82,-124,82,82,-103,-91,-106,-107,-97,-101,-92,-112,82,-94,-110,-105,-95,-100,-102,-96,-109,-98,-111,-93,-99,-104,-108,-72,49,49,49,-86,-126,-121,-122,-73,82,-125,-127,82,49,-74,-82,-81,49,82,82,-2,82,82,-120,-2,-128,-85,82,-193,-164,82,-165,-169,-172,-171,-168,-167,-170,-166,-163,82,49,82,-120,82,82,-2,82,82,-86,-86,]),'VAR':([4,6,7,25,30,151,174,227,289,298,304,],[-9,-7,16,-8,-6,-86,16,-85,-2,-86,-86,]),'SHL':([68,69,70,72,73,74,76,77,78,79,83,84,85,87,88,89,90,92,108,109,111,115,155,156,158,159,160,161,177,178,207,213,218,235,259,266,267,284,299,],[-135,-119,-130,-136,-129,-140,-141,-87,-131,-89,-132,132,-120,-137,-138,-139,-133,-134,-90,-123,-124,132,132,-126,-121,132,-122,-88,-125,-127,132,-120,-128,132,132,132,-120,132,132,]),'ID':([3,8,10,15,16,17,23,27,28,29,31,33,34,37,39,41,44,48,49,51,60,61,66,67,71,75,80,82,86,91,97,98,100,101,103,106,107,110,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,143,146,148,149,151,162,163,165,169,174,179,181,185,186,188,196,198,200,202,204,208,210,214,219,221,227,230,232,236,237,238,239,240,241,242,243,244,245,246,251,252,253,256,271,272,283,289,291,294,298,304,],[5,24,29,-44,29,36,-14,-26,40,-28,43,-37,53,24,29,29,29,85,94,96,85,-29,-114,85,-117,-116,-113,85,-118,-115,85,85,-13,-25,148,-36,154,85,85,158,85,-103,-91,-106,-107,-97,-101,-92,-112,85,-94,-110,-105,-95,-100,-102,-96,-109,-98,-111,-93,-99,-104,-108,-56,167,170,173,-86,181,148,185,186,213,85,223,-82,-81,226,85,85,-2,233,85,249,85,-2,-55,29,-85,85,-193,-164,85,-165,-169,-172,-171,-168,-167,-170,-166,-163,85,260,263,267,282,85,213,-2,85,213,-86,-86,]),'IF':([151,174,227,289,292,298,304,],[-86,214,-85,-2,214,-86,-86,]),'AND':([48,60,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,90,91,92,97,98,108,109,110,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,151,155,156,158,159,160,161,174,177,178,179,196,198,200,204,207,210,213,214,218,227,230,232,235,236,237,238,239,240,241,242,243,244,245,246,251,256,259,266,267,272,283,284,289,291,294,298,299,304,],[86,86,-114,86,-135,-119,-130,-117,-136,-129,-140,-116,-141,-87,-131,-89,-113,86,-132,134,-120,-118,-137,-138,-139,-133,-115,-134,86,86,-90,-123,86,-124,86,86,134,-103,-91,-106,-107,-97,-101,-92,-112,86,-94,-110,-105,-95,-100,-102,-96,-109,-98,-111,-93,-99,-104,-108,-86,134,-126,-121,134,-122,-88,86,-125,-127,86,86,86,-2,86,134,86,-120,-2,-128,-85,86,-193,134,-164,86,-165,-169,-172,-171,-168,-167,-170,-166,-163,86,86,134,134,-120,86,86,134,-2,86,86,-86,134,-86,]),'MOD_ASSIGN':([68,69,70,72,73,74,76,77,78,79,83,85,87,88,89,90,92,108,109,111,156,158,159,160,161,177,178,206,207,213,218,266,267,],[-135,-119,-130,-136,-129,-140,-141,-87,-131,-89,-132,-120,-137,-138,-139,-133,-134,-90,-123,-124,-126,-121,-31,-122,-88,-125,-127,243,-30,-120,-128,-30,-120,]),'LBRACE':([55,68,69,70,72,73,74,76,77,78,79,83,84,85,87,88,89,90,92,99,104,105,108,109,111,144,150,151,156,158,159,160,161,164,174,177,178,183,187,193,194,199,200,203,207,213,218,227,232,234,235,247,248,255,256,258,259,265,266,267,283,289,292,293,294,298,300,302,304,],[-4,-135,-119,-130,-136,-129,-140,-141,-87,-131,-89,-132,-30,-120,-137,-138,-139,-133,-134,143,-67,151,-90,-123,-124,-72,-65,-86,-126,-121,-31,-122,-88,-73,-2,-125,-127,-74,-66,-157,151,-156,-2,-158,-155,-120,-128,-85,-193,257,-184,-161,-160,-179,151,-162,151,151,151,-120,-159,-2,-2,-197,-159,-86,151,-198,-86,]),'FALSE':([48,60,66,67,71,75,80,82,86,91,97,98,110,112,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,151,174,179,196,198,200,204,210,214,227,230,232,236,237,238,239,240,241,242,243,244,245,246,251,256,272,283,289,291,294,298,304,],[87,87,-114,87,-117,-116,-113,87,-118,-115,87,87,87,87,87,-103,-91,-106,-107,-97,-101,-92,-112,87,-94,-110,-105,-95,-100,-102,-96,-109,-98,-111,-93,-99,-104,-108,-86,87,87,87,87,-2,87,87,-2,-85,87,-193,-164,87,-165,-169,-172,-171,-168,-167,-170,-166,-163,87,87,87,87,-2,87,87,-86,-86,]),'STRUCT':([29,35,36,61,181,253,],[-28,55,-33,-29,220,261,]),'XOR_ASSIGN':([68,69,70,72,73,74,76,77,78,79,83,85,87,88,89,90,92,108,109,111,156,158,159,160,161,177,178,206,207,213,218,266,267,],[-135,-119,-130,-136,-129,-140,-141,-87,-131,-89,-132,-120,-137,-138,-139,-133,-134,-90,-123,-124,-126,-121,-31,-122,-88,-125,-127,239,-30,-120,-128,-30,-120,]),'INT':([46,48,60,66,67,71,75,80,82,86,91,97,98,110,112,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,151,174,179,196,198,200,204,210,214,227,230,232,236,237,238,239,240,241,242,243,244,245,246,251,256,272,283,289,291,294,298,304,],[65,88,88,-114,88,-117,-116,-113,88,-118,-115,88,88,88,88,88,-103,-91,-106,-107,-97,-101,-92,-112,88,-94,-110,-105,-95,-100,-102,-96,-109,-98,-111,-93,-99,-104,-108,-86,88,88,88,88,-2,88,88,-2,-85,88,-193,-164,88,-165,-169,-172,-171,-168,-167,-170,-166,-163,88,88,88,88,-2,88,88,-86,-86,]),'FLOAT':([48,60,66,67,71,75,80,82,86,91,97,98,110,112,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,151,174,179,196,198,200,204,210,214,227,230,232,236,237,238,239,240,241,242,243,244,245,246,251,256,272,283,289,291,294,298,304,],[89,89,-114,89,-117,-116,-113,89,-118,-115,89,89,89,89,89,-103,-91,-106,-107,-97,-101,-92,-112,89,-94,-110,-105,-95,-100,-102,-96,-109,-98,-111,-93,-99,-104,-108,-86,89,89,89,89,-2,89,89,-2,-85,89,-193,-164,89,-165,-169,-172,-171,-168,-167,-170,-166,-163,89,89,89,89,-2,89,89,-86,-86,]),'OR_ASSIGN':([68,69,70,72,73,74,76,77,78,79,83,85,87,88,89,90,92,108,109,111,156,158,159,160,161,177,178,206,207,213,218,266,267,],[-135,-119,-130,-136,-129,-140,-141,-87,-131,-89,-132,-120,-137,-138,-139,-133,-134,-90,-123,-124,-126,-121,-31,-122,-88,-125,-127,242,-30,-120,-128,-30,-120,]),'LBRACK':([29,34,49,51,61,68,69,70,72,73,74,76,78,79,83,85,87,88,89,90,92,107,109,111,146,148,149,156,158,160,177,178,181,185,186,188,213,218,253,267,],[-28,46,46,46,-29,-135,-119,-130,-136,-129,-140,-141,-131,110,-132,-120,-137,-138,-139,-133,-134,46,-123,-124,46,46,46,-126,-121,-122,-125,-127,46,-82,-81,46,-120,-128,46,-120,]),'ADD_ASSIGN':([68,69,70,72,73,74,76,77,78,79,83,85,87,88,89,90,92,108,109,111,156,158,159,160,161,177,178,206,207,213,218,266,267,],[-135,-119,-130,-136,-129,-140,-141,-87,-131,-89,-132,-120,-137,-138,-139,-133,-134,-90,-123,-124,-126,-121,-31,-122,-88,-125,-127,246,-30,-120,-128,-30,-120,]),'RBRACE':([143,151,162,174,175,219,227,276,277,279,288,289,290,298,303,304,306,307,309,],[-56,-86,182,-84,216,-55,-85,-186,-196,-187,297,-2,-185,-86,-3,-86,-189,-3,-188,]),'LEQ':([68,69,70,72,73,74,76,77,78,79,83,84,85,87,88,89,90,92,108,109,111,115,155,156,158,159,160,161,177,178,207,213,218,235,259,266,267,284,299,],[-135,-119,-130,-136,-129,-140,-141,-87,-131,-89,-132,136,-120,-137,-138,-139,-133,-134,-90,-123,-124,136,136,-126,-121,136,-122,-88,-125,-127,136,-120,-128,136,136,136,-120,136,136,]),'CONTINUE':([151,174,227,289,298,304,],[-86,202,-85,-2,-86,-86,]),'MUL_ASSIGN':([68,69,70,72,73,74,76,77,78,79,83,85,87,88,89,90,92,108,109,111,156,158,159,160,161,177,178,206,207,213,218,266,267,],[-135,-119,-130,-136,-129,-140,-141,-87,-131,-89,-132,-120,-137,-138,-139,-133,-134,-90,-123,-124,-126,-121,-31,-122,-88,-125,-127,238,-30,-120,-128,-30,-120,]),'NOT':([48,60,66,67,71,75,80,82,86,91,97,98,110,112,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,151,174,179,196,198,200,204,210,214,227,230,232,236,237,238,239,240,241,242,243,244,245,246,251,256,272,283,289,291,294,298,304,],[91,91,-114,91,-117,-116,-113,91,-118,-115,91,91,91,91,91,-103,-91,-106,-107,-97,-101,-92,-112,91,-94,-110,-105,-95,-100,-102,-96,-109,-98,-111,-93,-99,-104,-108,-86,91,91,91,91,-2,91,91,-2,-85,91,-193,-164,91,-165,-169,-172,-171,-168,-167,-170,-166,-163,91,91,91,91,-2,91,91,-86,-86,]),'$end':([2,4,6,7,25,30,],[0,-9,-7,-1,-8,-6,]),'TYPE':([4,6,7,25,30,151,174,227,289,298,304,],[-9,-7,17,-8,-6,-86,17,-85,-2,-86,-86,]),'OR':([68,69,70,72,73,74,76,77,78,79,83,84,85,87,88,89,90,92,108,109,111,115,155,156,158,159,160,161,177,178,207,213,218,235,259,266,267,284,299,],[-135,-119,-130,-136,-129,-140,-141,-87,-131,-89,-132,137,-120,-137,-138,-139,-133,-134,-90,-123,-124,137,137,-126,-121,137,-122,-88,-125,-127,137,-120,-128,137,137,137,-120,137,137,]),'INC':([68,69,70,72,73,74,76,77,78,79,83,85,87,88,89,90,92,108,109,111,156,158,160,161,177,178,207,213,218,266,267,],[-135,-119,-130,-136,-129,-140,-141,-87,-131,-89,-132,-120,-137,-138,-139,-133,-134,-90,-123,-124,-126,-121,-122,-88,-125,-127,248,-120,-128,248,-120,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'ContinueStmt':([174,],[189,]),'FalseLit':([48,60,67,82,97,98,110,112,114,124,174,179,196,198,204,210,230,237,251,256,272,283,291,294,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'ScanStmt':([174,],[190,]),'Statement':([174,],[191,]),'IfStmt':([174,292,],[192,301,]),'Assignment':([174,256,283,294,],[193,193,193,193,]),'OpenF':([232,],[256,]),'BinaryOp':([84,115,155,159,207,235,259,266,284,299,],[124,124,124,124,124,124,124,124,124,124,]),'IncDecStmt':([174,256,283,294,],[199,199,199,199,]),'OpenW':([257,],[269,]),'ParameterDecl':([103,163,],[147,184,]),'OpenS':([42,174,200,214,269,279,289,292,],[62,194,232,251,280,280,298,300,]),'OpenStructS':([55,],[99,]),'StatementList':([151,298,304,],[175,303,307,]),'RelOp':([84,115,155,159,207,235,259,266,284,299,],[135,135,135,135,135,135,135,135,135,135,]),'VarDecl':([7,174,],[18,18,]),'StringLit':([48,60,67,82,97,98,110,112,114,124,174,179,196,198,204,210,230,237,251,256,272,283,291,294,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'PrintStmt':([174,],[195,]),'PrimaryExpr':([48,60,67,82,97,98,110,112,114,124,174,179,196,198,204,210,230,237,251,256,272,283,291,294,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'TrueLit':([48,60,67,82,97,98,110,112,114,124,174,179,196,198,204,210,230,237,251,256,272,283,291,294,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'Index':([79,],[109,]),'Parameters':([62,],[104,]),'UnaryOp':([48,60,67,82,97,98,110,112,114,124,174,179,196,198,204,210,230,237,251,256,272,283,291,294,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'SourceFile':([0,],[2,]),'ImportPath':([8,24,37,],[22,38,22,]),'TopLevelDecl':([7,],[13,]),'IdentifierList':([10,16,39,41,44,174,221,256,283,294,],[28,34,28,61,34,197,253,197,197,197,]),'TypeLit':([34,49,51,107,146,148,149,181,188,253,],[45,45,45,45,45,45,45,45,45,45,]),'PackageClause':([0,],[1,]),'TypeList':([149,],[171,]),'ExprCaseClause':([269,279,],[279,279,]),'AddOp':([84,115,155,159,207,235,259,266,284,299,],[125,125,125,125,125,125,125,125,125,125,]),'CloseStructS':([182,],[224,]),'FloatLit':([48,60,67,82,97,98,110,112,114,124,174,179,196,198,204,210,230,237,251,256,272,283,291,294,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'PointerType':([34,49,51,107,146,148,149,181,188,253,],[50,50,50,50,50,50,50,50,50,50,]),'ConstSpec_curl':([27,],[39,]),'Signature':([62,],[105,]),'Block':([105,194,256,259,265,266,300,],[152,228,268,270,273,274,305,]),'ImportSpec_curl':([23,],[37,]),'DefCaseClause':([269,279,],[276,276,]),'SwitchStmt':([174,],[201,]),'VarSpec':([16,44,],[32,64,]),'Result':([104,],[150,]),'StructName':([17,],[35,]),'CloseBase':([152,],[176,]),'TopLevelDecl_curl':([6,],[7,]),'Literal':([48,60,67,82,97,98,110,112,114,124,174,179,196,198,204,210,230,237,251,256,272,283,291,294,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'Statement_curl':([151,298,304,],[174,174,174,]),'IntLit':([48,60,67,82,97,98,110,112,114,124,174,179,196,198,204,210,230,237,251,256,272,283,291,294,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'ImportDecl':([6,],[9,]),'CloseS':([176,228,270,275,285,286,303,305,307,],[217,254,281,287,295,296,306,308,309,]),'AssignOp':([206,],[237,]),'CloseW':([277,],[288,]),'FuncName':([31,],[42,]),'CloseF':([268,273,274,],[275,285,286,]),'Declaration':([7,174,],[14,205,]),'StructType':([35,],[54,]),'MulOp':([84,115,155,159,207,235,259,266,284,299,],[128,128,128,128,128,128,128,128,128,128,]),'ExpressionList':([48,60,97,98,112,174,196,198,210,230,237,256,283,294,],[81,102,141,142,157,206,229,231,250,255,258,206,206,206,]),'SimpleStmt':([174,256,283,294,],[211,264,293,302,]),'Expression':([48,60,82,97,98,110,112,114,174,179,196,198,204,210,230,237,251,256,272,283,291,294,],[84,84,115,84,84,155,84,159,207,159,84,84,235,84,84,84,259,266,284,207,299,207,]),'FieldDecl_curl':([143,],[162,]),'FunctionDecl':([7,],[12,]),'ReturnStmt':([174,],[209,]),'ParaIdList':([103,163,],[146,146,]),'ConstDecl':([7,174,],[19,19,]),'StructDecl':([7,174,],[11,11,]),'ExpressionName':([204,],[234,]),'ArrayType':([34,49,51,107,146,148,149,181,188,253,],[47,47,47,47,47,47,47,47,47,47,]),'ImportDecl_curl':([4,],[6,]),'ParameterList':([103,],[145,]),'ForStmt':([174,],[212,]),'Arguments':([79,],[111,]),'VarSpec_curl':([33,],[44,]),'ConstSpec':([10,39,],[26,59,]),'RuneLit':([48,60,67,82,97,98,110,112,114,124,174,179,196,198,204,210,230,237,251,256,272,283,291,294,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'ImportSpec':([8,37,],[21,57,]),'Type':([34,49,51,107,146,148,149,181,188,253,],[52,93,95,153,166,168,172,222,225,262,]),'UnaryExpr':([48,60,67,82,97,98,110,112,114,124,174,179,196,198,204,210,230,237,251,256,272,283,291,294,],[77,77,108,77,77,77,77,77,77,161,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'SetBase':([15,],[31,]),'ForClause':([256,],[265,]),'ShortVarDecl':([174,256,283,294,],[203,203,203,203,]),'FieldDecl':([162,],[180,]),'BreakStmt':([174,],[215,]),'ExprCaseClause_curl':([269,279,],[277,290,]),'BasicLit':([48,60,67,82,97,98,110,112,114,124,174,179,196,198,204,210,230,237,251,256,272,283,291,294,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> SourceFile","S'",1,None,None,None),
  ('SourceFile -> PackageClause SEMICOLON ImportDecl_curl TopLevelDecl_curl','SourceFile',4,'p_SourceFile','parser.py',185),
  ('OpenS -> <empty>','OpenS',0,'p_OpenS','parser.py',215),
  ('CloseS -> <empty>','CloseS',0,'p_CloseS','parser.py',219),
  ('OpenStructS -> <empty>','OpenStructS',0,'p_OpenStructS','parser.py',223),
  ('CloseStructS -> <empty>','CloseStructS',0,'p_CloseStructS','parser.py',227),
  ('TopLevelDecl_curl -> TopLevelDecl_curl TopLevelDecl SEMICOLON','TopLevelDecl_curl',3,'p_TopLevelDecl_curl','parser.py',231),
  ('TopLevelDecl_curl -> <empty>','TopLevelDecl_curl',0,'p_TopLevelDecl_curl','parser.py',232),
  ('ImportDecl_curl -> ImportDecl_curl ImportDecl SEMICOLON','ImportDecl_curl',3,'p_ImportDecl_curl','parser.py',241),
  ('ImportDecl_curl -> <empty>','ImportDecl_curl',0,'p_ImportDecl_curl','parser.py',242),
  ('PackageClause -> PACKAGE ID','PackageClause',2,'p_PackageClause','parser.py',251),
  ('ImportDecl -> IMPORT ImportSpec','ImportDecl',2,'p_ImportDecl','parser.py',257),
  ('ImportDecl -> IMPORT LPAREN ImportSpec_curl RPAREN','ImportDecl',4,'p_ImportDecl','parser.py',258),
  ('ImportSpec_curl -> ImportSpec_curl ImportSpec SEMICOLON','ImportSpec_curl',3,'p_ImportSpec_curl','parser.py',264),
  ('ImportSpec_curl -> <empty>','ImportSpec_curl',0,'p_ImportSpec_curl','parser.py',265),
  ('ImportSpec -> ID ImportPath','ImportSpec',2,'p_ImportSpec','parser.py',271),
  ('ImportSpec -> ImportPath','ImportSpec',1,'p_ImportSpec','parser.py',272),
  ('ImportPath -> STRING','ImportPath',1,'p_ImportPath','parser.py',279),
  ('TopLevelDecl -> Declaration','TopLevelDecl',1,'p_TopLevelDecl','parser.py',285),
  ('TopLevelDecl -> FunctionDecl','TopLevelDecl',1,'p_TopLevelDecl','parser.py',286),
  ('Declaration -> ConstDecl','Declaration',1,'p_Declaration','parser.py',292),
  ('Declaration -> StructDecl','Declaration',1,'p_Declaration','parser.py',293),
  ('Declaration -> VarDecl','Declaration',1,'p_Declaration','parser.py',294),
  ('ConstDecl -> CONST ConstSpec','ConstDecl',2,'p_ConstDecl','parser.py',300),
  ('ConstDecl -> CONST LPAREN ConstSpec_curl RPAREN','ConstDecl',4,'p_ConstDecl','parser.py',301),
  ('ConstSpec_curl -> ConstSpec_curl ConstSpec SEMICOLON','ConstSpec_curl',3,'p_ConstSpec_curl','parser.py',310),
  ('ConstSpec_curl -> <empty>','ConstSpec_curl',0,'p_ConstSpec_curl','parser.py',311),
  ('ConstSpec -> IdentifierList ID ASSIGN ExpressionList','ConstSpec',4,'p_ConstSpec','parser.py',319),
  ('IdentifierList -> ID','IdentifierList',1,'p_IdentifierList','parser.py',358),
  ('IdentifierList -> ID COMMA IdentifierList','IdentifierList',3,'p_IdentifierList','parser.py',359),
  ('ExpressionList -> Expression','ExpressionList',1,'p_ExpressionList','parser.py',370),
  ('ExpressionList -> ExpressionList COMMA Expression','ExpressionList',3,'p_ExpressionList','parser.py',371),
  ('StructDecl -> TYPE StructName StructType','StructDecl',3,'p_StructDecl','parser.py',409),
  ('StructName -> ID','StructName',1,'p_StructName','parser.py',417),
  ('VarDecl -> VAR VarSpec','VarDecl',2,'p_VarDecl','parser.py',431),
  ('VarDecl -> VAR LPAREN VarSpec_curl RPAREN','VarDecl',4,'p_VarDecl','parser.py',432),
  ('VarSpec_curl -> VarSpec_curl VarSpec SEMICOLON','VarSpec_curl',3,'p_VarSpec_curl','parser.py',441),
  ('VarSpec_curl -> <empty>','VarSpec_curl',0,'p_VarSpec_curl','parser.py',442),
  ('VarSpec -> IdentifierList Type ASSIGN ExpressionList','VarSpec',4,'p_VarSpec','parser.py',450),
  ('VarSpec -> IdentifierList ID ASSIGN ExpressionList','VarSpec',4,'p_VarSpec','parser.py',451),
  ('VarSpec -> IdentifierList ASSIGN ExpressionList','VarSpec',3,'p_VarSpec','parser.py',452),
  ('VarSpec -> IdentifierList ID','VarSpec',2,'p_VarSpec','parser.py',453),
  ('VarSpec -> IdentifierList Type','VarSpec',2,'p_VarSpec','parser.py',454),
  ('FunctionDecl -> FUNC SetBase FuncName OpenS Signature Block CloseBase CloseS','FunctionDecl',8,'p_FunctionDecl','parser.py',530),
  ('SetBase -> <empty>','SetBase',0,'p_SetBase','parser.py',538),
  ('CloseBase -> <empty>','CloseBase',0,'p_CloseBase','parser.py',544),
  ('FuncName -> ID','FuncName',1,'p_FuncName','parser.py',549),
  ('Type -> LPAREN Type RPAREN','Type',3,'p_Type','parser.py',562),
  ('Type -> LPAREN ID RPAREN','Type',3,'p_Type','parser.py',563),
  ('Type -> TypeLit','Type',1,'p_Type','parser.py',564),
  ('TypeLit -> ArrayType','TypeLit',1,'p_TypeLit','parser.py',581),
  ('TypeLit -> PointerType','TypeLit',1,'p_TypeLit','parser.py',582),
  ('ArrayType -> LBRACK INT RBRACK Type','ArrayType',4,'p_ArrayType','parser.py',588),
  ('ArrayType -> LBRACK INT RBRACK ID','ArrayType',4,'p_ArrayType','parser.py',589),
  ('StructType -> STRUCT OpenStructS LBRACE FieldDecl_curl RBRACE CloseStructS','StructType',6,'p_StructType','parser.py',607),
  ('FieldDecl_curl -> FieldDecl_curl FieldDecl SEMICOLON','FieldDecl_curl',3,'p_FieldDecl_curl','parser.py',613),
  ('FieldDecl_curl -> <empty>','FieldDecl_curl',0,'p_FieldDecl_curl','parser.py',614),
  ('FieldDecl -> ID COMMA IdentifierList Type','FieldDecl',4,'p_FieldDecl','parser.py',620),
  ('FieldDecl -> ID COMMA IdentifierList ID','FieldDecl',4,'p_FieldDecl','parser.py',621),
  ('FieldDecl -> ID Type','FieldDecl',2,'p_FieldDecl','parser.py',622),
  ('FieldDecl -> ID ID','FieldDecl',2,'p_FieldDecl','parser.py',623),
  ('FieldDecl -> ID STRUCT MUL ID','FieldDecl',4,'p_FieldDecl','parser.py',624),
  ('FieldDecl -> ID COMMA IdentifierList STRUCT MUL ID','FieldDecl',6,'p_FieldDecl','parser.py',625),
  ('PointerType -> MUL Type','PointerType',2,'p_PointerType','parser.py',695),
  ('PointerType -> MUL ID','PointerType',2,'p_PointerType','parser.py',696),
  ('Signature -> Parameters Result','Signature',2,'p_Signature','parser.py',713),
  ('Result -> LPAREN TypeList RPAREN','Result',3,'p_Result','parser.py',719),
  ('Result -> <empty>','Result',0,'p_Result','parser.py',720),
  ('TypeList -> ID','TypeList',1,'p_TypeList','parser.py',741),
  ('TypeList -> Type','TypeList',1,'p_TypeList','parser.py',742),
  ('TypeList -> TypeList COMMA ID','TypeList',3,'p_TypeList','parser.py',743),
  ('TypeList -> TypeList COMMA Type','TypeList',3,'p_TypeList','parser.py',744),
  ('Parameters -> LPAREN RPAREN','Parameters',2,'p_Parameters','parser.py',772),
  ('Parameters -> LPAREN ParameterList RPAREN','Parameters',3,'p_Parameters','parser.py',773),
  ('Parameters -> LPAREN ParameterList COMMA RPAREN','Parameters',4,'p_Parameters','parser.py',774),
  ('ParameterList -> ParameterDecl','ParameterList',1,'p_ParameterList','parser.py',796),
  ('ParameterList -> ParameterList COMMA ParameterDecl','ParameterList',3,'p_ParameterList','parser.py',797),
  ('ParameterDecl -> ParaIdList Type','ParameterDecl',2,'p_ParameterDecl','parser.py',812),
  ('ParameterDecl -> ID Type','ParameterDecl',2,'p_ParameterDecl','parser.py',813),
  ('ParameterDecl -> ParaIdList ID','ParameterDecl',2,'p_ParameterDecl','parser.py',814),
  ('ParameterDecl -> ID ID','ParameterDecl',2,'p_ParameterDecl','parser.py',815),
  ('ParaIdList -> ID COMMA ID','ParaIdList',3,'p_ParaIdList','parser.py',864),
  ('ParaIdList -> ParaIdList COMMA ID','ParaIdList',3,'p_ParaIdList','parser.py',865),
  ('Block -> LBRACE StatementList RBRACE','Block',3,'p_Block','parser.py',877),
  ('StatementList -> Statement_curl','StatementList',1,'p_StatementList','parser.py',883),
  ('Statement_curl -> Statement_curl Statement SEMICOLON','Statement_curl',3,'p_Statement_curl','parser.py',889),
  ('Statement_curl -> <empty>','Statement_curl',0,'p_Statement_curl','parser.py',890),
  ('Expression -> UnaryExpr','Expression',1,'p_Expression','parser.py',899),
  ('Expression -> Expression BinaryOp UnaryExpr','Expression',3,'p_Expression','parser.py',900),
  ('UnaryExpr -> PrimaryExpr','UnaryExpr',1,'p_UnaryExpr','parser.py',930),
  ('UnaryExpr -> UnaryOp UnaryExpr','UnaryExpr',2,'p_UnaryExpr','parser.py',931),
  ('BinaryOp -> LOR','BinaryOp',1,'p_BinaryOp','parser.py',973),
  ('BinaryOp -> LAND','BinaryOp',1,'p_BinaryOp','parser.py',974),
  ('BinaryOp -> RelOp','BinaryOp',1,'p_BinaryOp','parser.py',975),
  ('BinaryOp -> AddOp','BinaryOp',1,'p_BinaryOp','parser.py',976),
  ('BinaryOp -> MulOp','BinaryOp',1,'p_BinaryOp','parser.py',977),
  ('RelOp -> EQL','RelOp',1,'p_RelOp','parser.py',987),
  ('RelOp -> NEQ','RelOp',1,'p_RelOp','parser.py',988),
  ('RelOp -> LTN','RelOp',1,'p_RelOp','parser.py',989),
  ('RelOp -> LEQ','RelOp',1,'p_RelOp','parser.py',990),
  ('RelOp -> GTN','RelOp',1,'p_RelOp','parser.py',991),
  ('RelOp -> GEQ','RelOp',1,'p_RelOp','parser.py',992),
  ('AddOp -> ADD','AddOp',1,'p_AddOp','parser.py',1000),
  ('AddOp -> SUB','AddOp',1,'p_AddOp','parser.py',1001),
  ('AddOp -> OR','AddOp',1,'p_AddOp','parser.py',1002),
  ('AddOp -> XOR','AddOp',1,'p_AddOp','parser.py',1003),
  ('MulOp -> MUL','MulOp',1,'p_MulOp','parser.py',1010),
  ('MulOp -> DIV','MulOp',1,'p_MulOp','parser.py',1011),
  ('MulOp -> MOD','MulOp',1,'p_MulOp','parser.py',1012),
  ('MulOp -> SHL','MulOp',1,'p_MulOp','parser.py',1013),
  ('MulOp -> SHR','MulOp',1,'p_MulOp','parser.py',1014),
  ('MulOp -> AND','MulOp',1,'p_MulOp','parser.py',1015),
  ('MulOp -> AND_NOT','MulOp',1,'p_MulOp','parser.py',1016),
  ('UnaryOp -> ADD','UnaryOp',1,'p_UnaryOp','parser.py',1023),
  ('UnaryOp -> SUB','UnaryOp',1,'p_UnaryOp','parser.py',1024),
  ('UnaryOp -> NOT','UnaryOp',1,'p_UnaryOp','parser.py',1025),
  ('UnaryOp -> XOR','UnaryOp',1,'p_UnaryOp','parser.py',1026),
  ('UnaryOp -> MUL','UnaryOp',1,'p_UnaryOp','parser.py',1027),
  ('UnaryOp -> AND','UnaryOp',1,'p_UnaryOp','parser.py',1028),
  ('PrimaryExpr -> Literal','PrimaryExpr',1,'p_PrimaryExpr','parser.py',1036),
  ('PrimaryExpr -> ID','PrimaryExpr',1,'p_PrimaryExpr','parser.py',1037),
  ('PrimaryExpr -> PrimaryExpr DOT ID','PrimaryExpr',3,'p_PrimaryExpr','parser.py',1038),
  ('PrimaryExpr -> LPAREN Expression RPAREN','PrimaryExpr',3,'p_PrimaryExpr','parser.py',1039),
  ('PrimaryExpr -> PrimaryExpr Index','PrimaryExpr',2,'p_PrimaryExpr','parser.py',1040),
  ('PrimaryExpr -> PrimaryExpr Arguments','PrimaryExpr',2,'p_PrimaryExpr','parser.py',1041),
  ('Index -> LBRACK Expression RBRACK','Index',3,'p_Index','parser.py',1146),
  ('Arguments -> LPAREN RPAREN','Arguments',2,'p_Arguments','parser.py',1155),
  ('Arguments -> LPAREN ExpressionList RPAREN','Arguments',3,'p_Arguments','parser.py',1156),
  ('Arguments -> LPAREN ExpressionList COMMA RPAREN','Arguments',4,'p_Arguments','parser.py',1157),
  ('Literal -> BasicLit','Literal',1,'p_Literal','parser.py',1170),
  ('BasicLit -> IntLit','BasicLit',1,'p_BasicLit','parser.py',1176),
  ('BasicLit -> FloatLit','BasicLit',1,'p_BasicLit','parser.py',1177),
  ('BasicLit -> RuneLit','BasicLit',1,'p_BasicLit','parser.py',1178),
  ('BasicLit -> StringLit','BasicLit',1,'p_BasicLit','parser.py',1179),
  ('BasicLit -> TrueLit','BasicLit',1,'p_BasicLit','parser.py',1180),
  ('BasicLit -> FalseLit','BasicLit',1,'p_BasicLit','parser.py',1181),
  ('TrueLit -> TRUE','TrueLit',1,'p_TrueLit','parser.py',1187),
  ('FalseLit -> FALSE','FalseLit',1,'p_FalseLit','parser.py',1195),
  ('IntLit -> INT','IntLit',1,'p_IntLit','parser.py',1203),
  ('FloatLit -> FLOAT','FloatLit',1,'p_FloatLit','parser.py',1211),
  ('RuneLit -> RUNE','RuneLit',1,'p_RuneLit','parser.py',1219),
  ('StringLit -> STRING','StringLit',1,'p_StringLit','parser.py',1227),
  ('Statement -> Declaration','Statement',1,'p_Statement','parser.py',1235),
  ('Statement -> SimpleStmt','Statement',1,'p_Statement','parser.py',1236),
  ('Statement -> ReturnStmt','Statement',1,'p_Statement','parser.py',1237),
  ('Statement -> BreakStmt','Statement',1,'p_Statement','parser.py',1238),
  ('Statement -> ContinueStmt','Statement',1,'p_Statement','parser.py',1239),
  ('Statement -> IfStmt','Statement',1,'p_Statement','parser.py',1240),
  ('Statement -> OpenS Block CloseS','Statement',3,'p_Statement','parser.py',1241),
  ('Statement -> SwitchStmt','Statement',1,'p_Statement','parser.py',1242),
  ('Statement -> ForStmt','Statement',1,'p_Statement','parser.py',1243),
  ('Statement -> PrintStmt','Statement',1,'p_Statement','parser.py',1244),
  ('Statement -> ScanStmt','Statement',1,'p_Statement','parser.py',1245),
  ('PrintStmt -> PRINT ExpressionList','PrintStmt',2,'p_PrintStmt','parser.py',1254),
  ('ScanStmt -> SCAN ExpressionList','ScanStmt',2,'p_ScanStmt','parser.py',1271),
  ('SimpleStmt -> Expression','SimpleStmt',1,'p_SimpleStmt','parser.py',1290),
  ('SimpleStmt -> IncDecStmt','SimpleStmt',1,'p_SimpleStmt','parser.py',1291),
  ('SimpleStmt -> Assignment','SimpleStmt',1,'p_SimpleStmt','parser.py',1292),
  ('SimpleStmt -> ShortVarDecl','SimpleStmt',1,'p_SimpleStmt','parser.py',1293),
  ('SimpleStmt -> <empty>','SimpleStmt',0,'p_SimpleStmt','parser.py',1294),
  ('IncDecStmt -> Expression INC','IncDecStmt',2,'p_IncDecStmt','parser.py',1309),
  ('IncDecStmt -> Expression DEC','IncDecStmt',2,'p_IncDecStmt','parser.py',1310),
  ('Assignment -> ExpressionList AssignOp ExpressionList','Assignment',3,'p_Assignment','parser.py',1337),
  ('AssignOp -> ADD_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1404),
  ('AssignOp -> SUB_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1405),
  ('AssignOp -> MUL_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1406),
  ('AssignOp -> DIV_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1407),
  ('AssignOp -> MOD_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1408),
  ('AssignOp -> OR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1409),
  ('AssignOp -> XOR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1410),
  ('AssignOp -> SHL_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1411),
  ('AssignOp -> SHR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1412),
  ('AssignOp -> ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1413),
  ('ReturnStmt -> RETURN ExpressionList','ReturnStmt',2,'p_ReturnStmt','parser.py',1421),
  ('ReturnStmt -> RETURN','ReturnStmt',1,'p_ReturnStmt','parser.py',1422),
  ('BreakStmt -> BREAK ID','BreakStmt',2,'p_BreakStmt','parser.py',1446),
  ('BreakStmt -> BREAK','BreakStmt',1,'p_BreakStmt','parser.py',1447),
  ('ContinueStmt -> CONTINUE ID','ContinueStmt',2,'p_ContinueStmt','parser.py',1456),
  ('ContinueStmt -> CONTINUE','ContinueStmt',1,'p_ContinueStmt','parser.py',1457),
  ('ShortVarDecl -> IdentifierList DEFINE ExpressionList','ShortVarDecl',3,'p_ShortVarDecl','parser.py',1466),
  ('IfStmt -> IF OpenS Expression Block CloseS','IfStmt',5,'p_IfStmt','parser.py',1497),
  ('IfStmt -> IF OpenS Expression Block CloseS ELSE IfStmt','IfStmt',7,'p_IfStmt','parser.py',1498),
  ('IfStmt -> IF OpenS Expression Block CloseS ELSE OpenS Block CloseS','IfStmt',9,'p_IfStmt','parser.py',1499),
  ('SwitchStmt -> SWITCH ExpressionName LBRACE OpenW ExprCaseClause_curl CloseW RBRACE','SwitchStmt',7,'p_SwitchStmt','parser.py',1534),
  ('ExpressionName -> Expression','ExpressionName',1,'p_ExpressionName','parser.py',1547),
  ('ExprCaseClause_curl -> ExprCaseClause ExprCaseClause_curl','ExprCaseClause_curl',2,'p_ExprCaseClause_curl','parser.py',1563),
  ('ExprCaseClause_curl -> DefCaseClause','ExprCaseClause_curl',1,'p_ExprCaseClause_curl','parser.py',1564),
  ('ExprCaseClause_curl -> ExprCaseClause','ExprCaseClause_curl',1,'p_ExprCaseClause_curl','parser.py',1565),
  ('ExprCaseClause -> OpenS CASE Expression COLON StatementList CloseS','ExprCaseClause',6,'p_ExprCaseClause','parser.py',1577),
  ('DefCaseClause -> DEFAULT COLON OpenS StatementList CloseS','DefCaseClause',5,'p_DefCaseClause','parser.py',1601),
  ('ForStmt -> FOR OpenS OpenF Expression Block CloseF CloseS','ForStmt',7,'p_ForStmt','parser.py',1610),
  ('ForStmt -> FOR OpenS OpenF ForClause Block CloseF CloseS','ForStmt',7,'p_ForStmt','parser.py',1611),
  ('ForStmt -> FOR OpenS OpenF Block CloseF CloseS','ForStmt',6,'p_ForStmt','parser.py',1612),
  ('OpenF -> <empty>','OpenF',0,'p_OpenF','parser.py',1645),
  ('CloseF -> <empty>','CloseF',0,'p_CloseF','parser.py',1654),
  ('OpenW -> <empty>','OpenW',0,'p_OpenW','parser.py',1661),
  ('CloseW -> <empty>','CloseW',0,'p_CloseW','parser.py',1668),
  ('ForClause -> SimpleStmt SEMICOLON SEMICOLON SimpleStmt','ForClause',4,'p_ForClause','parser.py',1675),
  ('ForClause -> SimpleStmt SEMICOLON Expression SEMICOLON SimpleStmt','ForClause',5,'p_ForClause','parser.py',1676),
]


# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLPARENleftLBRACEleftIDleftDEFINEleftCOMMAleftLBRACKleftRBRACKleftDOTleftSEMICOLONleftCOLONleftINTleftFLOATleftSTRINGleftBREAKleftCONTINUEleftRETURNleftLORleftLANDleftEQLNEQLTNLEQGTNGEQleftADDSUBORXORleftMULDIVMODANDAND_NOTSHLSHRADD ADD_ASSIGN AND AND_ASSIGN AND_NOT AND_NOT_ASSIGN ASSIGN BREAK CASE COLON COMMA CONST CONTINUE DEC DEFAULT DEFINE DIV DIV_ASSIGN DOT ELSE EQL FALLTHROUGH FALSE FLOAT FOR FUNC GEQ GOTO GTN ID IF IMPORT INC INT LAND LBRACE LBRACK LEQ LOR LPAREN LTN MOD MOD_ASSIGN MUL MUL_ASSIGN NEQ NOT OR OR_ASSIGN PACKAGE RBRACE RBRACK RETURN RPAREN RUNE SEMICOLON SHL SHL_ASSIGN SHR SHR_ASSIGN STRING STRUCT SUB SUB_ASSIGN SWITCH TRUE TYPE VAR XOR XOR_ASSIGN\n    SourceFile : PackageClause SEMICOLON ImportDecl_curl TopLevelDecl_curl\n    OpenS : CloseS : OpenStructS : CloseStructS : \n    TopLevelDecl_curl : TopLevelDecl_curl TopLevelDecl SEMICOLON\n                    |\n    \n    ImportDecl_curl : ImportDecl_curl ImportDecl SEMICOLON\n                  |\n    \n    PackageClause : PACKAGE ID\n    \n    ImportDecl : IMPORT ImportSpec\n               | IMPORT LPAREN ImportSpec_curl RPAREN\n    \n    ImportSpec_curl : ImportSpec_curl ImportSpec SEMICOLON\n                    |\n    \n    ImportSpec : DOT ImportPath\n               | ID ImportPath\n               | ImportPath\n    \n    ImportPath : STRING\n    \n    TopLevelDecl : Declaration\n                 | FunctionDecl\n    \n    Declaration : ConstDecl\n                | StructDecl\n                | VarDecl\n    \n    ConstDecl : CONST ConstSpec\n              | CONST LPAREN ConstSpec_curl RPAREN\n    \n    ConstSpec_curl : ConstSpec_curl ConstSpec SEMICOLON\n                   |\n    \n    ConstSpec : IdentifierList ID ASSIGN ExpressionList\n              | IdentifierList Type ASSIGN ExpressionList\n    \n    IdentifierList : ID\n                   | ID COMMA IdentifierList\n    \n    ExpressionList : Expression\n                   | ExpressionList COMMA Expression\n    \n    StructDecl : TYPE StructName StructType \n    \n    StructName : ID\n    \n    VarDecl : VAR VarSpec\n            | VAR LPAREN VarSpec_curl RPAREN\n    \n    VarSpec_curl : VarSpec_curl VarSpec SEMICOLON\n                 |\n    \n    VarSpec : IdentifierList Type ASSIGN ExpressionList\n            | IdentifierList ID ASSIGN ExpressionList\n            | IdentifierList ASSIGN ExpressionList\n            | IdentifierList ID\n            | IdentifierList Type\n    \n    FunctionDecl : FUNC FuncName OpenS Signature Block CloseS\n    \n    FuncName : ID \n    \n    Type : LPAREN Type RPAREN\n         | LPAREN ID RPAREN\n         | TypeLit\n    \n    TypeLit : ArrayType\n            | PointerType\n            | SliceType\n    \n    ArrayType : LBRACK Expression RBRACK Type\n              | LBRACK Expression RBRACK ID\n    \n    SliceType : LBRACK RBRACK Type\n              | LBRACK RBRACK ID\n    \n    StructType : STRUCT OpenStructS LBRACE FieldDecl_curl RBRACE CloseStructS\n    \n    FieldDecl_curl : FieldDecl_curl FieldDecl SEMICOLON\n                   |\n    \n    FieldDecl : ID COMMA IdentifierList Type\n              | ID COMMA IdentifierList ID\n              | ID Type\n              | ID ID\n              | ID STRUCT MUL ID\n              | ID COMMA IdentifierList STRUCT MUL ID\n    \n    PointerType : MUL Type\n                | MUL ID\n    \n    Signature : Parameters Result\n    \n    Result : LPAREN TypeList RPAREN\n           |\n    \n    TypeList : ID\n             | Type\n             | TypeList COMMA ID\n             | TypeList COMMA Type\n    \n    Parameters : LPAREN RPAREN\n               | LPAREN ParameterList RPAREN\n               | LPAREN ParameterList COMMA RPAREN\n    \n    ParameterList : ParameterDecl\n                  | ParameterList COMMA ParameterDecl\n    \n    ParameterDecl : ParaIdList Type\n                  | ID Type\n                  | ParaIdList ID\n                  | ID ID\n    \n    ParaIdList : ID COMMA ID\n               | ParaIdList COMMA ID\n    \n    Block : LBRACE StatementList RBRACE \n    \n    StatementList : Statement_curl\n    \n    Statement_curl : Statement_curl Statement SEMICOLON\n                   |\n    \n    Expression : UnaryExpr\n               | Expression BinaryOp UnaryExpr\n    \n    UnaryExpr : PrimaryExpr\n              | UnaryOp UnaryExpr\n    \n    BinaryOp : LOR\n             | LAND\n             | RelOp\n             | AddOp\n             | MulOp\n    \n    RelOp : EQL\n          | NEQ\n          | LTN\n          | LEQ\n          | GTN\n          | GEQ\n    \n    AddOp : ADD\n          | SUB\n          | OR\n          | XOR\n    \n    MulOp : MUL\n          | DIV\n          | MOD\n          | SHL\n          | SHR\n          | AND\n          | AND_NOT\n    \n    UnaryOp : ADD\n            | SUB\n            | NOT\n            | XOR\n            | MUL\n            | AND\n    \n    PrimaryExpr : Literal\n                | ID\n                | ID DOT ID\n                | LPAREN Expression RPAREN\n                | PrimaryExpr Index\n                | PrimaryExpr Slice\n                | PrimaryExpr Arguments\n    \n    Index : LBRACK Expression RBRACK\n    \n    Slice : LBRACK Expression COLON Expression RBRACK\n          | LBRACK COLON Expression RBRACK\n          | LBRACK Expression COLON RBRACK\n          | LBRACK COLON RBRACK\n          | LBRACK Expression COLON Expression COLON Expression RBRACK\n          | LBRACK COLON Expression COLON Expression RBRACK\n    \n    Arguments : LPAREN RPAREN\n              | LPAREN ExpressionList RPAREN\n              | LPAREN ExpressionList COMMA RPAREN\n    \n    Literal : BasicLit\n    \n    BasicLit : IntLit \n             | FloatLit\n             | RuneLit\n             | StringLit\n             | TrueLit\n             | FalseLit\n    \n    TrueLit : TRUE\n    \n    FalseLit : FALSE\n    \n    IntLit : INT\n    \n    FloatLit : FLOAT\n    \n    RuneLit : RUNE\n    \n    StringLit : STRING\n    \n    Statement : Declaration\n              | LabelledStmt\n              | SimpleStmt\n              | ReturnStmt\n              | BreakStmt\n              | ContinueStmt\n              | GotoStmt\n              | FallthroughStmt\n              | IfStmt\n              | OpenS Block CloseS\n              | SwitchStmt\n              | ForStmt\n    \n    SimpleStmt : Expression\n               | IncDecStmt\n               | Assignment\n               | ShortVarDecl\n               |\n    \n    IncDecStmt : Expression INC\n               | Expression DEC\n    \n    Assignment : ExpressionList AssignOp ExpressionList\n    \n    AssignOp : ADD_ASSIGN\n             | SUB_ASSIGN\n             | MUL_ASSIGN\n             | DIV_ASSIGN\n             | MOD_ASSIGN\n             | AND_ASSIGN\n             | AND_NOT_ASSIGN\n             | OR_ASSIGN\n             | XOR_ASSIGN\n             | SHL_ASSIGN\n             | SHR_ASSIGN\n             | ASSIGN\n    \n    LabelledStmt : ID COLON Statement\n    \n    ReturnStmt : RETURN ExpressionList\n               | RETURN\n    \n    BreakStmt : BREAK ID\n              | BREAK\n    \n    ContinueStmt : CONTINUE ID\n                 | CONTINUE\n    \n    GotoStmt : GOTO ID\n    \n    FallthroughStmt : FALLTHROUGH\n    \n    ShortVarDecl : IdentifierList DEFINE ExpressionList\n    \n    IfStmt : IF OpenS Expression Block CloseS \n           | IF OpenS Expression Block CloseS ELSE IfStmt\n           | IF OpenS Expression Block CloseS ELSE OpenS Block CloseS \n    \n    SwitchStmt : ExprSwitchStmt\n    \n    ExprSwitchStmt : SWITCH ExpressionName LBRACE ExprCaseClause_curl RBRACE \n    \n    ExpressionName : Expression\n    \n    ExprCaseClause_curl : ExprCaseClause_curl ExprCaseClause\n                        | DefCaseClause\n                        |\n    \n    ExprCaseClause : OpenS ExprSwitchCase COLON StatementList CloseS\n    \n    ExprSwitchCase : CASE Expression\n    \n    DefCaseClause : OpenS DEFAULT COLON StatementList CloseS\n    \n    ForStmt : FOR OpenS Expression Block CloseS      \n            | FOR OpenS ForClause Block CloseS \n            | FOR OpenS Block CloseS  \n    \n    ForClause : SimpleStmt SEMICOLON SEMICOLON SimpleStmt\n              | SimpleStmt SEMICOLON Expression SEMICOLON SimpleStmt\n    '
    
_lr_action_items = {'RETURN':([155,182,239,246,318,323,],[-89,205,-88,205,-89,-89,]),'CONST':([4,6,7,26,31,155,182,239,246,318,323,],[-9,-7,10,-8,-6,-89,10,-88,10,-89,-89,]),'FUNC':([4,6,7,26,31,],[-9,-7,15,-8,-6,]),'DEFAULT':([283,296,],[-2,310,]),'GOTO':([155,182,239,246,318,323,],[-89,204,-88,204,-89,-89,]),'SHL_ASSIGN':([66,67,68,70,71,73,75,76,77,80,82,83,85,86,87,88,90,110,113,114,116,164,166,167,170,185,187,190,191,214,217,218,233,234,236,274,279,280,288,302,314,],[-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,-123,-146,-147,-148,-149,-143,-144,-93,-126,-127,-128,-136,-125,-91,-124,-33,-133,-129,-137,-123,257,-32,-131,-132,-138,-130,-32,-123,-135,-134,-123,]),'LOR':([66,67,68,70,71,73,75,76,77,80,81,82,83,85,86,87,88,90,104,110,113,114,116,118,163,164,166,167,170,185,187,188,190,191,214,218,233,234,235,236,248,272,274,279,280,285,288,289,302,304,314,322,],[-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,120,-123,-146,-147,-148,-149,-143,-144,120,-93,-126,-127,-128,120,120,-136,-125,-91,-124,120,-133,120,-129,-137,-123,120,-131,-132,120,-138,120,120,-130,120,-123,120,-135,120,-134,120,-123,120,]),'COLON':([66,67,68,70,71,73,75,76,77,80,82,83,85,86,87,88,90,110,113,114,115,116,163,164,166,167,170,187,188,190,191,214,233,234,235,236,274,288,302,310,317,322,],[-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,-123,-146,-147,-148,-149,-143,-144,-93,-126,-127,162,-128,189,-136,-125,-91,-124,-133,232,-129,-137,246,-131,-132,273,-138,-130,-135,-134,318,323,-204,]),'DIV_ASSIGN':([66,67,68,70,71,73,75,76,77,80,82,83,85,86,87,88,90,110,113,114,116,164,166,167,170,185,187,190,191,214,217,218,233,234,236,274,279,280,288,302,314,],[-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,-123,-146,-147,-148,-149,-143,-144,-93,-126,-127,-128,-136,-125,-91,-124,-33,-133,-129,-137,-123,259,-32,-131,-132,-138,-130,-32,-123,-135,-134,-123,]),'MUL':([29,30,36,44,47,49,55,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,96,97,104,105,106,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,150,152,153,155,158,162,163,164,166,167,170,182,185,187,188,189,190,191,192,195,196,198,205,209,214,215,218,226,230,232,233,234,235,236,239,243,244,246,248,249,250,251,252,253,254,255,256,257,258,259,260,261,265,267,272,273,274,279,280,285,287,288,289,290,299,302,303,304,314,315,316,318,322,323,],[49,-30,49,69,49,49,69,-117,69,-145,-122,-140,-120,-139,-150,-119,-151,49,-90,-141,-92,-116,69,-142,121,-123,-146,-121,-147,-148,-149,-143,-118,-144,69,69,-31,121,69,69,-93,-126,-127,69,-128,69,121,-106,-94,-109,-110,-100,-104,-95,-112,-115,69,-97,-113,-108,-98,49,-103,-105,-99,-101,-114,-96,-102,-107,-111,49,49,49,-89,69,69,121,-136,-125,-91,-124,69,121,-133,121,69,-129,-137,69,-85,-84,49,69,-2,-123,69,121,-2,49,69,-131,-132,121,-138,-88,69,69,69,121,-173,69,-174,-180,-183,-182,-179,-176,-181,-177,-175,-172,-178,69,286,121,69,-130,121,-123,121,49,-135,121,69,312,-134,69,121,-123,69,69,-89,121,-89,]),'DIV':([66,67,68,70,71,73,75,76,77,80,81,82,83,85,86,87,88,90,104,110,113,114,116,118,163,164,166,167,170,185,187,188,190,191,214,218,233,234,235,236,248,272,274,279,280,285,288,289,302,304,314,322,],[-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,122,-123,-146,-147,-148,-149,-143,-144,122,-93,-126,-127,-128,122,122,-136,-125,-91,-124,122,-133,122,-129,-137,-123,122,-131,-132,122,-138,122,122,-130,122,-123,122,-135,122,-134,122,-123,122,]),'RUNE':([44,55,64,65,69,72,78,79,84,89,91,96,105,106,115,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,138,139,140,141,142,155,158,162,182,189,192,205,209,215,226,232,239,243,244,246,249,250,251,252,253,254,255,256,257,258,259,260,261,265,273,290,303,315,316,318,323,],[71,71,-117,71,-120,-119,-116,71,-121,-118,71,71,71,71,71,71,-106,-94,-109,-110,-100,-104,-95,-112,-115,71,-97,-113,-108,-98,-103,-105,-99,-101,-114,-96,-102,-107,-111,-89,71,71,71,71,71,71,-2,71,-2,71,-88,71,71,71,-173,71,-174,-180,-183,-182,-179,-176,-181,-177,-175,-172,-178,71,71,71,71,71,71,-89,-89,]),'TRUE':([44,55,64,65,69,72,78,79,84,89,91,96,105,106,115,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,138,139,140,141,142,155,158,162,182,189,192,205,209,215,226,232,239,243,244,246,249,250,251,252,253,254,255,256,257,258,259,260,261,265,273,290,303,315,316,318,323,],[83,83,-117,83,-120,-119,-116,83,-121,-118,83,83,83,83,83,83,-106,-94,-109,-110,-100,-104,-95,-112,-115,83,-97,-113,-108,-98,-103,-105,-99,-101,-114,-96,-102,-107,-111,-89,83,83,83,83,83,83,-2,83,-2,83,-88,83,83,83,-173,83,-174,-180,-183,-182,-179,-176,-181,-177,-175,-172,-178,83,83,83,83,83,83,-89,-89,]),'DOT':([8,23,39,82,108,214,280,314,],[25,-14,25,143,-13,143,143,143,]),'SUB':([44,55,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,96,104,105,106,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,138,139,140,141,142,155,158,162,163,164,166,167,170,182,185,187,188,189,190,191,192,205,209,214,215,218,226,232,233,234,235,236,239,243,244,246,248,249,250,251,252,253,254,255,256,257,258,259,260,261,265,272,273,274,279,280,285,288,289,290,302,303,304,314,315,316,318,322,323,],[64,64,-117,64,-145,-122,-140,-120,-139,-150,-119,-151,-90,-141,-92,-116,64,-142,119,-123,-146,-121,-147,-148,-149,-143,-118,-144,64,64,119,64,64,-93,-126,-127,64,-128,64,119,-106,-94,-109,-110,-100,-104,-95,-112,-115,64,-97,-113,-108,-98,-103,-105,-99,-101,-114,-96,-102,-107,-111,-89,64,64,119,-136,-125,-91,-124,64,119,-133,119,64,-129,-137,64,64,-2,-123,64,119,-2,64,-131,-132,119,-138,-88,64,64,64,119,-173,64,-174,-180,-183,-182,-179,-176,-181,-177,-175,-172,-178,64,119,64,-130,119,-123,119,-135,119,64,-134,64,119,-123,64,64,-89,119,-89,]),'CASE':([182,239,283,294,295,308,309,318,323,324,327,328,330,],[-87,-88,-202,-201,-2,-200,316,-89,-89,-3,-3,-205,-203,]),'BREAK':([155,182,239,246,318,323,],[-89,219,-88,219,-89,-89,]),'GEQ':([66,67,68,70,71,73,75,76,77,80,81,82,83,85,86,87,88,90,104,110,113,114,116,118,163,164,166,167,170,185,187,188,190,191,214,218,233,234,235,236,248,272,274,279,280,285,288,289,302,304,314,322,],[-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,124,-123,-146,-147,-148,-149,-143,-144,124,-93,-126,-127,-128,124,124,-136,-125,-91,-124,124,-133,124,-129,-137,-123,124,-131,-132,124,-138,124,124,-130,124,-123,124,-135,124,-134,124,-123,124,]),'DEC':([66,67,68,70,71,73,75,76,77,80,82,83,85,86,87,88,90,110,113,114,116,164,166,167,170,187,190,191,214,218,233,234,236,274,279,280,288,302,314,],[-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,-123,-146,-147,-148,-149,-143,-144,-93,-126,-127,-128,-136,-125,-91,-124,-133,-129,-137,-123,262,-131,-132,-138,-130,262,-123,-135,-134,-123,]),'RPAREN':([23,28,35,39,42,43,45,48,51,54,66,67,68,70,71,73,75,76,77,80,82,83,85,86,87,88,90,92,93,94,95,98,104,108,109,110,111,112,113,114,116,117,118,145,146,149,151,157,164,165,166,167,168,169,170,171,174,175,176,178,179,180,181,185,187,190,191,192,194,233,234,236,237,238,274,288,302,],[-14,-27,-39,60,62,-49,-50,-51,-52,101,-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,-123,-146,-147,-148,-149,-143,-144,145,146,-66,-67,148,-32,-13,-26,-93,-55,-56,-126,-127,-128,164,166,-47,-48,172,-78,-38,-136,191,-125,-91,-53,-54,-124,193,-80,-82,-81,-83,197,-72,-71,-33,-133,-129,-137,236,-79,-131,-132,-138,-74,-73,-130,-135,-134,]),'SEMICOLON':([1,5,9,11,12,13,14,17,18,20,21,22,27,34,40,41,43,45,48,51,56,57,58,60,61,62,63,66,67,68,70,71,73,75,76,77,80,82,83,85,86,87,88,90,94,95,101,102,103,104,110,111,112,113,114,116,144,145,146,147,155,156,159,160,164,166,167,168,169,170,182,184,185,187,190,191,199,200,201,202,205,206,208,209,210,211,212,213,214,216,218,219,220,221,222,223,224,225,227,228,229,231,233,234,236,239,240,241,242,244,245,246,262,263,264,269,270,271,274,275,276,277,279,280,281,282,284,288,290,291,292,293,297,298,300,301,302,304,305,306,307,311,318,320,323,326,329,331,],[4,-10,26,-22,-20,31,-19,-21,-23,-18,-11,-17,-24,-36,-16,-15,-49,-50,-51,-52,-44,-43,-34,-12,108,-25,109,-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,-123,-146,-147,-148,-149,-143,-144,-66,-67,-37,157,-42,-32,-93,-55,-56,-126,-127,-128,-28,-47,-48,-29,-89,-3,-40,-41,-136,-125,-91,-53,-54,-124,-168,-45,-33,-133,-129,-137,-157,239,-160,-166,-186,-197,-158,-2,-153,-162,-190,-192,-123,-152,-164,-188,-155,-159,-154,-163,-165,-167,-156,-86,266,-5,-131,-132,-138,-88,-3,-191,-185,-168,-189,-168,-170,-169,-187,-62,-63,-57,-130,-161,-193,290,-164,-123,-3,-184,-171,-135,303,-3,-3,-208,-3,-64,-60,-61,-134,315,-207,-206,-198,-194,-89,-65,-89,-195,-3,-196,]),'FALLTHROUGH':([155,182,239,246,318,323,],[-89,213,-88,213,-89,-89,]),'SHR_ASSIGN':([66,67,68,70,71,73,75,76,77,80,82,83,85,86,87,88,90,110,113,114,116,164,166,167,170,185,187,190,191,214,217,218,233,234,236,274,279,280,288,302,314,],[-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,-123,-146,-147,-148,-149,-143,-144,-93,-126,-127,-128,-136,-125,-91,-124,-33,-133,-129,-137,-123,254,-32,-131,-132,-138,-130,-32,-123,-135,-134,-123,]),'MOD':([66,67,68,70,71,73,75,76,77,80,81,82,83,85,86,87,88,90,104,110,113,114,116,118,163,164,166,167,170,185,187,188,190,191,214,218,233,234,235,236,248,272,274,279,280,285,288,289,302,304,314,322,],[-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,142,-123,-146,-147,-148,-149,-143,-144,142,-93,-126,-127,-128,142,142,-136,-125,-91,-124,142,-133,142,-129,-137,-123,142,-131,-132,142,-138,142,142,-130,142,-123,142,-135,142,-134,142,-123,142,]),'SWITCH':([155,182,239,246,318,323,],[-89,215,-88,215,-89,-89,]),'LTN':([66,67,68,70,71,73,75,76,77,80,81,82,83,85,86,87,88,90,104,110,113,114,116,118,163,164,166,167,170,185,187,188,190,191,214,218,233,234,235,236,248,272,274,279,280,285,288,289,302,304,314,322,],[-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,137,-123,-146,-147,-148,-149,-143,-144,137,-93,-126,-127,-128,137,137,-136,-125,-91,-124,137,-133,137,-129,-137,-123,137,-131,-132,137,-138,137,137,-130,137,-123,137,-135,137,-134,137,-123,137,]),'AND_NOT':([66,67,68,70,71,73,75,76,77,80,81,82,83,85,86,87,88,90,104,110,113,114,116,118,163,164,166,167,170,185,187,188,190,191,214,218,233,234,235,236,248,272,274,279,280,285,288,289,302,304,314,322,],[-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,127,-123,-146,-147,-148,-149,-143,-144,127,-93,-126,-127,-128,127,127,-136,-125,-91,-124,127,-133,127,-129,-137,-123,127,-131,-132,127,-138,127,127,-130,127,-123,127,-135,127,-134,127,-123,127,]),'AND_ASSIGN':([66,67,68,70,71,73,75,76,77,80,82,83,85,86,87,88,90,110,113,114,116,164,166,167,170,185,187,190,191,214,217,218,233,234,236,274,279,280,288,302,314,],[-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,-123,-146,-147,-148,-149,-143,-144,-93,-126,-127,-128,-136,-125,-91,-124,-33,-133,-129,-137,-123,258,-32,-131,-132,-138,-130,-32,-123,-135,-134,-123,]),'COMMA':([30,43,45,48,51,66,67,68,70,71,73,75,76,77,80,82,83,85,86,87,88,90,94,95,103,104,110,111,112,113,114,116,144,145,146,147,149,150,151,152,159,160,164,165,166,167,168,169,170,174,175,176,178,179,180,181,185,187,190,191,194,195,196,214,217,218,230,233,234,236,237,238,242,274,276,279,280,284,288,302,314,],[52,-49,-50,-51,-52,-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,-123,-146,-147,-148,-149,-143,-144,-66,-67,158,-32,-93,-55,-56,-126,-127,-128,158,-47,-48,158,171,173,-78,177,158,158,-136,192,-125,-91,-53,-54,-124,-80,-82,-81,-83,198,-72,-71,-33,-133,-129,-137,-79,-85,-84,52,158,-32,268,-131,-132,-138,-74,-73,158,-130,158,-32,52,158,-135,-134,52,]),'AND_NOT_ASSIGN':([66,67,68,70,71,73,75,76,77,80,82,83,85,86,87,88,90,110,113,114,116,164,166,167,170,185,187,190,191,214,217,218,233,234,236,274,279,280,288,302,314,],[-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,-123,-146,-147,-148,-149,-143,-144,-93,-126,-127,-128,-136,-125,-91,-124,-33,-133,-129,-137,-123,261,-32,-131,-132,-138,-130,-32,-123,-135,-134,-123,]),'IMPORT':([4,6,26,],[-9,8,-8,]),'NEQ':([66,67,68,70,71,73,75,76,77,80,81,82,83,85,86,87,88,90,104,110,113,114,116,118,163,164,166,167,170,185,187,188,190,191,214,218,233,234,235,236,248,272,274,279,280,285,288,289,302,304,314,322,],[-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,123,-123,-146,-147,-148,-149,-143,-144,123,-93,-126,-127,-128,123,123,-136,-125,-91,-124,123,-133,123,-129,-137,-123,123,-131,-132,123,-138,123,123,-130,123,-123,123,-135,123,-134,123,-123,123,]),'ASSIGN':([30,36,43,45,46,48,50,51,56,57,66,67,68,70,71,73,75,76,77,80,82,83,85,86,87,88,90,94,95,97,110,111,112,113,114,116,145,146,164,166,167,168,169,170,185,187,190,191,214,217,218,233,234,236,274,279,280,288,302,314,],[-30,55,-49,-50,91,-51,96,-52,105,106,-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,-123,-146,-147,-148,-149,-143,-144,-66,-67,-31,-93,-55,-56,-126,-127,-128,-47,-48,-136,-125,-91,-53,-54,-124,-33,-133,-129,-137,-123,253,-32,-131,-132,-138,-130,-32,-123,-135,-134,-123,]),'DEFINE':([30,97,207,214,280,314,],[-30,-31,243,-30,-30,-30,]),'SUB_ASSIGN':([66,67,68,70,71,73,75,76,77,80,82,83,85,86,87,88,90,110,113,114,116,164,166,167,170,185,187,190,191,214,217,218,233,234,236,274,279,280,288,302,314,],[-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,-123,-146,-147,-148,-149,-143,-144,-93,-126,-127,-128,-136,-125,-91,-124,-33,-133,-129,-137,-123,249,-32,-131,-132,-138,-130,-32,-123,-135,-134,-123,]),'SHR':([66,67,68,70,71,73,75,76,77,80,81,82,83,85,86,87,88,90,104,110,113,114,116,118,163,164,166,167,170,185,187,188,190,191,214,218,233,234,235,236,248,272,274,279,280,285,288,289,302,304,314,322,],[-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,130,-123,-146,-147,-148,-149,-143,-144,130,-93,-126,-127,-128,130,130,-136,-125,-91,-124,130,-133,130,-129,-137,-123,130,-131,-132,130,-138,130,130,-130,130,-123,130,-135,130,-134,130,-123,130,]),'XOR':([44,55,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,96,104,105,106,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,138,139,140,141,142,155,158,162,163,164,166,167,170,182,185,187,188,189,190,191,192,205,209,214,215,218,226,232,233,234,235,236,239,243,244,246,248,249,250,251,252,253,254,255,256,257,258,259,260,261,265,272,273,274,279,280,285,288,289,290,302,303,304,314,315,316,318,322,323,],[72,72,-117,72,-145,-122,-140,-120,-139,-150,-119,-151,-90,-141,-92,-116,72,-142,131,-123,-146,-121,-147,-148,-149,-143,-118,-144,72,72,131,72,72,-93,-126,-127,72,-128,72,131,-106,-94,-109,-110,-100,-104,-95,-112,-115,72,-97,-113,-108,-98,-103,-105,-99,-101,-114,-96,-102,-107,-111,-89,72,72,131,-136,-125,-91,-124,72,131,-133,131,72,-129,-137,72,72,-2,-123,72,131,-2,72,-131,-132,131,-138,-88,72,72,72,131,-173,72,-174,-180,-183,-182,-179,-176,-181,-177,-175,-172,-178,72,131,72,-130,131,-123,131,-135,131,72,-134,72,131,-123,72,72,-89,131,-89,]),'STRING':([8,23,24,25,39,44,55,64,65,69,72,78,79,84,89,91,96,105,106,108,115,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,138,139,140,141,142,155,158,162,182,189,192,205,209,215,226,232,239,243,244,246,249,250,251,252,253,254,255,256,257,258,259,260,261,265,273,290,303,315,316,318,323,],[20,-14,20,20,20,73,73,-117,73,-120,-119,-116,73,-121,-118,73,73,73,73,-13,73,73,-106,-94,-109,-110,-100,-104,-95,-112,-115,73,-97,-113,-108,-98,-103,-105,-99,-101,-114,-96,-102,-107,-111,-89,73,73,73,73,73,73,-2,73,-2,73,-88,73,73,73,-173,73,-174,-180,-183,-182,-179,-176,-181,-177,-175,-172,-178,73,73,73,73,73,73,-89,-89,]),'FOR':([155,182,239,246,318,323,],[-89,209,-88,209,-89,-89,]),'PACKAGE':([0,],[3,]),'RBRACK':([44,66,67,68,70,71,73,75,76,77,80,81,82,83,85,86,87,88,90,110,113,114,116,162,163,164,166,167,170,187,188,189,190,191,233,234,235,236,272,274,288,289,302,],[74,-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,133,-123,-146,-147,-148,-149,-143,-144,-93,-126,-127,-128,187,190,-136,-125,-91,-124,-133,233,234,-129,-137,-131,-132,274,-138,288,-130,-135,302,-134,]),'GTN':([66,67,68,70,71,73,75,76,77,80,81,82,83,85,86,87,88,90,104,110,113,114,116,118,163,164,166,167,170,185,187,188,190,191,214,218,233,234,235,236,248,272,274,279,280,285,288,289,302,304,314,322,],[-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,134,-123,-146,-147,-148,-149,-143,-144,134,-93,-126,-127,-128,134,134,-136,-125,-91,-124,134,-133,134,-129,-137,-123,134,-131,-132,134,-138,134,134,-130,134,-123,134,-135,134,-134,134,-123,134,]),'ELSE':([228,297,311,],[-86,-3,319,]),'ADD':([44,55,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,96,104,105,106,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,138,139,140,141,142,155,158,162,163,164,166,167,170,182,185,187,188,189,190,191,192,205,209,214,215,218,226,232,233,234,235,236,239,243,244,246,248,249,250,251,252,253,254,255,256,257,258,259,260,261,265,272,273,274,279,280,285,288,289,290,302,303,304,314,315,316,318,322,323,],[78,78,-117,78,-145,-122,-140,-120,-139,-150,-119,-151,-90,-141,-92,-116,78,-142,135,-123,-146,-121,-147,-148,-149,-143,-118,-144,78,78,135,78,78,-93,-126,-127,78,-128,78,135,-106,-94,-109,-110,-100,-104,-95,-112,-115,78,-97,-113,-108,-98,-103,-105,-99,-101,-114,-96,-102,-107,-111,-89,78,78,135,-136,-125,-91,-124,78,135,-133,135,78,-129,-137,78,78,-2,-123,78,135,-2,78,-131,-132,135,-138,-88,78,78,78,135,-173,78,-174,-180,-183,-182,-179,-176,-181,-177,-175,-172,-178,78,135,78,-130,135,-123,135,-135,135,78,-134,78,135,-123,78,78,-89,135,-89,]),'LAND':([66,67,68,70,71,73,75,76,77,80,81,82,83,85,86,87,88,90,104,110,113,114,116,118,163,164,166,167,170,185,187,188,190,191,214,218,233,234,235,236,248,272,274,279,280,285,288,289,302,304,314,322,],[-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,125,-123,-146,-147,-148,-149,-143,-144,125,-93,-126,-127,-128,125,125,-136,-125,-91,-124,125,-133,125,-129,-137,-123,125,-131,-132,125,-138,125,125,-130,125,-123,125,-135,125,-134,125,-123,125,]),'EQL':([66,67,68,70,71,73,75,76,77,80,81,82,83,85,86,87,88,90,104,110,113,114,116,118,163,164,166,167,170,185,187,188,190,191,214,218,233,234,235,236,248,272,274,279,280,285,288,289,302,304,314,322,],[-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,136,-123,-146,-147,-148,-149,-143,-144,136,-93,-126,-127,-128,136,136,-136,-125,-91,-124,136,-133,136,-129,-137,-123,136,-131,-132,136,-138,136,136,-130,136,-123,136,-135,136,-134,136,-123,136,]),'LPAREN':([8,10,16,29,30,32,33,36,44,47,49,53,55,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,82,83,84,85,86,87,88,89,90,91,96,97,99,105,106,113,114,115,116,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,148,150,152,153,155,158,162,164,166,170,172,182,187,189,190,191,192,193,195,196,198,205,209,214,215,226,230,232,233,234,236,239,243,244,246,249,250,251,252,253,254,255,256,257,258,259,260,261,265,273,274,280,287,288,290,302,303,314,315,316,318,323,],[23,28,35,47,-30,-2,-46,47,79,47,47,98,79,-117,79,-145,-122,-140,-120,-139,-150,-119,-151,47,-141,117,-116,79,-142,-123,-146,-121,-147,-148,-149,-143,-118,-144,79,79,-31,153,79,79,-126,-127,79,-128,79,-106,-94,-109,-110,-100,-104,-95,-112,-115,79,-97,-113,-108,-98,47,-103,-105,-99,-101,-114,-96,-102,-107,-111,-75,47,47,47,-89,79,79,-136,-125,-124,-76,79,-133,79,-129,-137,79,-77,-85,-84,47,79,-2,-123,79,-2,47,79,-131,-132,-138,-88,79,79,79,-173,79,-174,-180,-183,-182,-179,-176,-181,-177,-175,-172,-178,79,79,-130,-123,47,-135,79,-134,79,-123,79,79,-89,-89,]),'VAR':([4,6,7,26,31,155,182,239,246,318,323,],[-9,-7,16,-8,-6,-89,16,-88,16,-89,-89,]),'SHL':([66,67,68,70,71,73,75,76,77,80,81,82,83,85,86,87,88,90,104,110,113,114,116,118,163,164,166,167,170,185,187,188,190,191,214,218,233,234,235,236,248,272,274,279,280,285,288,289,302,304,314,322,],[-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,126,-123,-146,-147,-148,-149,-143,-144,126,-93,-126,-127,-128,126,126,-136,-125,-91,-124,126,-133,126,-129,-137,-123,126,-131,-132,126,-138,126,126,-130,126,-123,126,-135,126,-134,126,-123,126,]),'ID':([3,8,10,15,16,19,23,28,29,30,35,36,39,42,44,47,49,52,54,55,64,65,69,72,74,78,79,84,89,91,96,97,98,105,106,108,109,115,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,150,152,153,155,157,158,161,162,171,173,177,182,186,189,192,195,196,198,204,205,209,212,215,219,226,230,232,239,243,244,246,249,250,251,252,253,254,255,256,257,258,259,260,261,265,266,268,273,286,287,290,303,312,315,316,318,323,],[5,24,30,33,30,38,-14,-27,46,-30,-39,57,24,30,82,93,95,30,30,82,-117,82,-120,-119,112,-116,82,-121,-118,82,82,-31,152,82,82,-13,-26,82,82,-106,-94,-109,-110,-100,-104,-95,-112,-115,82,-97,-113,-108,-98,169,-103,-105,-99,-101,-114,-96,-102,-107,-111,170,175,178,181,-89,-38,82,-59,82,152,195,196,214,230,82,82,-85,-84,238,241,82,-2,245,82,264,-2,270,82,-88,82,280,214,-173,82,-174,-180,-183,-182,-179,-176,-181,-177,-175,-172,-178,82,-58,30,82,298,301,82,314,320,314,82,-89,-89,]),'IF':([155,182,239,246,318,319,323,],[-89,226,-88,226,-89,226,-89,]),'AND':([44,55,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,96,104,105,106,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,138,139,140,141,142,155,158,162,163,164,166,167,170,182,185,187,188,189,190,191,192,205,209,214,215,218,226,232,233,234,235,236,239,243,244,246,248,249,250,251,252,253,254,255,256,257,258,259,260,261,265,272,273,274,279,280,285,288,289,290,302,303,304,314,315,316,318,322,323,],[84,84,-117,84,-145,-122,-140,-120,-139,-150,-119,-151,-90,-141,-92,-116,84,-142,138,-123,-146,-121,-147,-148,-149,-143,-118,-144,84,84,138,84,84,-93,-126,-127,84,-128,84,138,-106,-94,-109,-110,-100,-104,-95,-112,-115,84,-97,-113,-108,-98,-103,-105,-99,-101,-114,-96,-102,-107,-111,-89,84,84,138,-136,-125,-91,-124,84,138,-133,138,84,-129,-137,84,84,-2,-123,84,138,-2,84,-131,-132,138,-138,-88,84,84,84,138,-173,84,-174,-180,-183,-182,-179,-176,-181,-177,-175,-172,-178,84,138,84,-130,138,-123,138,-135,138,84,-134,84,138,-123,84,84,-89,138,-89,]),'MOD_ASSIGN':([66,67,68,70,71,73,75,76,77,80,82,83,85,86,87,88,90,110,113,114,116,164,166,167,170,185,187,190,191,214,217,218,233,234,236,274,279,280,288,302,314,],[-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,-123,-146,-147,-148,-149,-143,-144,-93,-126,-127,-128,-136,-125,-91,-124,-33,-133,-129,-137,-123,256,-32,-131,-132,-138,-130,-32,-123,-135,-134,-123,]),'LBRACE':([59,66,67,68,70,71,73,75,76,77,80,82,83,85,86,87,88,90,99,100,104,107,110,113,114,116,148,154,155,164,166,167,170,172,182,185,187,190,191,193,197,202,203,209,218,224,225,233,234,236,239,244,246,247,248,262,263,274,276,278,279,280,284,285,288,302,303,313,314,315,318,319,321,323,325,],[-4,-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,-123,-146,-147,-148,-149,-143,-144,-70,155,-32,161,-93,-126,-127,-128,-75,-68,-89,-136,-125,-91,-124,-76,-2,-33,-133,-129,-137,-77,-69,-166,155,-2,-164,-165,-167,-131,-132,-138,-88,155,-2,283,-199,-170,-169,-130,-193,155,155,-123,-171,155,-135,-134,-168,-209,-123,-168,-89,-2,-210,-89,155,]),'FALSE':([44,55,64,65,69,72,78,79,84,89,91,96,105,106,115,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,138,139,140,141,142,155,158,162,182,189,192,205,209,215,226,232,239,243,244,246,249,250,251,252,253,254,255,256,257,258,259,260,261,265,273,290,303,315,316,318,323,],[85,85,-117,85,-120,-119,-116,85,-121,-118,85,85,85,85,85,85,-106,-94,-109,-110,-100,-104,-95,-112,-115,85,-97,-113,-108,-98,-103,-105,-99,-101,-114,-96,-102,-107,-111,-89,85,85,85,85,85,85,-2,85,-2,85,-88,85,85,85,-173,85,-174,-180,-183,-182,-179,-176,-181,-177,-175,-172,-178,85,85,85,85,85,85,-89,-89,]),'STRUCT':([30,37,38,97,230,287,],[-30,59,-35,-31,267,299,]),'XOR_ASSIGN':([66,67,68,70,71,73,75,76,77,80,82,83,85,86,87,88,90,110,113,114,116,164,166,167,170,185,187,190,191,214,217,218,233,234,236,274,279,280,288,302,314,],[-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,-123,-146,-147,-148,-149,-143,-144,-93,-126,-127,-128,-136,-125,-91,-124,-33,-133,-129,-137,-123,252,-32,-131,-132,-138,-130,-32,-123,-135,-134,-123,]),'INT':([44,55,64,65,69,72,78,79,84,89,91,96,105,106,115,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,138,139,140,141,142,155,158,162,182,189,192,205,209,215,226,232,239,243,244,246,249,250,251,252,253,254,255,256,257,258,259,260,261,265,273,290,303,315,316,318,323,],[86,86,-117,86,-120,-119,-116,86,-121,-118,86,86,86,86,86,86,-106,-94,-109,-110,-100,-104,-95,-112,-115,86,-97,-113,-108,-98,-103,-105,-99,-101,-114,-96,-102,-107,-111,-89,86,86,86,86,86,86,-2,86,-2,86,-88,86,86,86,-173,86,-174,-180,-183,-182,-179,-176,-181,-177,-175,-172,-178,86,86,86,86,86,86,-89,-89,]),'FLOAT':([44,55,64,65,69,72,78,79,84,89,91,96,105,106,115,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,138,139,140,141,142,155,158,162,182,189,192,205,209,215,226,232,239,243,244,246,249,250,251,252,253,254,255,256,257,258,259,260,261,265,273,290,303,315,316,318,323,],[87,87,-117,87,-120,-119,-116,87,-121,-118,87,87,87,87,87,87,-106,-94,-109,-110,-100,-104,-95,-112,-115,87,-97,-113,-108,-98,-103,-105,-99,-101,-114,-96,-102,-107,-111,-89,87,87,87,87,87,87,-2,87,-2,87,-88,87,87,87,-173,87,-174,-180,-183,-182,-179,-176,-181,-177,-175,-172,-178,87,87,87,87,87,87,-89,-89,]),'OR_ASSIGN':([66,67,68,70,71,73,75,76,77,80,82,83,85,86,87,88,90,110,113,114,116,164,166,167,170,185,187,190,191,214,217,218,233,234,236,274,279,280,288,302,314,],[-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,-123,-146,-147,-148,-149,-143,-144,-93,-126,-127,-128,-136,-125,-91,-124,-33,-133,-129,-137,-123,255,-32,-131,-132,-138,-130,-32,-123,-135,-134,-123,]),'LBRACK':([29,30,36,47,49,66,67,68,70,71,73,74,76,77,80,82,83,85,86,87,88,90,97,113,114,116,133,150,152,153,164,166,170,187,190,191,195,196,198,214,230,233,234,236,274,280,287,288,302,314,],[44,-30,44,44,44,-145,-122,-140,-139,-150,-151,44,-141,115,-142,-123,-146,-147,-148,-149,-143,-144,-31,-126,-127,-128,44,44,44,44,-136,-125,-124,-133,-129,-137,-85,-84,44,-123,44,-131,-132,-138,-130,-123,44,-135,-134,-123,]),'ADD_ASSIGN':([66,67,68,70,71,73,75,76,77,80,82,83,85,86,87,88,90,110,113,114,116,164,166,167,170,185,187,190,191,214,217,218,233,234,236,274,279,280,288,302,314,],[-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,-123,-146,-147,-148,-149,-143,-144,-93,-126,-127,-128,-136,-125,-91,-124,-33,-133,-129,-137,-123,260,-32,-131,-132,-138,-130,-32,-123,-135,-134,-123,]),'RBRACE':([155,161,182,183,186,239,266,283,294,295,308,318,323,324,327,328,330,],[-89,-59,-87,228,231,-88,-58,-202,-201,307,-200,-89,-89,-3,-3,-205,-203,]),'LEQ':([66,67,68,70,71,73,75,76,77,80,81,82,83,85,86,87,88,90,104,110,113,114,116,118,163,164,166,167,170,185,187,188,190,191,214,218,233,234,235,236,248,272,274,279,280,285,288,289,302,304,314,322,],[-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,140,-123,-146,-147,-148,-149,-143,-144,140,-93,-126,-127,-128,140,140,-136,-125,-91,-124,140,-133,140,-129,-137,-123,140,-131,-132,140,-138,140,140,-130,140,-123,140,-135,140,-134,140,-123,140,]),'CONTINUE':([155,182,239,246,318,323,],[-89,212,-88,212,-89,-89,]),'MUL_ASSIGN':([66,67,68,70,71,73,75,76,77,80,82,83,85,86,87,88,90,110,113,114,116,164,166,167,170,185,187,190,191,214,217,218,233,234,236,274,279,280,288,302,314,],[-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,-123,-146,-147,-148,-149,-143,-144,-93,-126,-127,-128,-136,-125,-91,-124,-33,-133,-129,-137,-123,251,-32,-131,-132,-138,-130,-32,-123,-135,-134,-123,]),'NOT':([44,55,64,65,69,72,78,79,84,89,91,96,105,106,115,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,138,139,140,141,142,155,158,162,182,189,192,205,209,215,226,232,239,243,244,246,249,250,251,252,253,254,255,256,257,258,259,260,261,265,273,290,303,315,316,318,323,],[89,89,-117,89,-120,-119,-116,89,-121,-118,89,89,89,89,89,89,-106,-94,-109,-110,-100,-104,-95,-112,-115,89,-97,-113,-108,-98,-103,-105,-99,-101,-114,-96,-102,-107,-111,-89,89,89,89,89,89,89,-2,89,-2,89,-88,89,89,89,-173,89,-174,-180,-183,-182,-179,-176,-181,-177,-175,-172,-178,89,89,89,89,89,89,-89,-89,]),'$end':([2,4,6,7,26,31,],[0,-9,-7,-1,-8,-6,]),'TYPE':([4,6,7,26,31,155,182,239,246,318,323,],[-9,-7,19,-8,-6,-89,19,-88,19,-89,-89,]),'OR':([66,67,68,70,71,73,75,76,77,80,81,82,83,85,86,87,88,90,104,110,113,114,116,118,163,164,166,167,170,185,187,188,190,191,214,218,233,234,235,236,248,272,274,279,280,285,288,289,302,304,314,322,],[-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,141,-123,-146,-147,-148,-149,-143,-144,141,-93,-126,-127,-128,141,141,-136,-125,-91,-124,141,-133,141,-129,-137,-123,141,-131,-132,141,-138,141,141,-130,141,-123,141,-135,141,-134,141,-123,141,]),'INC':([66,67,68,70,71,73,75,76,77,80,82,83,85,86,87,88,90,110,113,114,116,164,166,167,170,187,190,191,214,218,233,234,236,274,279,280,288,302,314,],[-145,-122,-140,-139,-150,-151,-90,-141,-92,-142,-123,-146,-147,-148,-149,-143,-144,-93,-126,-127,-128,-136,-125,-91,-124,-133,-129,-137,-123,263,-131,-132,-138,-130,263,-123,-135,-134,-123,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Index':([77,],[113,]),'Slice':([77,],[114,]),'Statement':([182,246,],[200,282,]),'Parameters':([53,],[99,]),'TopLevelDecl_curl':([6,],[7,]),'StructDecl':([7,182,246,],[11,11,11,]),'BinaryOp':([81,104,118,163,185,188,218,235,248,272,279,285,289,304,322,],[128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,]),'SourceFile':([0,],[2,]),'ParameterList':([98,],[149,]),'ExpressionName':([215,],[247,]),'ArrayType':([29,36,47,49,74,133,150,152,153,198,230,287,],[45,45,45,45,45,45,45,45,45,45,45,45,]),'ImportDecl_curl':([4,],[6,]),'ImportPath':([8,24,25,39,],[22,40,41,22,]),'TopLevelDecl':([7,],[13,]),'Literal':([44,55,65,79,91,96,105,106,115,117,128,158,162,182,189,192,205,215,232,243,244,246,250,265,273,290,303,315,316,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'ForStmt':([182,246,],[223,223,]),'Arguments':([77,],[116,]),'Statement_curl':([155,318,323,],[182,182,182,]),'IdentifierList':([10,16,42,52,54,182,244,246,268,303,315,],[29,36,29,97,36,207,207,207,287,207,207,]),'IntLit':([44,55,65,79,91,96,105,106,115,117,128,158,162,182,189,192,205,215,232,243,244,246,250,265,273,290,303,315,316,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'VarSpec_curl':([35,],[54,]),'Type':([29,36,47,49,74,133,150,152,153,198,230,287,],[50,56,92,94,111,168,174,176,180,237,269,300,]),'ImportDecl':([6,],[9,]),'ExprCaseClause':([295,],[308,]),'CloseS':([156,240,281,291,292,297,324,327,329,],[184,275,293,305,306,311,328,330,331,]),'PackageClause':([0,],[1,]),'FallthroughStmt':([182,246,],[221,221,]),'RuneLit':([44,55,65,79,91,96,105,106,115,117,128,158,162,182,189,192,205,215,232,243,244,246,250,265,273,290,303,315,316,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'FieldDecl':([186,],[229,]),'ImportSpec':([8,39,],[21,61,]),'TypeLit':([29,36,47,49,74,133,150,152,153,198,230,287,],[43,43,43,43,43,43,43,43,43,43,43,43,]),'AddOp':([81,104,118,163,185,188,218,235,248,272,279,285,289,304,322,],[129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,]),'UnaryOp':([44,55,65,79,91,96,105,106,115,117,128,158,162,182,189,192,205,215,232,243,244,246,250,265,273,290,303,315,316,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'SwitchStmt':([182,246,],[211,211,]),'TypeList':([153,],[179,]),'FuncName':([15,],[32,]),'ContinueStmt':([182,246,],[199,199,]),'IncDecStmt':([182,244,246,303,315,],[224,224,224,224,224,]),'FalseLit':([44,55,65,79,91,96,105,106,115,117,128,158,162,182,189,192,205,215,232,243,244,246,250,265,273,290,303,315,316,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'Declaration':([7,182,246,],[14,216,216,]),'ConstDecl':([7,182,246,],[17,17,17,]),'AssignOp':([217,],[250,]),'ParameterDecl':([98,171,],[151,194,]),'GotoStmt':([182,246,],[208,208,]),'OpenS':([32,182,209,226,246,283,295,319,],[53,203,244,265,203,296,309,325,]),'SliceType':([29,36,47,49,74,133,150,152,153,198,230,287,],[51,51,51,51,51,51,51,51,51,51,51,51,]),'StructType':([37,],[58,]),'ConstSpec':([10,42,],[27,63,]),'OpenStructS':([59,],[107,]),'CloseStructS':([231,],[271,]),'ExprCaseClause_curl':([283,],[295,]),'IfStmt':([182,246,319,],[201,201,326,]),'FloatLit':([44,55,65,79,91,96,105,106,115,117,128,158,162,182,189,192,205,215,232,243,244,246,250,265,273,290,303,315,316,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'StatementList':([155,318,323,],[183,324,327,]),'UnaryExpr':([44,55,65,79,91,96,105,106,115,117,128,158,162,182,189,192,205,215,232,243,244,246,250,265,273,290,303,315,316,],[75,75,110,75,75,75,75,75,75,75,167,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'MulOp':([81,104,118,163,185,188,218,235,248,272,279,285,289,304,322,],[132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,]),'PrimaryExpr':([44,55,65,79,91,96,105,106,115,117,128,158,162,182,189,192,205,215,232,243,244,246,250,265,273,290,303,315,316,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'ConstSpec_curl':([28,],[42,]),'ExpressionList':([55,91,96,105,106,117,182,205,243,244,246,250,303,315,],[103,144,147,159,160,165,217,242,276,217,217,284,217,217,]),'SimpleStmt':([182,244,246,303,315,],[222,277,222,313,321,]),'Signature':([53,],[100,]),'ForClause':([244,],[278,]),'Expression':([44,55,79,91,96,105,106,115,117,158,162,182,189,192,205,215,232,243,244,246,250,265,273,290,303,315,316,],[81,104,118,104,104,104,104,163,104,185,188,218,235,185,104,248,272,104,279,218,104,285,289,304,218,218,322,]),'ShortVarDecl':([182,244,246,303,315,],[225,225,225,225,225,]),'Block':([100,203,244,278,279,285,325,],[156,240,281,291,292,297,329,]),'FieldDecl_curl':([161,],[186,]),'FunctionDecl':([7,],[12,]),'TrueLit':([44,55,65,79,91,96,105,106,115,117,128,158,162,182,189,192,205,215,232,243,244,246,250,265,273,290,303,315,316,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'RelOp':([81,104,118,163,185,188,218,235,248,272,279,285,289,304,322,],[139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,]),'DefCaseClause':([283,],[294,]),'StructName':([19,],[37,]),'BreakStmt':([182,246,],[227,227,]),'ExprSwitchCase':([309,],[317,]),'VarDecl':([7,182,246,],[18,18,18,]),'StringLit':([44,55,65,79,91,96,105,106,115,117,128,158,162,182,189,192,205,215,232,243,244,246,250,265,273,290,303,315,316,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'VarSpec':([16,54,],[34,102,]),'LabelledStmt':([182,246,],[210,210,]),'Assignment':([182,244,246,303,315,],[202,202,202,202,202,]),'Result':([99,],[154,]),'BasicLit':([44,55,65,79,91,96,105,106,115,117,128,158,162,182,189,192,205,215,232,243,244,246,250,265,273,290,303,315,316,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'PointerType':([29,36,47,49,74,133,150,152,153,198,230,287,],[48,48,48,48,48,48,48,48,48,48,48,48,]),'ReturnStmt':([182,246,],[220,220,]),'ParaIdList':([98,171,],[150,150,]),'ImportSpec_curl':([23,],[39,]),'ExprSwitchStmt':([182,246,],[206,206,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> SourceFile","S'",1,None,None,None),
  ('SourceFile -> PackageClause SEMICOLON ImportDecl_curl TopLevelDecl_curl','SourceFile',4,'p_SourceFile','parser.py',141),
  ('OpenS -> <empty>','OpenS',0,'p_OpenS','parser.py',145),
  ('CloseS -> <empty>','CloseS',0,'p_CloseS','parser.py',149),
  ('OpenStructS -> <empty>','OpenStructS',0,'p_OpenStructS','parser.py',159),
  ('CloseStructS -> <empty>','CloseStructS',0,'p_CloseStructS','parser.py',163),
  ('TopLevelDecl_curl -> TopLevelDecl_curl TopLevelDecl SEMICOLON','TopLevelDecl_curl',3,'p_TopLevelDecl_curl','parser.py',167),
  ('TopLevelDecl_curl -> <empty>','TopLevelDecl_curl',0,'p_TopLevelDecl_curl','parser.py',168),
  ('ImportDecl_curl -> ImportDecl_curl ImportDecl SEMICOLON','ImportDecl_curl',3,'p_ImportDecl_curl','parser.py',173),
  ('ImportDecl_curl -> <empty>','ImportDecl_curl',0,'p_ImportDecl_curl','parser.py',174),
  ('PackageClause -> PACKAGE ID','PackageClause',2,'p_PackageClause','parser.py',179),
  ('ImportDecl -> IMPORT ImportSpec','ImportDecl',2,'p_ImportDecl','parser.py',184),
  ('ImportDecl -> IMPORT LPAREN ImportSpec_curl RPAREN','ImportDecl',4,'p_ImportDecl','parser.py',185),
  ('ImportSpec_curl -> ImportSpec_curl ImportSpec SEMICOLON','ImportSpec_curl',3,'p_ImportSpec_curl','parser.py',190),
  ('ImportSpec_curl -> <empty>','ImportSpec_curl',0,'p_ImportSpec_curl','parser.py',191),
  ('ImportSpec -> DOT ImportPath','ImportSpec',2,'p_ImportSpec','parser.py',196),
  ('ImportSpec -> ID ImportPath','ImportSpec',2,'p_ImportSpec','parser.py',197),
  ('ImportSpec -> ImportPath','ImportSpec',1,'p_ImportSpec','parser.py',198),
  ('ImportPath -> STRING','ImportPath',1,'p_ImportPath','parser.py',204),
  ('TopLevelDecl -> Declaration','TopLevelDecl',1,'p_TopLevelDecl','parser.py',209),
  ('TopLevelDecl -> FunctionDecl','TopLevelDecl',1,'p_TopLevelDecl','parser.py',210),
  ('Declaration -> ConstDecl','Declaration',1,'p_Declaration','parser.py',215),
  ('Declaration -> StructDecl','Declaration',1,'p_Declaration','parser.py',216),
  ('Declaration -> VarDecl','Declaration',1,'p_Declaration','parser.py',217),
  ('ConstDecl -> CONST ConstSpec','ConstDecl',2,'p_ConstDecl','parser.py',222),
  ('ConstDecl -> CONST LPAREN ConstSpec_curl RPAREN','ConstDecl',4,'p_ConstDecl','parser.py',223),
  ('ConstSpec_curl -> ConstSpec_curl ConstSpec SEMICOLON','ConstSpec_curl',3,'p_ConstSpec_curl','parser.py',228),
  ('ConstSpec_curl -> <empty>','ConstSpec_curl',0,'p_ConstSpec_curl','parser.py',229),
  ('ConstSpec -> IdentifierList ID ASSIGN ExpressionList','ConstSpec',4,'p_ConstSpec','parser.py',234),
  ('ConstSpec -> IdentifierList Type ASSIGN ExpressionList','ConstSpec',4,'p_ConstSpec','parser.py',235),
  ('IdentifierList -> ID','IdentifierList',1,'p_IdentifierList','parser.py',259),
  ('IdentifierList -> ID COMMA IdentifierList','IdentifierList',3,'p_IdentifierList','parser.py',260),
  ('ExpressionList -> Expression','ExpressionList',1,'p_ExpressionList','parser.py',271),
  ('ExpressionList -> ExpressionList COMMA Expression','ExpressionList',3,'p_ExpressionList','parser.py',272),
  ('StructDecl -> TYPE StructName StructType','StructDecl',3,'p_StructDecl','parser.py',291),
  ('StructName -> ID','StructName',1,'p_StructName','parser.py',297),
  ('VarDecl -> VAR VarSpec','VarDecl',2,'p_VarDecl','parser.py',332),
  ('VarDecl -> VAR LPAREN VarSpec_curl RPAREN','VarDecl',4,'p_VarDecl','parser.py',333),
  ('VarSpec_curl -> VarSpec_curl VarSpec SEMICOLON','VarSpec_curl',3,'p_VarSpec_curl','parser.py',338),
  ('VarSpec_curl -> <empty>','VarSpec_curl',0,'p_VarSpec_curl','parser.py',339),
  ('VarSpec -> IdentifierList Type ASSIGN ExpressionList','VarSpec',4,'p_VarSpec','parser.py',344),
  ('VarSpec -> IdentifierList ID ASSIGN ExpressionList','VarSpec',4,'p_VarSpec','parser.py',345),
  ('VarSpec -> IdentifierList ASSIGN ExpressionList','VarSpec',3,'p_VarSpec','parser.py',346),
  ('VarSpec -> IdentifierList ID','VarSpec',2,'p_VarSpec','parser.py',347),
  ('VarSpec -> IdentifierList Type','VarSpec',2,'p_VarSpec','parser.py',348),
  ('FunctionDecl -> FUNC FuncName OpenS Signature Block CloseS','FunctionDecl',6,'p_FunctionDecl','parser.py',380),
  ('FuncName -> ID','FuncName',1,'p_FuncName','parser.py',385),
  ('Type -> LPAREN Type RPAREN','Type',3,'p_Type','parser.py',395),
  ('Type -> LPAREN ID RPAREN','Type',3,'p_Type','parser.py',396),
  ('Type -> TypeLit','Type',1,'p_Type','parser.py',397),
  ('TypeLit -> ArrayType','TypeLit',1,'p_TypeLit','parser.py',412),
  ('TypeLit -> PointerType','TypeLit',1,'p_TypeLit','parser.py',413),
  ('TypeLit -> SliceType','TypeLit',1,'p_TypeLit','parser.py',414),
  ('ArrayType -> LBRACK Expression RBRACK Type','ArrayType',4,'p_ArrayType','parser.py',420),
  ('ArrayType -> LBRACK Expression RBRACK ID','ArrayType',4,'p_ArrayType','parser.py',421),
  ('SliceType -> LBRACK RBRACK Type','SliceType',3,'p_SliceType','parser.py',438),
  ('SliceType -> LBRACK RBRACK ID','SliceType',3,'p_SliceType','parser.py',439),
  ('StructType -> STRUCT OpenStructS LBRACE FieldDecl_curl RBRACE CloseStructS','StructType',6,'p_StructType','parser.py',454),
  ('FieldDecl_curl -> FieldDecl_curl FieldDecl SEMICOLON','FieldDecl_curl',3,'p_FieldDecl_curl','parser.py',459),
  ('FieldDecl_curl -> <empty>','FieldDecl_curl',0,'p_FieldDecl_curl','parser.py',460),
  ('FieldDecl -> ID COMMA IdentifierList Type','FieldDecl',4,'p_FieldDecl','parser.py',465),
  ('FieldDecl -> ID COMMA IdentifierList ID','FieldDecl',4,'p_FieldDecl','parser.py',466),
  ('FieldDecl -> ID Type','FieldDecl',2,'p_FieldDecl','parser.py',467),
  ('FieldDecl -> ID ID','FieldDecl',2,'p_FieldDecl','parser.py',468),
  ('FieldDecl -> ID STRUCT MUL ID','FieldDecl',4,'p_FieldDecl','parser.py',469),
  ('FieldDecl -> ID COMMA IdentifierList STRUCT MUL ID','FieldDecl',6,'p_FieldDecl','parser.py',470),
  ('PointerType -> MUL Type','PointerType',2,'p_PointerType','parser.py',522),
  ('PointerType -> MUL ID','PointerType',2,'p_PointerType','parser.py',523),
  ('Signature -> Parameters Result','Signature',2,'p_Signature','parser.py',538),
  ('Result -> LPAREN TypeList RPAREN','Result',3,'p_Result','parser.py',544),
  ('Result -> <empty>','Result',0,'p_Result','parser.py',545),
  ('TypeList -> ID','TypeList',1,'p_TypeList','parser.py',554),
  ('TypeList -> Type','TypeList',1,'p_TypeList','parser.py',555),
  ('TypeList -> TypeList COMMA ID','TypeList',3,'p_TypeList','parser.py',556),
  ('TypeList -> TypeList COMMA Type','TypeList',3,'p_TypeList','parser.py',557),
  ('Parameters -> LPAREN RPAREN','Parameters',2,'p_Parameters','parser.py',579),
  ('Parameters -> LPAREN ParameterList RPAREN','Parameters',3,'p_Parameters','parser.py',580),
  ('Parameters -> LPAREN ParameterList COMMA RPAREN','Parameters',4,'p_Parameters','parser.py',581),
  ('ParameterList -> ParameterDecl','ParameterList',1,'p_ParameterList','parser.py',592),
  ('ParameterList -> ParameterList COMMA ParameterDecl','ParameterList',3,'p_ParameterList','parser.py',593),
  ('ParameterDecl -> ParaIdList Type','ParameterDecl',2,'p_ParameterDecl','parser.py',604),
  ('ParameterDecl -> ID Type','ParameterDecl',2,'p_ParameterDecl','parser.py',605),
  ('ParameterDecl -> ParaIdList ID','ParameterDecl',2,'p_ParameterDecl','parser.py',606),
  ('ParameterDecl -> ID ID','ParameterDecl',2,'p_ParameterDecl','parser.py',607),
  ('ParaIdList -> ID COMMA ID','ParaIdList',3,'p_ParaIdList','parser.py',638),
  ('ParaIdList -> ParaIdList COMMA ID','ParaIdList',3,'p_ParaIdList','parser.py',639),
  ('Block -> LBRACE StatementList RBRACE','Block',3,'p_Block','parser.py',651),
  ('StatementList -> Statement_curl','StatementList',1,'p_StatementList','parser.py',656),
  ('Statement_curl -> Statement_curl Statement SEMICOLON','Statement_curl',3,'p_Statement_curl','parser.py',661),
  ('Statement_curl -> <empty>','Statement_curl',0,'p_Statement_curl','parser.py',662),
  ('Expression -> UnaryExpr','Expression',1,'p_Expression','parser.py',667),
  ('Expression -> Expression BinaryOp UnaryExpr','Expression',3,'p_Expression','parser.py',668),
  ('UnaryExpr -> PrimaryExpr','UnaryExpr',1,'p_UnaryExpr','parser.py',684),
  ('UnaryExpr -> UnaryOp UnaryExpr','UnaryExpr',2,'p_UnaryExpr','parser.py',685),
  ('BinaryOp -> LOR','BinaryOp',1,'p_BinaryOp','parser.py',704),
  ('BinaryOp -> LAND','BinaryOp',1,'p_BinaryOp','parser.py',705),
  ('BinaryOp -> RelOp','BinaryOp',1,'p_BinaryOp','parser.py',706),
  ('BinaryOp -> AddOp','BinaryOp',1,'p_BinaryOp','parser.py',707),
  ('BinaryOp -> MulOp','BinaryOp',1,'p_BinaryOp','parser.py',708),
  ('RelOp -> EQL','RelOp',1,'p_RelOp','parser.py',718),
  ('RelOp -> NEQ','RelOp',1,'p_RelOp','parser.py',719),
  ('RelOp -> LTN','RelOp',1,'p_RelOp','parser.py',720),
  ('RelOp -> LEQ','RelOp',1,'p_RelOp','parser.py',721),
  ('RelOp -> GTN','RelOp',1,'p_RelOp','parser.py',722),
  ('RelOp -> GEQ','RelOp',1,'p_RelOp','parser.py',723),
  ('AddOp -> ADD','AddOp',1,'p_AddOp','parser.py',731),
  ('AddOp -> SUB','AddOp',1,'p_AddOp','parser.py',732),
  ('AddOp -> OR','AddOp',1,'p_AddOp','parser.py',733),
  ('AddOp -> XOR','AddOp',1,'p_AddOp','parser.py',734),
  ('MulOp -> MUL','MulOp',1,'p_MulOp','parser.py',741),
  ('MulOp -> DIV','MulOp',1,'p_MulOp','parser.py',742),
  ('MulOp -> MOD','MulOp',1,'p_MulOp','parser.py',743),
  ('MulOp -> SHL','MulOp',1,'p_MulOp','parser.py',744),
  ('MulOp -> SHR','MulOp',1,'p_MulOp','parser.py',745),
  ('MulOp -> AND','MulOp',1,'p_MulOp','parser.py',746),
  ('MulOp -> AND_NOT','MulOp',1,'p_MulOp','parser.py',747),
  ('UnaryOp -> ADD','UnaryOp',1,'p_UnaryOp','parser.py',754),
  ('UnaryOp -> SUB','UnaryOp',1,'p_UnaryOp','parser.py',755),
  ('UnaryOp -> NOT','UnaryOp',1,'p_UnaryOp','parser.py',756),
  ('UnaryOp -> XOR','UnaryOp',1,'p_UnaryOp','parser.py',757),
  ('UnaryOp -> MUL','UnaryOp',1,'p_UnaryOp','parser.py',758),
  ('UnaryOp -> AND','UnaryOp',1,'p_UnaryOp','parser.py',759),
  ('PrimaryExpr -> Literal','PrimaryExpr',1,'p_PrimaryExpr','parser.py',767),
  ('PrimaryExpr -> ID','PrimaryExpr',1,'p_PrimaryExpr','parser.py',768),
  ('PrimaryExpr -> ID DOT ID','PrimaryExpr',3,'p_PrimaryExpr','parser.py',769),
  ('PrimaryExpr -> LPAREN Expression RPAREN','PrimaryExpr',3,'p_PrimaryExpr','parser.py',770),
  ('PrimaryExpr -> PrimaryExpr Index','PrimaryExpr',2,'p_PrimaryExpr','parser.py',771),
  ('PrimaryExpr -> PrimaryExpr Slice','PrimaryExpr',2,'p_PrimaryExpr','parser.py',772),
  ('PrimaryExpr -> PrimaryExpr Arguments','PrimaryExpr',2,'p_PrimaryExpr','parser.py',773),
  ('Index -> LBRACK Expression RBRACK','Index',3,'p_Index','parser.py',816),
  ('Slice -> LBRACK Expression COLON Expression RBRACK','Slice',5,'p_Slice','parser.py',825),
  ('Slice -> LBRACK COLON Expression RBRACK','Slice',4,'p_Slice','parser.py',826),
  ('Slice -> LBRACK Expression COLON RBRACK','Slice',4,'p_Slice','parser.py',827),
  ('Slice -> LBRACK COLON RBRACK','Slice',3,'p_Slice','parser.py',828),
  ('Slice -> LBRACK Expression COLON Expression COLON Expression RBRACK','Slice',7,'p_Slice','parser.py',829),
  ('Slice -> LBRACK COLON Expression COLON Expression RBRACK','Slice',6,'p_Slice','parser.py',830),
  ('Arguments -> LPAREN RPAREN','Arguments',2,'p_Arguments','parser.py',836),
  ('Arguments -> LPAREN ExpressionList RPAREN','Arguments',3,'p_Arguments','parser.py',837),
  ('Arguments -> LPAREN ExpressionList COMMA RPAREN','Arguments',4,'p_Arguments','parser.py',838),
  ('Literal -> BasicLit','Literal',1,'p_Literal','parser.py',859),
  ('BasicLit -> IntLit','BasicLit',1,'p_BasicLit','parser.py',865),
  ('BasicLit -> FloatLit','BasicLit',1,'p_BasicLit','parser.py',866),
  ('BasicLit -> RuneLit','BasicLit',1,'p_BasicLit','parser.py',867),
  ('BasicLit -> StringLit','BasicLit',1,'p_BasicLit','parser.py',868),
  ('BasicLit -> TrueLit','BasicLit',1,'p_BasicLit','parser.py',869),
  ('BasicLit -> FalseLit','BasicLit',1,'p_BasicLit','parser.py',870),
  ('TrueLit -> TRUE','TrueLit',1,'p_TrueLit','parser.py',876),
  ('FalseLit -> FALSE','FalseLit',1,'p_FalseLit','parser.py',883),
  ('IntLit -> INT','IntLit',1,'p_IntLit','parser.py',890),
  ('FloatLit -> FLOAT','FloatLit',1,'p_FloatLit','parser.py',897),
  ('RuneLit -> RUNE','RuneLit',1,'p_RuneLit','parser.py',904),
  ('StringLit -> STRING','StringLit',1,'p_StringLit','parser.py',911),
  ('Statement -> Declaration','Statement',1,'p_Statement','parser.py',918),
  ('Statement -> LabelledStmt','Statement',1,'p_Statement','parser.py',919),
  ('Statement -> SimpleStmt','Statement',1,'p_Statement','parser.py',920),
  ('Statement -> ReturnStmt','Statement',1,'p_Statement','parser.py',921),
  ('Statement -> BreakStmt','Statement',1,'p_Statement','parser.py',922),
  ('Statement -> ContinueStmt','Statement',1,'p_Statement','parser.py',923),
  ('Statement -> GotoStmt','Statement',1,'p_Statement','parser.py',924),
  ('Statement -> FallthroughStmt','Statement',1,'p_Statement','parser.py',925),
  ('Statement -> IfStmt','Statement',1,'p_Statement','parser.py',926),
  ('Statement -> OpenS Block CloseS','Statement',3,'p_Statement','parser.py',927),
  ('Statement -> SwitchStmt','Statement',1,'p_Statement','parser.py',928),
  ('Statement -> ForStmt','Statement',1,'p_Statement','parser.py',929),
  ('SimpleStmt -> Expression','SimpleStmt',1,'p_SimpleStmt','parser.py',934),
  ('SimpleStmt -> IncDecStmt','SimpleStmt',1,'p_SimpleStmt','parser.py',935),
  ('SimpleStmt -> Assignment','SimpleStmt',1,'p_SimpleStmt','parser.py',936),
  ('SimpleStmt -> ShortVarDecl','SimpleStmt',1,'p_SimpleStmt','parser.py',937),
  ('SimpleStmt -> <empty>','SimpleStmt',0,'p_SimpleStmt','parser.py',938),
  ('IncDecStmt -> Expression INC','IncDecStmt',2,'p_IncDecStmt','parser.py',949),
  ('IncDecStmt -> Expression DEC','IncDecStmt',2,'p_IncDecStmt','parser.py',950),
  ('Assignment -> ExpressionList AssignOp ExpressionList','Assignment',3,'p_Assignment','parser.py',957),
  ('AssignOp -> ADD_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',970),
  ('AssignOp -> SUB_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',971),
  ('AssignOp -> MUL_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',972),
  ('AssignOp -> DIV_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',973),
  ('AssignOp -> MOD_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',974),
  ('AssignOp -> AND_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',975),
  ('AssignOp -> AND_NOT_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',976),
  ('AssignOp -> OR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',977),
  ('AssignOp -> XOR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',978),
  ('AssignOp -> SHL_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',979),
  ('AssignOp -> SHR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',980),
  ('AssignOp -> ASSIGN','AssignOp',1,'p_AssignOp','parser.py',981),
  ('LabelledStmt -> ID COLON Statement','LabelledStmt',3,'p_LabelledStmt','parser.py',988),
  ('ReturnStmt -> RETURN ExpressionList','ReturnStmt',2,'p_ReturnStmt','parser.py',993),
  ('ReturnStmt -> RETURN','ReturnStmt',1,'p_ReturnStmt','parser.py',994),
  ('BreakStmt -> BREAK ID','BreakStmt',2,'p_BreakStmt','parser.py',999),
  ('BreakStmt -> BREAK','BreakStmt',1,'p_BreakStmt','parser.py',1000),
  ('ContinueStmt -> CONTINUE ID','ContinueStmt',2,'p_ContinueStmt','parser.py',1005),
  ('ContinueStmt -> CONTINUE','ContinueStmt',1,'p_ContinueStmt','parser.py',1006),
  ('GotoStmt -> GOTO ID','GotoStmt',2,'p_GotoStmt','parser.py',1011),
  ('FallthroughStmt -> FALLTHROUGH','FallthroughStmt',1,'p_FallthroughStmt','parser.py',1016),
  ('ShortVarDecl -> IdentifierList DEFINE ExpressionList','ShortVarDecl',3,'p_ShortVarDecl','parser.py',1021),
  ('IfStmt -> IF OpenS Expression Block CloseS','IfStmt',5,'p_IfStmt','parser.py',1033),
  ('IfStmt -> IF OpenS Expression Block CloseS ELSE IfStmt','IfStmt',7,'p_IfStmt','parser.py',1034),
  ('IfStmt -> IF OpenS Expression Block CloseS ELSE OpenS Block CloseS','IfStmt',9,'p_IfStmt','parser.py',1035),
  ('SwitchStmt -> ExprSwitchStmt','SwitchStmt',1,'p_SwitchStmt','parser.py',1042),
  ('ExprSwitchStmt -> SWITCH ExpressionName LBRACE ExprCaseClause_curl RBRACE','ExprSwitchStmt',5,'p_ExprSwitchStmt','parser.py',1047),
  ('ExpressionName -> Expression','ExpressionName',1,'p_ExpressionName','parser.py',1052),
  ('ExprCaseClause_curl -> ExprCaseClause_curl ExprCaseClause','ExprCaseClause_curl',2,'p_ExprCaseClause_curl','parser.py',1063),
  ('ExprCaseClause_curl -> DefCaseClause','ExprCaseClause_curl',1,'p_ExprCaseClause_curl','parser.py',1064),
  ('ExprCaseClause_curl -> <empty>','ExprCaseClause_curl',0,'p_ExprCaseClause_curl','parser.py',1065),
  ('ExprCaseClause -> OpenS ExprSwitchCase COLON StatementList CloseS','ExprCaseClause',5,'p_ExprCaseClause','parser.py',1070),
  ('ExprSwitchCase -> CASE Expression','ExprSwitchCase',2,'p_ExprSwitchCase','parser.py',1075),
  ('DefCaseClause -> OpenS DEFAULT COLON StatementList CloseS','DefCaseClause',5,'p_DefCaseClause','parser.py',1086),
  ('ForStmt -> FOR OpenS Expression Block CloseS','ForStmt',5,'p_ForStmt','parser.py',1091),
  ('ForStmt -> FOR OpenS ForClause Block CloseS','ForStmt',5,'p_ForStmt','parser.py',1092),
  ('ForStmt -> FOR OpenS Block CloseS','ForStmt',4,'p_ForStmt','parser.py',1093),
  ('ForClause -> SimpleStmt SEMICOLON SEMICOLON SimpleStmt','ForClause',4,'p_ForClause','parser.py',1103),
  ('ForClause -> SimpleStmt SEMICOLON Expression SEMICOLON SimpleStmt','ForClause',5,'p_ForClause','parser.py',1104),
]

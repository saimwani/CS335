
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLPARENleftLBRACEleftIDleftDEFINEleftCOMMAleftLBRACKleftRBRACKleftDOTleftSEMICOLONleftCOLONleftINTleftFLOATleftSTRINGleftBREAKleftCONTINUEleftRETURNleftLORleftLANDleftEQLNEQLTNLEQGTNGEQleftADDSUBORXORleftMULDIVMODANDAND_NOTSHLSHRADD ADD_ASSIGN AND AND_ASSIGN AND_NOT AND_NOT_ASSIGN ASSIGN BREAK CASE COLON COMMA CONST CONTINUE DEC DEFAULT DEFINE DIV DIV_ASSIGN DOT ELSE EQL FALLTHROUGH FALSE FLOAT FOR FUNC GEQ GOTO GTN ID IF IMPORT INC INT LAND LBRACE LBRACK LEQ LOR LPAREN LTN MOD MOD_ASSIGN MUL MUL_ASSIGN NEQ NOT OR OR_ASSIGN PACKAGE RBRACE RBRACK RETURN RPAREN RUNE SEMICOLON SHL SHL_ASSIGN SHR SHR_ASSIGN STRING STRUCT SUB SUB_ASSIGN SWITCH TRUE TYPE VAR XOR XOR_ASSIGN\n    SourceFile : PackageClause SEMICOLON ImportDecl_curl TopLevelDecl_curl\n    OpenS : CloseS : OpenStructS : CloseStructS : \n    TopLevelDecl_curl : TopLevelDecl_curl TopLevelDecl SEMICOLON\n                    |\n    \n    ImportDecl_curl : ImportDecl_curl ImportDecl SEMICOLON\n                  |\n    \n    PackageClause : PACKAGE ID\n    \n    ImportDecl : IMPORT ImportSpec\n               | IMPORT LPAREN ImportSpec_curl RPAREN\n    \n    ImportSpec_curl : ImportSpec_curl ImportSpec SEMICOLON\n                    |\n    \n    ImportSpec : DOT ImportPath\n               | ID ImportPath\n               | ImportPath\n    \n    ImportPath : STRING\n    \n    TopLevelDecl : Declaration\n                 | FunctionDecl\n    \n    Declaration : ConstDecl\n                | StructDecl\n                | VarDecl\n    \n    ConstDecl : CONST ConstSpec\n              | CONST LPAREN ConstSpec_curl RPAREN\n    \n    ConstSpec_curl : ConstSpec_curl ConstSpec SEMICOLON\n                   |\n    \n    ConstSpec : IdentifierList ID ASSIGN ExpressionList\n    \n    IdentifierList : ID\n                   | ID COMMA IdentifierList\n    \n    ExpressionList : Expression\n                   | ExpressionList COMMA Expression\n    \n    StructDecl : TYPE StructName StructType \n    \n    StructName : ID\n    \n    VarDecl : VAR VarSpec\n            | VAR LPAREN VarSpec_curl RPAREN\n    \n    VarSpec_curl : VarSpec_curl VarSpec SEMICOLON\n                 |\n    \n    VarSpec : IdentifierList Type ASSIGN ExpressionList\n            | IdentifierList ID ASSIGN ExpressionList\n            | IdentifierList ASSIGN ExpressionList\n            | IdentifierList ID\n            | IdentifierList Type\n    \n    FunctionDecl : FUNC FuncName OpenS Signature Block CloseS\n    \n    FuncName : ID \n    \n    Type : LPAREN Type RPAREN\n         | LPAREN ID RPAREN\n         | TypeLit\n    \n    TypeLit : ArrayType\n            | PointerType\n            | SliceType\n    \n    ArrayType : LBRACK INT RBRACK Type\n              | LBRACK INT RBRACK ID\n    \n    SliceType : LBRACK RBRACK Type\n              | LBRACK RBRACK ID\n    \n    StructType : STRUCT OpenStructS LBRACE FieldDecl_curl RBRACE CloseStructS\n    \n    FieldDecl_curl : FieldDecl_curl FieldDecl SEMICOLON\n                   |\n    \n    FieldDecl : ID COMMA IdentifierList Type\n              | ID COMMA IdentifierList ID\n              | ID Type\n              | ID ID\n              | ID STRUCT MUL ID\n              | ID COMMA IdentifierList STRUCT MUL ID\n    \n    PointerType : MUL Type\n                | MUL ID\n    \n    Signature : Parameters Result\n    \n    Result : LPAREN TypeList RPAREN\n           |\n    \n    TypeList : ID\n             | Type\n             | TypeList COMMA ID\n             | TypeList COMMA Type\n    \n    Parameters : LPAREN RPAREN\n               | LPAREN ParameterList RPAREN\n               | LPAREN ParameterList COMMA RPAREN\n    \n    ParameterList : ParameterDecl\n                  | ParameterList COMMA ParameterDecl\n    \n    ParameterDecl : ParaIdList Type\n                  | ID Type\n                  | ParaIdList ID\n                  | ID ID\n    \n    ParaIdList : ID COMMA ID\n               | ParaIdList COMMA ID\n    \n    Block : LBRACE StatementList RBRACE \n    \n    StatementList : Statement_curl\n    \n    Statement_curl : Statement_curl Statement SEMICOLON\n                   |\n    \n    Expression : UnaryExpr\n               | Expression BinaryOp UnaryExpr\n    \n    UnaryExpr : PrimaryExpr\n              | UnaryOp UnaryExpr\n    \n    BinaryOp : LOR\n             | LAND\n             | RelOp\n             | AddOp\n             | MulOp\n    \n    RelOp : EQL\n          | NEQ\n          | LTN\n          | LEQ\n          | GTN\n          | GEQ\n    \n    AddOp : ADD\n          | SUB\n          | OR\n          | XOR\n    \n    MulOp : MUL\n          | DIV\n          | MOD\n          | SHL\n          | SHR\n          | AND\n          | AND_NOT\n    \n    UnaryOp : ADD\n            | SUB\n            | NOT\n            | XOR\n            | MUL\n            | AND\n    \n    PrimaryExpr : Literal\n                | ID\n                | PrimaryExpr DOT ID\n                | LPAREN Expression RPAREN\n                | PrimaryExpr Index\n                | PrimaryExpr Slice\n                | PrimaryExpr Arguments\n    \n    Index : LBRACK Expression RBRACK\n    \n    Slice : LBRACK Expression COLON Expression RBRACK\n          | LBRACK COLON Expression RBRACK\n          | LBRACK Expression COLON RBRACK\n          | LBRACK COLON RBRACK\n          | LBRACK Expression COLON Expression COLON Expression RBRACK\n          | LBRACK COLON Expression COLON Expression RBRACK\n    \n    Arguments : LPAREN RPAREN\n              | LPAREN ExpressionList RPAREN\n              | LPAREN ExpressionList COMMA RPAREN\n    \n    Literal : BasicLit\n    \n    BasicLit : IntLit \n             | FloatLit\n             | RuneLit\n             | StringLit\n             | TrueLit\n             | FalseLit\n    \n    TrueLit : TRUE\n    \n    FalseLit : FALSE\n    \n    IntLit : INT\n    \n    FloatLit : FLOAT\n    \n    RuneLit : RUNE\n    \n    StringLit : STRING\n    \n    Statement : Declaration\n              | LabelledStmt\n              | SimpleStmt\n              | ReturnStmt\n              | BreakStmt\n              | ContinueStmt\n              | GotoStmt\n              | FallthroughStmt\n              | IfStmt\n              | OpenS Block CloseS\n              | SwitchStmt\n              | ForStmt\n    \n    SimpleStmt : Expression\n               | IncDecStmt\n               | Assignment\n               | ShortVarDecl\n               |\n    \n    IncDecStmt : Expression INC\n               | Expression DEC\n    \n    Assignment : ExpressionList AssignOp ExpressionList\n    \n    AssignOp : ADD_ASSIGN\n             | SUB_ASSIGN\n             | MUL_ASSIGN\n             | DIV_ASSIGN\n             | MOD_ASSIGN\n             | AND_ASSIGN\n             | AND_NOT_ASSIGN\n             | OR_ASSIGN\n             | XOR_ASSIGN\n             | SHL_ASSIGN\n             | SHR_ASSIGN\n             | ASSIGN\n    \n    LabelledStmt : ID COLON Statement\n    \n    ReturnStmt : RETURN ExpressionList\n               | RETURN\n    \n    BreakStmt : BREAK ID\n              | BREAK\n    \n    ContinueStmt : CONTINUE ID\n                 | CONTINUE\n    \n    GotoStmt : GOTO ID\n    \n    FallthroughStmt : FALLTHROUGH\n    \n    ShortVarDecl : IdentifierList DEFINE ExpressionList\n    \n    IfStmt : IF OpenS Expression Block CloseS \n           | IF OpenS Expression Block CloseS ELSE IfStmt\n           | IF OpenS Expression Block CloseS ELSE OpenS Block CloseS \n    \n    SwitchStmt : ExprSwitchStmt\n    \n    ExprSwitchStmt : SWITCH ExpressionName LBRACE OpenW ExprCaseClause_curl CloseW RBRACE \n    \n    ExpressionName : Expression\n    \n    ExprCaseClause_curl : ExprCaseClause_curl ExprCaseClause\n                        | DefCaseClause\n                        |\n    \n    ExprCaseClause : OpenS ExprSwitchCase COLON StatementList CloseS\n    \n    ExprSwitchCase : CASE Expression\n    \n    DefCaseClause : OpenS DEFAULT COLON StatementList CloseS\n    \n    ForStmt : FOR OpenS OpenF Expression Block CloseF CloseS      \n            | FOR OpenS OpenF ForClause Block CloseF CloseS \n            | FOR OpenS OpenF Block CloseF CloseS  \n    \n    OpenF : \n    \n    CloseF : \n    \n    OpenW : \n    \n    CloseW : \n    \n    ForClause : SimpleStmt SEMICOLON SEMICOLON SimpleStmt\n              | SimpleStmt SEMICOLON Expression SEMICOLON SimpleStmt\n    '
    
_lr_action_items = {'RETURN':([116,170,231,238,323,328,],[-88,197,-87,197,-88,-88,]),'CONST':([4,6,7,26,31,116,170,231,238,323,328,],[-9,-7,10,-8,-6,-88,10,-87,10,-88,-88,]),'FUNC':([4,6,7,26,31,],[-9,-7,15,-8,-6,]),'DEFAULT':([273,286,300,],[-210,-2,312,]),'GOTO':([116,170,231,238,323,328,],[-88,196,-87,196,-88,-88,]),'SHL_ASSIGN':([74,75,76,78,79,80,82,83,84,85,89,91,93,94,95,96,98,122,123,124,126,177,179,180,181,182,206,209,210,220,223,224,259,260,262,278,283,284,288,302,316,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,-135,-123,-32,-124,-90,-122,249,-31,-132,-128,-136,-130,-131,-137,-129,-31,-122,-134,-133,-122,]),'LOR':([74,75,76,78,79,80,82,83,84,85,89,90,91,93,94,95,96,98,122,123,124,126,130,176,177,179,180,181,182,206,210,220,221,223,224,240,259,260,261,262,275,276,278,283,284,288,289,302,305,316,327,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,132,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,132,132,-135,-123,132,-124,-90,-122,132,-132,132,-128,-136,132,-130,-131,132,-137,132,132,-129,132,-122,-134,132,-133,132,-122,132,]),'COLON':([74,75,76,78,79,80,82,83,84,85,89,91,93,94,95,96,98,122,123,124,125,126,176,177,179,181,182,206,220,221,223,224,259,260,261,262,278,288,302,312,322,327,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-122,-146,-147,-148,-142,-143,-92,-125,-126,175,-127,222,-135,-123,-124,-90,238,-132,258,-128,-136,-130,-131,277,-137,-129,-134,-133,323,328,-203,]),'DIV_ASSIGN':([74,75,76,78,79,80,82,83,84,85,89,91,93,94,95,96,98,122,123,124,126,177,179,180,181,182,206,209,210,220,223,224,259,260,262,278,283,284,288,302,316,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,-135,-123,-32,-124,-90,-122,251,-31,-132,-128,-136,-130,-131,-137,-129,-31,-122,-134,-133,-122,]),'MUL':([30,36,50,51,53,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,92,93,94,95,96,97,98,103,104,111,113,114,116,119,122,123,124,125,126,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,170,175,176,177,179,180,181,182,186,187,189,197,201,206,207,210,217,220,221,222,223,224,225,227,231,235,236,238,240,241,242,243,244,245,246,247,248,249,250,251,252,253,257,258,259,260,261,262,264,271,275,276,277,278,280,283,284,288,289,291,294,302,304,305,316,317,321,323,327,328,],[-29,53,77,53,53,77,-30,53,-116,77,-144,-121,-139,-119,-145,-138,-149,-118,-150,-89,-140,-91,-115,77,-141,133,-122,-120,-146,-147,-148,-142,-117,-143,77,77,53,53,53,-88,53,-92,-125,-126,77,-127,77,77,133,-105,-93,-108,-109,-99,-103,-94,-114,77,-96,-112,-107,-97,-102,-104,-98,-111,-100,-113,-95,-101,-106,-110,77,77,133,-135,-123,133,-124,-90,-84,-83,53,77,-2,-122,77,133,-2,-132,133,77,-128,-136,77,53,-87,77,-208,77,133,-172,77,-173,-179,-182,-181,-178,-175,-180,-176,-174,-171,-177,77,77,-130,-131,133,-137,279,77,133,133,77,-129,53,133,-122,-134,133,303,77,-133,77,133,-122,77,77,-88,133,-88,]),'DIV':([74,75,76,78,79,80,82,83,84,85,89,90,91,93,94,95,96,98,122,123,124,126,130,176,177,179,180,181,182,206,210,220,221,223,224,240,259,260,261,262,275,276,278,283,284,288,289,302,305,316,327,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,134,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,134,134,-135,-123,134,-124,-90,-122,134,-132,134,-128,-136,134,-130,-131,134,-137,134,134,-129,134,-122,-134,134,-133,134,-122,134,]),'RUNE':([50,63,72,73,77,81,86,88,92,97,103,104,116,125,127,129,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,170,175,197,201,207,217,222,225,231,235,236,238,241,242,243,244,245,246,247,248,249,250,251,252,253,257,258,271,277,294,304,317,321,323,328,],[80,80,-116,80,-119,-118,-115,80,-120,-117,80,80,-88,80,80,80,-105,-93,-108,-109,-99,-103,-94,-114,80,-96,-112,-107,-97,-102,-104,-98,-111,-100,-113,-95,-101,-106,-110,80,80,80,-2,80,-2,80,80,-87,80,-208,80,-172,80,-173,-179,-182,-181,-178,-175,-180,-176,-174,-171,-177,80,80,80,80,80,80,80,80,-88,-88,]),'TRUE':([50,63,72,73,77,81,86,88,92,97,103,104,116,125,127,129,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,170,175,197,201,207,217,222,225,231,235,236,238,241,242,243,244,245,246,247,248,249,250,251,252,253,257,258,271,277,294,304,317,321,323,328,],[78,78,-116,78,-119,-118,-115,78,-120,-117,78,78,-88,78,78,78,-105,-93,-108,-109,-99,-103,-94,-114,78,-96,-112,-107,-97,-102,-104,-98,-111,-100,-113,-95,-101,-106,-110,78,78,78,-2,78,-2,78,78,-87,78,-208,78,-172,78,-173,-179,-182,-181,-178,-175,-180,-176,-174,-171,-177,78,78,78,78,78,78,78,78,-88,-88,]),'DOT':([8,23,39,74,75,76,78,79,80,82,84,85,89,91,93,94,95,96,98,106,123,124,126,177,179,181,206,220,223,224,259,260,262,278,284,288,302,316,],[25,-14,25,-144,-121,-139,-145,-138,-149,-150,-140,128,-141,-122,-146,-147,-148,-142,-143,-13,-125,-126,-127,-135,-123,-124,-122,-132,-128,-136,-130,-131,-137,-129,-122,-134,-133,-122,]),'SUB':([50,63,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,92,93,94,95,96,97,98,103,104,116,122,123,124,125,126,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,170,175,176,177,179,180,181,182,197,201,206,207,210,217,220,221,222,223,224,225,231,235,236,238,240,241,242,243,244,245,246,247,248,249,250,251,252,253,257,258,259,260,261,262,271,275,276,277,278,283,284,288,289,294,302,304,305,316,317,321,323,327,328,],[72,72,-116,72,-144,-121,-139,-119,-145,-138,-149,-118,-150,-89,-140,-91,-115,72,-141,131,-122,-120,-146,-147,-148,-142,-117,-143,72,72,-88,-92,-125,-126,72,-127,72,72,131,-105,-93,-108,-109,-99,-103,-94,-114,72,-96,-112,-107,-97,-102,-104,-98,-111,-100,-113,-95,-101,-106,-110,72,72,131,-135,-123,131,-124,-90,72,-2,-122,72,131,-2,-132,131,72,-128,-136,72,-87,72,-208,72,131,-172,72,-173,-179,-182,-181,-178,-175,-180,-176,-174,-171,-177,72,72,-130,-131,131,-137,72,131,131,72,-129,131,-122,-134,131,72,-133,72,131,-122,72,72,-88,131,-88,]),'CASE':([170,231,273,286,298,299,310,311,323,328,329,331,332,334,],[-86,-87,-210,-201,-200,-2,-199,321,-88,-88,-3,-3,-204,-202,]),'BREAK':([116,170,231,238,323,328,],[-88,211,-87,211,-88,-88,]),'GEQ':([74,75,76,78,79,80,82,83,84,85,89,90,91,93,94,95,96,98,122,123,124,126,130,176,177,179,180,181,182,206,210,220,221,223,224,240,259,260,261,262,275,276,278,283,284,288,289,302,305,316,327,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,136,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,136,136,-135,-123,136,-124,-90,-122,136,-132,136,-128,-136,136,-130,-131,136,-137,136,136,-129,136,-122,-134,136,-133,136,-122,136,]),'DEC':([74,75,76,78,79,80,82,83,84,85,89,91,93,94,95,96,98,122,123,124,126,177,179,181,182,206,210,220,223,224,259,260,262,278,283,284,288,302,316,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,-135,-123,-124,-90,-122,254,-132,-128,-136,-130,-131,-137,-129,254,-122,-134,-133,-122,]),'RPAREN':([23,28,35,39,42,46,47,49,52,56,65,74,75,76,78,79,80,82,83,84,85,89,90,91,93,94,95,96,98,99,100,101,102,106,107,110,112,118,120,121,122,123,124,126,127,130,154,155,159,162,163,164,166,167,168,169,173,174,177,178,179,180,181,182,185,220,223,224,225,229,230,259,260,262,278,288,302,],[-14,-27,-38,59,61,68,-48,-49,-50,-51,109,-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-31,-122,-146,-147,-148,-142,-143,154,155,-65,-66,-13,-26,160,-77,-37,-54,-55,-92,-125,-126,-127,177,181,-46,-47,184,-79,-81,-80,-82,188,-71,-70,-52,-53,-135,224,-123,-32,-124,-90,-78,-132,-128,-136,262,-73,-72,-130,-131,-137,-129,-134,-133,]),'SEMICOLON':([1,5,9,11,12,13,14,17,18,20,21,22,27,34,40,41,47,49,52,54,55,56,57,59,60,61,62,68,69,74,75,76,78,79,80,82,83,84,85,87,89,90,91,93,94,95,96,98,101,102,108,116,117,120,121,122,123,124,126,154,155,156,157,170,172,173,174,177,179,180,181,182,190,191,192,193,194,197,198,200,201,202,203,204,205,206,208,210,211,212,213,214,215,216,218,219,220,223,224,226,228,231,232,233,234,236,237,238,254,255,256,259,260,262,266,267,268,269,270,271,272,274,278,281,283,284,285,287,288,290,292,293,294,295,296,297,301,302,305,306,307,308,314,318,319,320,323,325,328,330,333,],[4,-10,26,-22,-20,31,-19,-21,-23,-18,-11,-17,-24,-35,-16,-15,-48,-49,-50,-43,-42,-51,-33,-12,106,-25,107,-36,118,-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-41,-141,-31,-122,-146,-147,-148,-142,-143,-65,-66,-28,-88,-3,-54,-55,-92,-125,-126,-127,-46,-47,-39,-40,-167,-44,-52,-53,-135,-123,-32,-124,-90,-156,231,-159,-165,-164,-185,-196,-157,-2,-152,-161,-189,-191,-122,-151,-163,-187,-154,-158,-153,-162,-166,-155,-85,-132,-128,-136,263,-5,-87,-3,-190,-184,-208,-188,-167,-169,-168,-186,-130,-131,-137,-61,-62,-56,-160,-192,-167,-183,-170,-129,294,-163,-122,-209,-3,-134,-63,-59,-60,304,-209,-209,-3,-193,-133,317,-3,-3,-207,-64,-206,-205,-197,-88,-194,-88,-3,-195,]),'FALLTHROUGH':([116,170,231,238,323,328,],[-88,205,-87,205,-88,-88,]),'SHR_ASSIGN':([74,75,76,78,79,80,82,83,84,85,89,91,93,94,95,96,98,122,123,124,126,177,179,180,181,182,206,209,210,220,223,224,259,260,262,278,283,284,288,302,316,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,-135,-123,-32,-124,-90,-122,246,-31,-132,-128,-136,-130,-131,-137,-129,-31,-122,-134,-133,-122,]),'MOD':([74,75,76,78,79,80,82,83,84,85,89,90,91,93,94,95,96,98,122,123,124,126,130,176,177,179,180,181,182,206,210,220,221,223,224,240,259,260,261,262,275,276,278,283,284,288,289,302,305,316,327,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,153,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,153,153,-135,-123,153,-124,-90,-122,153,-132,153,-128,-136,153,-130,-131,153,-137,153,153,-129,153,-122,-134,153,-133,153,-122,153,]),'SWITCH':([116,170,231,238,323,328,],[-88,207,-87,207,-88,-88,]),'LTN':([74,75,76,78,79,80,82,83,84,85,89,90,91,93,94,95,96,98,122,123,124,126,130,176,177,179,180,181,182,206,210,220,221,223,224,240,259,260,261,262,275,276,278,283,284,288,289,302,305,316,327,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,148,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,148,148,-135,-123,148,-124,-90,-122,148,-132,148,-128,-136,148,-130,-131,148,-137,148,148,-129,148,-122,-134,148,-133,148,-122,148,]),'AND_NOT':([74,75,76,78,79,80,82,83,84,85,89,90,91,93,94,95,96,98,122,123,124,126,130,176,177,179,180,181,182,206,210,220,221,223,224,240,259,260,261,262,275,276,278,283,284,288,289,302,305,316,327,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,138,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,138,138,-135,-123,138,-124,-90,-122,138,-132,138,-128,-136,138,-130,-131,138,-137,138,138,-129,138,-122,-134,138,-133,138,-122,138,]),'AND_ASSIGN':([74,75,76,78,79,80,82,83,84,85,89,91,93,94,95,96,98,122,123,124,126,177,179,180,181,182,206,209,210,220,223,224,259,260,262,278,283,284,288,302,316,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,-135,-123,-32,-124,-90,-122,250,-31,-132,-128,-136,-130,-131,-137,-129,-31,-122,-134,-133,-122,]),'COMMA':([30,47,49,52,56,74,75,76,78,79,80,82,83,84,85,87,89,90,91,93,94,95,96,98,101,102,108,110,111,112,113,120,121,122,123,124,126,154,155,156,157,162,163,164,166,167,168,169,173,174,177,178,179,180,181,182,185,186,187,206,209,210,220,223,224,227,229,230,234,259,260,262,270,274,278,283,284,288,302,316,],[44,-48,-49,-50,-51,-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,129,-141,-31,-122,-146,-147,-148,-142,-143,-65,-66,129,159,161,-77,165,-54,-55,-92,-125,-126,-127,-46,-47,129,129,-79,-81,-80,-82,189,-71,-70,-52,-53,-135,225,-123,-32,-124,-90,-78,-84,-83,44,129,-31,-132,-128,-136,265,-73,-72,129,-130,-131,-137,129,129,-129,-31,44,-134,-133,44,]),'AND_NOT_ASSIGN':([74,75,76,78,79,80,82,83,84,85,89,91,93,94,95,96,98,122,123,124,126,177,179,180,181,182,206,209,210,220,223,224,259,260,262,278,283,284,288,302,316,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,-135,-123,-32,-124,-90,-122,253,-31,-132,-128,-136,-130,-131,-137,-129,-31,-122,-134,-133,-122,]),'IMPORT':([4,6,26,],[-9,8,-8,]),'NEQ':([74,75,76,78,79,80,82,83,84,85,89,90,91,93,94,95,96,98,122,123,124,126,130,176,177,179,180,181,182,206,210,220,221,223,224,240,259,260,261,262,275,276,278,283,284,288,289,302,305,316,327,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,135,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,135,135,-135,-123,135,-124,-90,-122,135,-132,135,-128,-136,135,-130,-131,135,-137,135,135,-129,135,-122,-134,135,-133,135,-122,135,]),'ASSIGN':([30,36,43,47,49,52,54,55,56,64,74,75,76,78,79,80,82,83,84,85,89,91,93,94,95,96,98,101,102,120,121,122,123,124,126,154,155,173,174,177,179,180,181,182,206,209,210,220,223,224,259,260,262,278,283,284,288,302,316,],[-29,50,63,-48,-49,-50,103,104,-51,-30,-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-122,-146,-147,-148,-142,-143,-65,-66,-54,-55,-92,-125,-126,-127,-46,-47,-52,-53,-135,-123,-32,-124,-90,-122,245,-31,-132,-128,-136,-130,-131,-137,-129,-31,-122,-134,-133,-122,]),'DEFINE':([30,64,199,206,284,316,],[-29,-30,235,-29,-29,-29,]),'SUB_ASSIGN':([74,75,76,78,79,80,82,83,84,85,89,91,93,94,95,96,98,122,123,124,126,177,179,180,181,182,206,209,210,220,223,224,259,260,262,278,283,284,288,302,316,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,-135,-123,-32,-124,-90,-122,241,-31,-132,-128,-136,-130,-131,-137,-129,-31,-122,-134,-133,-122,]),'SHR':([74,75,76,78,79,80,82,83,84,85,89,90,91,93,94,95,96,98,122,123,124,126,130,176,177,179,180,181,182,206,210,220,221,223,224,240,259,260,261,262,275,276,278,283,284,288,289,302,305,316,327,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,141,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,141,141,-135,-123,141,-124,-90,-122,141,-132,141,-128,-136,141,-130,-131,141,-137,141,141,-129,141,-122,-134,141,-133,141,-122,141,]),'XOR':([50,63,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,92,93,94,95,96,97,98,103,104,116,122,123,124,125,126,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,170,175,176,177,179,180,181,182,197,201,206,207,210,217,220,221,222,223,224,225,231,235,236,238,240,241,242,243,244,245,246,247,248,249,250,251,252,253,257,258,259,260,261,262,271,275,276,277,278,283,284,288,289,294,302,304,305,316,317,321,323,327,328,],[81,81,-116,81,-144,-121,-139,-119,-145,-138,-149,-118,-150,-89,-140,-91,-115,81,-141,142,-122,-120,-146,-147,-148,-142,-117,-143,81,81,-88,-92,-125,-126,81,-127,81,81,142,-105,-93,-108,-109,-99,-103,-94,-114,81,-96,-112,-107,-97,-102,-104,-98,-111,-100,-113,-95,-101,-106,-110,81,81,142,-135,-123,142,-124,-90,81,-2,-122,81,142,-2,-132,142,81,-128,-136,81,-87,81,-208,81,142,-172,81,-173,-179,-182,-181,-178,-175,-180,-176,-174,-171,-177,81,81,-130,-131,142,-137,81,142,142,81,-129,142,-122,-134,142,81,-133,81,142,-122,81,81,-88,142,-88,]),'STRING':([8,23,24,25,39,50,63,72,73,77,81,86,88,92,97,103,104,106,116,125,127,129,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,170,175,197,201,207,217,222,225,231,235,236,238,241,242,243,244,245,246,247,248,249,250,251,252,253,257,258,271,277,294,304,317,321,323,328,],[20,-14,20,20,20,82,82,-116,82,-119,-118,-115,82,-120,-117,82,82,-13,-88,82,82,82,-105,-93,-108,-109,-99,-103,-94,-114,82,-96,-112,-107,-97,-102,-104,-98,-111,-100,-113,-95,-101,-106,-110,82,82,82,-2,82,-2,82,82,-87,82,-208,82,-172,82,-173,-179,-182,-181,-178,-175,-180,-176,-174,-171,-177,82,82,82,82,82,82,82,82,-88,-88,]),'FOR':([116,170,231,238,323,328,],[-88,201,-87,201,-88,-88,]),'PACKAGE':([0,],[3,]),'RBRACK':([48,70,74,75,76,78,79,80,82,83,84,85,89,91,93,94,95,96,98,122,123,124,126,175,176,177,179,181,182,220,221,222,223,224,259,260,261,262,276,278,288,289,302,],[71,119,-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,220,223,-135,-123,-124,-90,-132,259,260,-128,-136,-130,-131,278,-137,288,-129,-134,302,-133,]),'GTN':([74,75,76,78,79,80,82,83,84,85,89,90,91,93,94,95,96,98,122,123,124,126,130,176,177,179,180,181,182,206,210,220,221,223,224,240,259,260,261,262,275,276,278,283,284,288,289,302,305,316,327,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,144,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,144,144,-135,-123,144,-124,-90,-122,144,-132,144,-128,-136,144,-130,-131,144,-137,144,144,-129,144,-122,-134,144,-133,144,-122,144,]),'ELSE':([219,287,301,],[-85,-3,313,]),'ADD':([50,63,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,92,93,94,95,96,97,98,103,104,116,122,123,124,125,126,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,170,175,176,177,179,180,181,182,197,201,206,207,210,217,220,221,222,223,224,225,231,235,236,238,240,241,242,243,244,245,246,247,248,249,250,251,252,253,257,258,259,260,261,262,271,275,276,277,278,283,284,288,289,294,302,304,305,316,317,321,323,327,328,],[86,86,-116,86,-144,-121,-139,-119,-145,-138,-149,-118,-150,-89,-140,-91,-115,86,-141,145,-122,-120,-146,-147,-148,-142,-117,-143,86,86,-88,-92,-125,-126,86,-127,86,86,145,-105,-93,-108,-109,-99,-103,-94,-114,86,-96,-112,-107,-97,-102,-104,-98,-111,-100,-113,-95,-101,-106,-110,86,86,145,-135,-123,145,-124,-90,86,-2,-122,86,145,-2,-132,145,86,-128,-136,86,-87,86,-208,86,145,-172,86,-173,-179,-182,-181,-178,-175,-180,-176,-174,-171,-177,86,86,-130,-131,145,-137,86,145,145,86,-129,145,-122,-134,145,86,-133,86,145,-122,86,86,-88,145,-88,]),'LAND':([74,75,76,78,79,80,82,83,84,85,89,90,91,93,94,95,96,98,122,123,124,126,130,176,177,179,180,181,182,206,210,220,221,223,224,240,259,260,261,262,275,276,278,283,284,288,289,302,305,316,327,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,137,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,137,137,-135,-123,137,-124,-90,-122,137,-132,137,-128,-136,137,-130,-131,137,-137,137,137,-129,137,-122,-134,137,-133,137,-122,137,]),'EQL':([74,75,76,78,79,80,82,83,84,85,89,90,91,93,94,95,96,98,122,123,124,126,130,176,177,179,180,181,182,206,210,220,221,223,224,240,259,260,261,262,275,276,278,283,284,288,289,302,305,316,327,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,146,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,146,146,-135,-123,146,-124,-90,-122,146,-132,146,-128,-136,146,-130,-131,146,-137,146,146,-129,146,-122,-134,146,-133,146,-122,146,]),'LPAREN':([8,10,16,30,32,33,36,45,50,51,53,63,64,66,71,72,73,74,75,76,77,78,79,80,81,82,84,85,86,88,89,91,92,93,94,95,96,97,98,103,104,109,111,113,114,116,119,123,124,125,126,127,129,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,170,175,177,179,181,184,186,187,189,197,201,206,207,217,220,222,223,224,225,227,231,235,236,238,241,242,243,244,245,246,247,248,249,250,251,252,253,257,258,259,260,262,271,277,278,280,284,288,294,302,304,316,317,321,323,328,],[23,28,35,-29,-2,-45,51,65,88,51,51,88,-30,114,51,-116,88,-144,-121,-139,-119,-145,-138,-149,-118,-150,-140,127,-115,88,-141,-122,-120,-146,-147,-148,-142,-117,-143,88,88,-74,51,51,51,-88,51,-125,-126,88,-127,88,88,-105,-93,-108,-109,-99,-103,-94,-114,88,-96,-112,-107,-97,-102,-104,-98,-111,-100,-113,-95,-101,-106,-110,-75,88,88,-135,-123,-124,-76,-84,-83,51,88,-2,-122,88,-2,-132,88,-128,-136,88,51,-87,88,-208,88,-172,88,-173,-179,-182,-181,-178,-175,-180,-176,-174,-171,-177,88,88,-130,-131,-137,88,88,-129,51,-122,-134,88,-133,88,-122,88,88,-88,-88,]),'VAR':([4,6,7,26,31,116,170,231,238,323,328,],[-9,-7,16,-8,-6,-88,16,-87,16,-88,-88,]),'SHL':([74,75,76,78,79,80,82,83,84,85,89,90,91,93,94,95,96,98,122,123,124,126,130,176,177,179,180,181,182,206,210,220,221,223,224,240,259,260,261,262,275,276,278,283,284,288,289,302,305,316,327,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,147,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,147,147,-135,-123,147,-124,-90,-122,147,-132,147,-128,-136,147,-130,-131,147,-137,147,147,-129,147,-122,-134,147,-133,147,-122,147,]),'ID':([3,8,10,15,16,19,23,28,29,30,35,36,39,42,44,46,50,51,53,63,64,65,71,72,73,77,81,86,88,92,97,103,104,106,107,111,113,114,116,118,119,125,127,128,129,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,158,159,161,165,170,175,183,186,187,189,196,197,201,204,207,211,217,222,225,227,231,235,236,238,241,242,243,244,245,246,247,248,249,250,251,252,253,257,258,263,265,271,277,279,280,294,303,304,317,321,323,328,],[5,24,30,33,30,38,-14,-27,43,-29,-38,55,24,30,30,30,91,100,102,91,-30,113,121,-116,91,-119,-118,-115,91,-120,-117,91,91,-13,-26,163,166,169,-88,-37,174,91,91,179,91,-105,-93,-108,-109,-99,-103,-94,-114,91,-96,-112,-107,-97,-102,-104,-98,-111,-100,-113,-95,-101,-106,-110,-58,113,186,187,206,91,227,-84,-83,230,233,91,-2,237,91,256,-2,91,91,267,-87,91,-208,206,-172,91,-173,-179,-182,-181,-178,-175,-180,-176,-174,-171,-177,91,91,-57,30,284,91,290,293,91,314,316,316,91,-88,-88,]),'IF':([116,170,231,238,313,323,328,],[-88,217,-87,217,217,-88,-88,]),'AND':([50,63,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,92,93,94,95,96,97,98,103,104,116,122,123,124,125,126,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,170,175,176,177,179,180,181,182,197,201,206,207,210,217,220,221,222,223,224,225,231,235,236,238,240,241,242,243,244,245,246,247,248,249,250,251,252,253,257,258,259,260,261,262,271,275,276,277,278,283,284,288,289,294,302,304,305,316,317,321,323,327,328,],[92,92,-116,92,-144,-121,-139,-119,-145,-138,-149,-118,-150,-89,-140,-91,-115,92,-141,149,-122,-120,-146,-147,-148,-142,-117,-143,92,92,-88,-92,-125,-126,92,-127,92,92,149,-105,-93,-108,-109,-99,-103,-94,-114,92,-96,-112,-107,-97,-102,-104,-98,-111,-100,-113,-95,-101,-106,-110,92,92,149,-135,-123,149,-124,-90,92,-2,-122,92,149,-2,-132,149,92,-128,-136,92,-87,92,-208,92,149,-172,92,-173,-179,-182,-181,-178,-175,-180,-176,-174,-171,-177,92,92,-130,-131,149,-137,92,149,149,92,-129,149,-122,-134,149,92,-133,92,149,-122,92,92,-88,149,-88,]),'MOD_ASSIGN':([74,75,76,78,79,80,82,83,84,85,89,91,93,94,95,96,98,122,123,124,126,177,179,180,181,182,206,209,210,220,223,224,259,260,262,278,283,284,288,302,316,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,-135,-123,-32,-124,-90,-122,248,-31,-132,-128,-136,-130,-131,-137,-129,-31,-122,-134,-133,-122,]),'LBRACE':([58,66,67,74,75,76,78,79,80,82,83,84,85,89,90,91,93,94,95,96,98,105,109,115,116,122,123,124,126,160,170,177,179,180,181,182,184,188,193,194,195,201,210,216,220,223,224,231,236,238,239,240,254,255,259,260,262,270,271,274,275,278,282,283,284,288,302,304,313,315,316,317,323,324,326,328,],[-4,-69,116,-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-31,-122,-146,-147,-148,-142,-143,158,-74,-67,-88,-92,-125,-126,-127,-75,-2,-135,-123,-32,-124,-90,-76,-68,-165,-164,116,-2,-163,-166,-132,-128,-136,-87,-208,-2,273,-198,-169,-168,-130,-131,-137,-192,116,-170,116,-129,116,116,-122,-134,-133,-167,-2,-212,-122,-167,-88,116,-213,-88,]),'FALSE':([50,63,72,73,77,81,86,88,92,97,103,104,116,125,127,129,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,170,175,197,201,207,217,222,225,231,235,236,238,241,242,243,244,245,246,247,248,249,250,251,252,253,257,258,271,277,294,304,317,321,323,328,],[93,93,-116,93,-119,-118,-115,93,-120,-117,93,93,-88,93,93,93,-105,-93,-108,-109,-99,-103,-94,-114,93,-96,-112,-107,-97,-102,-104,-98,-111,-100,-113,-95,-101,-106,-110,93,93,93,-2,93,-2,93,93,-87,93,-208,93,-172,93,-173,-179,-182,-181,-178,-175,-180,-176,-174,-171,-177,93,93,93,93,93,93,93,93,-88,-88,]),'STRUCT':([30,37,38,64,227,280,],[-29,58,-34,-30,264,291,]),'XOR_ASSIGN':([74,75,76,78,79,80,82,83,84,85,89,91,93,94,95,96,98,122,123,124,126,177,179,180,181,182,206,209,210,220,223,224,259,260,262,278,283,284,288,302,316,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,-135,-123,-32,-124,-90,-122,244,-31,-132,-128,-136,-130,-131,-137,-129,-31,-122,-134,-133,-122,]),'INT':([48,50,63,72,73,77,81,86,88,92,97,103,104,116,125,127,129,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,170,175,197,201,207,217,222,225,231,235,236,238,241,242,243,244,245,246,247,248,249,250,251,252,253,257,258,271,277,294,304,317,321,323,328,],[70,94,94,-116,94,-119,-118,-115,94,-120,-117,94,94,-88,94,94,94,-105,-93,-108,-109,-99,-103,-94,-114,94,-96,-112,-107,-97,-102,-104,-98,-111,-100,-113,-95,-101,-106,-110,94,94,94,-2,94,-2,94,94,-87,94,-208,94,-172,94,-173,-179,-182,-181,-178,-175,-180,-176,-174,-171,-177,94,94,94,94,94,94,94,94,-88,-88,]),'FLOAT':([50,63,72,73,77,81,86,88,92,97,103,104,116,125,127,129,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,170,175,197,201,207,217,222,225,231,235,236,238,241,242,243,244,245,246,247,248,249,250,251,252,253,257,258,271,277,294,304,317,321,323,328,],[95,95,-116,95,-119,-118,-115,95,-120,-117,95,95,-88,95,95,95,-105,-93,-108,-109,-99,-103,-94,-114,95,-96,-112,-107,-97,-102,-104,-98,-111,-100,-113,-95,-101,-106,-110,95,95,95,-2,95,-2,95,95,-87,95,-208,95,-172,95,-173,-179,-182,-181,-178,-175,-180,-176,-174,-171,-177,95,95,95,95,95,95,95,95,-88,-88,]),'OR_ASSIGN':([74,75,76,78,79,80,82,83,84,85,89,91,93,94,95,96,98,122,123,124,126,177,179,180,181,182,206,209,210,220,223,224,259,260,262,278,283,284,288,302,316,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,-135,-123,-32,-124,-90,-122,247,-31,-132,-128,-136,-130,-131,-137,-129,-31,-122,-134,-133,-122,]),'LBRACK':([30,36,51,53,64,71,74,75,76,78,79,80,82,84,85,89,91,93,94,95,96,98,111,113,114,119,123,124,126,177,179,181,186,187,189,206,220,223,224,227,259,260,262,278,280,284,288,302,316,],[-29,48,48,48,-30,48,-144,-121,-139,-145,-138,-149,-150,-140,125,-141,-122,-146,-147,-148,-142,-143,48,48,48,48,-125,-126,-127,-135,-123,-124,-84,-83,48,-122,-132,-128,-136,48,-130,-131,-137,-129,48,-122,-134,-133,-122,]),'ADD_ASSIGN':([74,75,76,78,79,80,82,83,84,85,89,91,93,94,95,96,98,122,123,124,126,177,179,180,181,182,206,209,210,220,223,224,259,260,262,278,283,284,288,302,316,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,-135,-123,-32,-124,-90,-122,252,-31,-132,-128,-136,-130,-131,-137,-129,-31,-122,-134,-133,-122,]),'RBRACE':([116,158,170,171,183,231,263,273,286,298,299,309,310,323,328,329,331,332,334,],[-88,-58,-86,219,228,-87,-57,-210,-201,-200,-211,320,-199,-88,-88,-3,-3,-204,-202,]),'LEQ':([74,75,76,78,79,80,82,83,84,85,89,90,91,93,94,95,96,98,122,123,124,126,130,176,177,179,180,181,182,206,210,220,221,223,224,240,259,260,261,262,275,276,278,283,284,288,289,302,305,316,327,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,151,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,151,151,-135,-123,151,-124,-90,-122,151,-132,151,-128,-136,151,-130,-131,151,-137,151,151,-129,151,-122,-134,151,-133,151,-122,151,]),'CONTINUE':([116,170,231,238,323,328,],[-88,204,-87,204,-88,-88,]),'MUL_ASSIGN':([74,75,76,78,79,80,82,83,84,85,89,91,93,94,95,96,98,122,123,124,126,177,179,180,181,182,206,209,210,220,223,224,259,260,262,278,283,284,288,302,316,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,-135,-123,-32,-124,-90,-122,243,-31,-132,-128,-136,-130,-131,-137,-129,-31,-122,-134,-133,-122,]),'NOT':([50,63,72,73,77,81,86,88,92,97,103,104,116,125,127,129,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,170,175,197,201,207,217,222,225,231,235,236,238,241,242,243,244,245,246,247,248,249,250,251,252,253,257,258,271,277,294,304,317,321,323,328,],[97,97,-116,97,-119,-118,-115,97,-120,-117,97,97,-88,97,97,97,-105,-93,-108,-109,-99,-103,-94,-114,97,-96,-112,-107,-97,-102,-104,-98,-111,-100,-113,-95,-101,-106,-110,97,97,97,-2,97,-2,97,97,-87,97,-208,97,-172,97,-173,-179,-182,-181,-178,-175,-180,-176,-174,-171,-177,97,97,97,97,97,97,97,97,-88,-88,]),'$end':([2,4,6,7,26,31,],[0,-9,-7,-1,-8,-6,]),'TYPE':([4,6,7,26,31,116,170,231,238,323,328,],[-9,-7,19,-8,-6,-88,19,-87,19,-88,-88,]),'OR':([74,75,76,78,79,80,82,83,84,85,89,90,91,93,94,95,96,98,122,123,124,126,130,176,177,179,180,181,182,206,210,220,221,223,224,240,259,260,261,262,275,276,278,283,284,288,289,302,305,316,327,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,152,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,152,152,-135,-123,152,-124,-90,-122,152,-132,152,-128,-136,152,-130,-131,152,-137,152,152,-129,152,-122,-134,152,-133,152,-122,152,]),'INC':([74,75,76,78,79,80,82,83,84,85,89,91,93,94,95,96,98,122,123,124,126,177,179,181,182,206,210,220,223,224,259,260,262,278,283,284,288,302,316,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,-135,-123,-124,-90,-122,255,-132,-128,-136,-130,-131,-137,-129,255,-122,-134,-133,-122,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'ContinueStmt':([170,238,],[190,190,]),'FalseLit':([50,63,73,88,103,104,125,127,129,139,170,175,197,207,222,225,235,238,242,257,258,271,277,294,304,317,321,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'Statement':([170,238,],[191,272,]),'IfStmt':([170,238,313,],[192,192,325,]),'Assignment':([170,238,271,304,317,],[193,193,193,193,193,]),'OpenF':([236,],[271,]),'BinaryOp':([90,130,176,180,210,221,240,261,275,276,283,289,305,327,],[139,139,139,139,139,139,139,139,139,139,139,139,139,139,]),'ExprCaseClause':([299,],[310,]),'OpenW':([273,],[286,]),'ParameterDecl':([65,159,],[112,185,]),'OpenS':([32,170,201,217,238,286,299,313,],[45,195,236,257,195,300,311,324,]),'OpenStructS':([58,],[105,]),'StatementList':([116,323,328,],[171,329,331,]),'RelOp':([90,130,176,180,210,221,240,261,275,276,283,289,305,327,],[150,150,150,150,150,150,150,150,150,150,150,150,150,150,]),'VarDecl':([7,170,238,],[18,18,18,]),'StringLit':([50,63,73,88,103,104,125,127,129,139,170,175,197,207,222,225,235,238,242,257,258,271,277,294,304,317,321,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'PrimaryExpr':([50,63,73,88,103,104,125,127,129,139,170,175,197,207,222,225,235,238,242,257,258,271,277,294,304,317,321,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'TrueLit':([50,63,73,88,103,104,125,127,129,139,170,175,197,207,222,225,235,238,242,257,258,271,277,294,304,317,321,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'Index':([85,],[123,]),'Parameters':([45,],[66,]),'UnaryOp':([50,63,73,88,103,104,125,127,129,139,170,175,197,207,222,225,235,238,242,257,258,271,277,294,304,317,321,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'SourceFile':([0,],[2,]),'ImportPath':([8,24,25,39,],[22,40,41,22,]),'TopLevelDecl':([7,],[13,]),'ExprSwitchStmt':([170,238,],[198,198,]),'IdentifierList':([10,16,42,44,46,170,238,265,271,304,317,],[29,36,29,64,36,199,199,280,199,199,199,]),'TypeLit':([36,51,53,71,111,113,114,119,189,227,280,],[47,47,47,47,47,47,47,47,47,47,47,]),'PackageClause':([0,],[1,]),'TypeList':([114,],[167,]),'IncDecStmt':([170,238,271,304,317,],[194,194,194,194,194,]),'GotoStmt':([170,238,],[200,200,]),'AddOp':([90,130,176,180,210,221,240,261,275,276,283,289,305,327,],[140,140,140,140,140,140,140,140,140,140,140,140,140,140,]),'CloseStructS':([228,],[268,]),'FloatLit':([50,63,73,88,103,104,125,127,129,139,170,175,197,207,222,225,235,238,242,257,258,271,277,294,304,317,321,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'PointerType':([36,51,53,71,111,113,114,119,189,227,280,],[52,52,52,52,52,52,52,52,52,52,52,]),'ConstSpec_curl':([28,],[42,]),'Signature':([45,],[67,]),'Block':([67,195,271,275,282,283,324,],[117,232,285,287,295,296,330,]),'ImportSpec_curl':([23,],[39,]),'DefCaseClause':([286,],[298,]),'SwitchStmt':([170,238,],[203,203,]),'VarSpec':([16,46,],[34,69,]),'Result':([66,],[115,]),'StructName':([19,],[37,]),'TopLevelDecl_curl':([6,],[7,]),'LabelledStmt':([170,238,],[202,202,]),'Literal':([50,63,73,88,103,104,125,127,129,139,170,175,197,207,222,225,235,238,242,257,258,271,277,294,304,317,321,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'Statement_curl':([116,323,328,],[170,170,170,]),'IntLit':([50,63,73,88,103,104,125,127,129,139,170,175,197,207,222,225,235,238,242,257,258,271,277,294,304,317,321,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'MulOp':([90,130,176,180,210,221,240,261,275,276,283,289,305,327,],[143,143,143,143,143,143,143,143,143,143,143,143,143,143,]),'ImportDecl':([6,],[9,]),'CloseS':([117,232,287,297,306,307,329,330,331,],[172,269,301,308,318,319,332,333,334,]),'AssignOp':([209,],[242,]),'CloseW':([299,],[309,]),'FuncName':([15,],[32,]),'CloseF':([285,295,296,],[297,306,307,]),'Declaration':([7,170,238,],[14,208,208,]),'StructType':([37,],[57,]),'ConstSpec':([10,42,],[27,62,]),'ExpressionList':([50,63,103,104,127,170,197,235,238,242,271,304,317,],[87,108,156,157,178,209,234,270,209,274,209,209,209,]),'SimpleStmt':([170,238,271,304,317,],[214,214,281,315,326,]),'Expression':([50,63,88,103,104,125,127,129,170,175,197,207,222,225,235,238,242,257,258,271,277,294,304,317,321,],[90,90,130,90,90,176,90,180,210,221,90,240,261,180,90,210,90,275,276,283,289,305,210,210,327,]),'FieldDecl_curl':([158,],[183,]),'FunctionDecl':([7,],[12,]),'ExprSwitchCase':([311,],[322,]),'ReturnStmt':([170,238,],[212,212,]),'ParaIdList':([65,159,],[111,111,]),'ConstDecl':([7,170,238,],[17,17,17,]),'FallthroughStmt':([170,238,],[213,213,]),'Slice':([85,],[124,]),'StructDecl':([7,170,238,],[11,11,11,]),'ExpressionName':([207,],[239,]),'ArrayType':([36,51,53,71,111,113,114,119,189,227,280,],[49,49,49,49,49,49,49,49,49,49,49,]),'ImportDecl_curl':([4,],[6,]),'ParameterList':([65,],[110,]),'ForStmt':([170,238,],[215,215,]),'Arguments':([85,],[126,]),'VarSpec_curl':([35,],[46,]),'RuneLit':([50,63,73,88,103,104,125,127,129,139,170,175,197,207,222,225,235,238,242,257,258,271,277,294,304,317,321,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'ImportSpec':([8,39,],[21,60,]),'Type':([36,51,53,71,111,113,114,119,189,227,280,],[54,99,101,120,162,164,168,173,229,266,292,]),'SliceType':([36,51,53,71,111,113,114,119,189,227,280,],[56,56,56,56,56,56,56,56,56,56,56,]),'UnaryExpr':([50,63,73,88,103,104,125,127,129,139,170,175,197,207,222,225,235,238,242,257,258,271,277,294,304,317,321,],[83,83,122,83,83,83,83,83,83,182,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'ForClause':([271,],[282,]),'ShortVarDecl':([170,238,271,304,317,],[216,216,216,216,216,]),'FieldDecl':([183,],[226,]),'BreakStmt':([170,238,],[218,218,]),'ExprCaseClause_curl':([286,],[299,]),'BasicLit':([50,63,73,88,103,104,125,127,129,139,170,175,197,207,222,225,235,238,242,257,258,271,277,294,304,317,321,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> SourceFile","S'",1,None,None,None),
  ('SourceFile -> PackageClause SEMICOLON ImportDecl_curl TopLevelDecl_curl','SourceFile',4,'p_SourceFile','parser.py',152),
  ('OpenS -> <empty>','OpenS',0,'p_OpenS','parser.py',161),
  ('CloseS -> <empty>','CloseS',0,'p_CloseS','parser.py',165),
  ('OpenStructS -> <empty>','OpenStructS',0,'p_OpenStructS','parser.py',169),
  ('CloseStructS -> <empty>','CloseStructS',0,'p_CloseStructS','parser.py',173),
  ('TopLevelDecl_curl -> TopLevelDecl_curl TopLevelDecl SEMICOLON','TopLevelDecl_curl',3,'p_TopLevelDecl_curl','parser.py',177),
  ('TopLevelDecl_curl -> <empty>','TopLevelDecl_curl',0,'p_TopLevelDecl_curl','parser.py',178),
  ('ImportDecl_curl -> ImportDecl_curl ImportDecl SEMICOLON','ImportDecl_curl',3,'p_ImportDecl_curl','parser.py',183),
  ('ImportDecl_curl -> <empty>','ImportDecl_curl',0,'p_ImportDecl_curl','parser.py',184),
  ('PackageClause -> PACKAGE ID','PackageClause',2,'p_PackageClause','parser.py',189),
  ('ImportDecl -> IMPORT ImportSpec','ImportDecl',2,'p_ImportDecl','parser.py',194),
  ('ImportDecl -> IMPORT LPAREN ImportSpec_curl RPAREN','ImportDecl',4,'p_ImportDecl','parser.py',195),
  ('ImportSpec_curl -> ImportSpec_curl ImportSpec SEMICOLON','ImportSpec_curl',3,'p_ImportSpec_curl','parser.py',200),
  ('ImportSpec_curl -> <empty>','ImportSpec_curl',0,'p_ImportSpec_curl','parser.py',201),
  ('ImportSpec -> DOT ImportPath','ImportSpec',2,'p_ImportSpec','parser.py',206),
  ('ImportSpec -> ID ImportPath','ImportSpec',2,'p_ImportSpec','parser.py',207),
  ('ImportSpec -> ImportPath','ImportSpec',1,'p_ImportSpec','parser.py',208),
  ('ImportPath -> STRING','ImportPath',1,'p_ImportPath','parser.py',214),
  ('TopLevelDecl -> Declaration','TopLevelDecl',1,'p_TopLevelDecl','parser.py',219),
  ('TopLevelDecl -> FunctionDecl','TopLevelDecl',1,'p_TopLevelDecl','parser.py',220),
  ('Declaration -> ConstDecl','Declaration',1,'p_Declaration','parser.py',225),
  ('Declaration -> StructDecl','Declaration',1,'p_Declaration','parser.py',226),
  ('Declaration -> VarDecl','Declaration',1,'p_Declaration','parser.py',227),
  ('ConstDecl -> CONST ConstSpec','ConstDecl',2,'p_ConstDecl','parser.py',232),
  ('ConstDecl -> CONST LPAREN ConstSpec_curl RPAREN','ConstDecl',4,'p_ConstDecl','parser.py',233),
  ('ConstSpec_curl -> ConstSpec_curl ConstSpec SEMICOLON','ConstSpec_curl',3,'p_ConstSpec_curl','parser.py',238),
  ('ConstSpec_curl -> <empty>','ConstSpec_curl',0,'p_ConstSpec_curl','parser.py',239),
  ('ConstSpec -> IdentifierList ID ASSIGN ExpressionList','ConstSpec',4,'p_ConstSpec','parser.py',244),
  ('IdentifierList -> ID','IdentifierList',1,'p_IdentifierList','parser.py',268),
  ('IdentifierList -> ID COMMA IdentifierList','IdentifierList',3,'p_IdentifierList','parser.py',269),
  ('ExpressionList -> Expression','ExpressionList',1,'p_ExpressionList','parser.py',280),
  ('ExpressionList -> ExpressionList COMMA Expression','ExpressionList',3,'p_ExpressionList','parser.py',281),
  ('StructDecl -> TYPE StructName StructType','StructDecl',3,'p_StructDecl','parser.py',300),
  ('StructName -> ID','StructName',1,'p_StructName','parser.py',307),
  ('VarDecl -> VAR VarSpec','VarDecl',2,'p_VarDecl','parser.py',320),
  ('VarDecl -> VAR LPAREN VarSpec_curl RPAREN','VarDecl',4,'p_VarDecl','parser.py',321),
  ('VarSpec_curl -> VarSpec_curl VarSpec SEMICOLON','VarSpec_curl',3,'p_VarSpec_curl','parser.py',326),
  ('VarSpec_curl -> <empty>','VarSpec_curl',0,'p_VarSpec_curl','parser.py',327),
  ('VarSpec -> IdentifierList Type ASSIGN ExpressionList','VarSpec',4,'p_VarSpec','parser.py',332),
  ('VarSpec -> IdentifierList ID ASSIGN ExpressionList','VarSpec',4,'p_VarSpec','parser.py',333),
  ('VarSpec -> IdentifierList ASSIGN ExpressionList','VarSpec',3,'p_VarSpec','parser.py',334),
  ('VarSpec -> IdentifierList ID','VarSpec',2,'p_VarSpec','parser.py',335),
  ('VarSpec -> IdentifierList Type','VarSpec',2,'p_VarSpec','parser.py',336),
  ('FunctionDecl -> FUNC FuncName OpenS Signature Block CloseS','FunctionDecl',6,'p_FunctionDecl','parser.py',378),
  ('FuncName -> ID','FuncName',1,'p_FuncName','parser.py',383),
  ('Type -> LPAREN Type RPAREN','Type',3,'p_Type','parser.py',393),
  ('Type -> LPAREN ID RPAREN','Type',3,'p_Type','parser.py',394),
  ('Type -> TypeLit','Type',1,'p_Type','parser.py',395),
  ('TypeLit -> ArrayType','TypeLit',1,'p_TypeLit','parser.py',411),
  ('TypeLit -> PointerType','TypeLit',1,'p_TypeLit','parser.py',412),
  ('TypeLit -> SliceType','TypeLit',1,'p_TypeLit','parser.py',413),
  ('ArrayType -> LBRACK INT RBRACK Type','ArrayType',4,'p_ArrayType','parser.py',419),
  ('ArrayType -> LBRACK INT RBRACK ID','ArrayType',4,'p_ArrayType','parser.py',420),
  ('SliceType -> LBRACK RBRACK Type','SliceType',3,'p_SliceType','parser.py',438),
  ('SliceType -> LBRACK RBRACK ID','SliceType',3,'p_SliceType','parser.py',439),
  ('StructType -> STRUCT OpenStructS LBRACE FieldDecl_curl RBRACE CloseStructS','StructType',6,'p_StructType','parser.py',454),
  ('FieldDecl_curl -> FieldDecl_curl FieldDecl SEMICOLON','FieldDecl_curl',3,'p_FieldDecl_curl','parser.py',459),
  ('FieldDecl_curl -> <empty>','FieldDecl_curl',0,'p_FieldDecl_curl','parser.py',460),
  ('FieldDecl -> ID COMMA IdentifierList Type','FieldDecl',4,'p_FieldDecl','parser.py',465),
  ('FieldDecl -> ID COMMA IdentifierList ID','FieldDecl',4,'p_FieldDecl','parser.py',466),
  ('FieldDecl -> ID Type','FieldDecl',2,'p_FieldDecl','parser.py',467),
  ('FieldDecl -> ID ID','FieldDecl',2,'p_FieldDecl','parser.py',468),
  ('FieldDecl -> ID STRUCT MUL ID','FieldDecl',4,'p_FieldDecl','parser.py',469),
  ('FieldDecl -> ID COMMA IdentifierList STRUCT MUL ID','FieldDecl',6,'p_FieldDecl','parser.py',470),
  ('PointerType -> MUL Type','PointerType',2,'p_PointerType','parser.py',539),
  ('PointerType -> MUL ID','PointerType',2,'p_PointerType','parser.py',540),
  ('Signature -> Parameters Result','Signature',2,'p_Signature','parser.py',557),
  ('Result -> LPAREN TypeList RPAREN','Result',3,'p_Result','parser.py',563),
  ('Result -> <empty>','Result',0,'p_Result','parser.py',564),
  ('TypeList -> ID','TypeList',1,'p_TypeList','parser.py',573),
  ('TypeList -> Type','TypeList',1,'p_TypeList','parser.py',574),
  ('TypeList -> TypeList COMMA ID','TypeList',3,'p_TypeList','parser.py',575),
  ('TypeList -> TypeList COMMA Type','TypeList',3,'p_TypeList','parser.py',576),
  ('Parameters -> LPAREN RPAREN','Parameters',2,'p_Parameters','parser.py',598),
  ('Parameters -> LPAREN ParameterList RPAREN','Parameters',3,'p_Parameters','parser.py',599),
  ('Parameters -> LPAREN ParameterList COMMA RPAREN','Parameters',4,'p_Parameters','parser.py',600),
  ('ParameterList -> ParameterDecl','ParameterList',1,'p_ParameterList','parser.py',611),
  ('ParameterList -> ParameterList COMMA ParameterDecl','ParameterList',3,'p_ParameterList','parser.py',612),
  ('ParameterDecl -> ParaIdList Type','ParameterDecl',2,'p_ParameterDecl','parser.py',623),
  ('ParameterDecl -> ID Type','ParameterDecl',2,'p_ParameterDecl','parser.py',624),
  ('ParameterDecl -> ParaIdList ID','ParameterDecl',2,'p_ParameterDecl','parser.py',625),
  ('ParameterDecl -> ID ID','ParameterDecl',2,'p_ParameterDecl','parser.py',626),
  ('ParaIdList -> ID COMMA ID','ParaIdList',3,'p_ParaIdList','parser.py',657),
  ('ParaIdList -> ParaIdList COMMA ID','ParaIdList',3,'p_ParaIdList','parser.py',658),
  ('Block -> LBRACE StatementList RBRACE','Block',3,'p_Block','parser.py',670),
  ('StatementList -> Statement_curl','StatementList',1,'p_StatementList','parser.py',675),
  ('Statement_curl -> Statement_curl Statement SEMICOLON','Statement_curl',3,'p_Statement_curl','parser.py',680),
  ('Statement_curl -> <empty>','Statement_curl',0,'p_Statement_curl','parser.py',681),
  ('Expression -> UnaryExpr','Expression',1,'p_Expression','parser.py',686),
  ('Expression -> Expression BinaryOp UnaryExpr','Expression',3,'p_Expression','parser.py',687),
  ('UnaryExpr -> PrimaryExpr','UnaryExpr',1,'p_UnaryExpr','parser.py',703),
  ('UnaryExpr -> UnaryOp UnaryExpr','UnaryExpr',2,'p_UnaryExpr','parser.py',704),
  ('BinaryOp -> LOR','BinaryOp',1,'p_BinaryOp','parser.py',723),
  ('BinaryOp -> LAND','BinaryOp',1,'p_BinaryOp','parser.py',724),
  ('BinaryOp -> RelOp','BinaryOp',1,'p_BinaryOp','parser.py',725),
  ('BinaryOp -> AddOp','BinaryOp',1,'p_BinaryOp','parser.py',726),
  ('BinaryOp -> MulOp','BinaryOp',1,'p_BinaryOp','parser.py',727),
  ('RelOp -> EQL','RelOp',1,'p_RelOp','parser.py',737),
  ('RelOp -> NEQ','RelOp',1,'p_RelOp','parser.py',738),
  ('RelOp -> LTN','RelOp',1,'p_RelOp','parser.py',739),
  ('RelOp -> LEQ','RelOp',1,'p_RelOp','parser.py',740),
  ('RelOp -> GTN','RelOp',1,'p_RelOp','parser.py',741),
  ('RelOp -> GEQ','RelOp',1,'p_RelOp','parser.py',742),
  ('AddOp -> ADD','AddOp',1,'p_AddOp','parser.py',750),
  ('AddOp -> SUB','AddOp',1,'p_AddOp','parser.py',751),
  ('AddOp -> OR','AddOp',1,'p_AddOp','parser.py',752),
  ('AddOp -> XOR','AddOp',1,'p_AddOp','parser.py',753),
  ('MulOp -> MUL','MulOp',1,'p_MulOp','parser.py',760),
  ('MulOp -> DIV','MulOp',1,'p_MulOp','parser.py',761),
  ('MulOp -> MOD','MulOp',1,'p_MulOp','parser.py',762),
  ('MulOp -> SHL','MulOp',1,'p_MulOp','parser.py',763),
  ('MulOp -> SHR','MulOp',1,'p_MulOp','parser.py',764),
  ('MulOp -> AND','MulOp',1,'p_MulOp','parser.py',765),
  ('MulOp -> AND_NOT','MulOp',1,'p_MulOp','parser.py',766),
  ('UnaryOp -> ADD','UnaryOp',1,'p_UnaryOp','parser.py',773),
  ('UnaryOp -> SUB','UnaryOp',1,'p_UnaryOp','parser.py',774),
  ('UnaryOp -> NOT','UnaryOp',1,'p_UnaryOp','parser.py',775),
  ('UnaryOp -> XOR','UnaryOp',1,'p_UnaryOp','parser.py',776),
  ('UnaryOp -> MUL','UnaryOp',1,'p_UnaryOp','parser.py',777),
  ('UnaryOp -> AND','UnaryOp',1,'p_UnaryOp','parser.py',778),
  ('PrimaryExpr -> Literal','PrimaryExpr',1,'p_PrimaryExpr','parser.py',786),
  ('PrimaryExpr -> ID','PrimaryExpr',1,'p_PrimaryExpr','parser.py',787),
  ('PrimaryExpr -> PrimaryExpr DOT ID','PrimaryExpr',3,'p_PrimaryExpr','parser.py',788),
  ('PrimaryExpr -> LPAREN Expression RPAREN','PrimaryExpr',3,'p_PrimaryExpr','parser.py',789),
  ('PrimaryExpr -> PrimaryExpr Index','PrimaryExpr',2,'p_PrimaryExpr','parser.py',790),
  ('PrimaryExpr -> PrimaryExpr Slice','PrimaryExpr',2,'p_PrimaryExpr','parser.py',791),
  ('PrimaryExpr -> PrimaryExpr Arguments','PrimaryExpr',2,'p_PrimaryExpr','parser.py',792),
  ('Index -> LBRACK Expression RBRACK','Index',3,'p_Index','parser.py',845),
  ('Slice -> LBRACK Expression COLON Expression RBRACK','Slice',5,'p_Slice','parser.py',854),
  ('Slice -> LBRACK COLON Expression RBRACK','Slice',4,'p_Slice','parser.py',855),
  ('Slice -> LBRACK Expression COLON RBRACK','Slice',4,'p_Slice','parser.py',856),
  ('Slice -> LBRACK COLON RBRACK','Slice',3,'p_Slice','parser.py',857),
  ('Slice -> LBRACK Expression COLON Expression COLON Expression RBRACK','Slice',7,'p_Slice','parser.py',858),
  ('Slice -> LBRACK COLON Expression COLON Expression RBRACK','Slice',6,'p_Slice','parser.py',859),
  ('Arguments -> LPAREN RPAREN','Arguments',2,'p_Arguments','parser.py',865),
  ('Arguments -> LPAREN ExpressionList RPAREN','Arguments',3,'p_Arguments','parser.py',866),
  ('Arguments -> LPAREN ExpressionList COMMA RPAREN','Arguments',4,'p_Arguments','parser.py',867),
  ('Literal -> BasicLit','Literal',1,'p_Literal','parser.py',888),
  ('BasicLit -> IntLit','BasicLit',1,'p_BasicLit','parser.py',894),
  ('BasicLit -> FloatLit','BasicLit',1,'p_BasicLit','parser.py',895),
  ('BasicLit -> RuneLit','BasicLit',1,'p_BasicLit','parser.py',896),
  ('BasicLit -> StringLit','BasicLit',1,'p_BasicLit','parser.py',897),
  ('BasicLit -> TrueLit','BasicLit',1,'p_BasicLit','parser.py',898),
  ('BasicLit -> FalseLit','BasicLit',1,'p_BasicLit','parser.py',899),
  ('TrueLit -> TRUE','TrueLit',1,'p_TrueLit','parser.py',905),
  ('FalseLit -> FALSE','FalseLit',1,'p_FalseLit','parser.py',912),
  ('IntLit -> INT','IntLit',1,'p_IntLit','parser.py',919),
  ('FloatLit -> FLOAT','FloatLit',1,'p_FloatLit','parser.py',926),
  ('RuneLit -> RUNE','RuneLit',1,'p_RuneLit','parser.py',933),
  ('StringLit -> STRING','StringLit',1,'p_StringLit','parser.py',940),
  ('Statement -> Declaration','Statement',1,'p_Statement','parser.py',947),
  ('Statement -> LabelledStmt','Statement',1,'p_Statement','parser.py',948),
  ('Statement -> SimpleStmt','Statement',1,'p_Statement','parser.py',949),
  ('Statement -> ReturnStmt','Statement',1,'p_Statement','parser.py',950),
  ('Statement -> BreakStmt','Statement',1,'p_Statement','parser.py',951),
  ('Statement -> ContinueStmt','Statement',1,'p_Statement','parser.py',952),
  ('Statement -> GotoStmt','Statement',1,'p_Statement','parser.py',953),
  ('Statement -> FallthroughStmt','Statement',1,'p_Statement','parser.py',954),
  ('Statement -> IfStmt','Statement',1,'p_Statement','parser.py',955),
  ('Statement -> OpenS Block CloseS','Statement',3,'p_Statement','parser.py',956),
  ('Statement -> SwitchStmt','Statement',1,'p_Statement','parser.py',957),
  ('Statement -> ForStmt','Statement',1,'p_Statement','parser.py',958),
  ('SimpleStmt -> Expression','SimpleStmt',1,'p_SimpleStmt','parser.py',963),
  ('SimpleStmt -> IncDecStmt','SimpleStmt',1,'p_SimpleStmt','parser.py',964),
  ('SimpleStmt -> Assignment','SimpleStmt',1,'p_SimpleStmt','parser.py',965),
  ('SimpleStmt -> ShortVarDecl','SimpleStmt',1,'p_SimpleStmt','parser.py',966),
  ('SimpleStmt -> <empty>','SimpleStmt',0,'p_SimpleStmt','parser.py',967),
  ('IncDecStmt -> Expression INC','IncDecStmt',2,'p_IncDecStmt','parser.py',978),
  ('IncDecStmt -> Expression DEC','IncDecStmt',2,'p_IncDecStmt','parser.py',979),
  ('Assignment -> ExpressionList AssignOp ExpressionList','Assignment',3,'p_Assignment','parser.py',986),
  ('AssignOp -> ADD_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',999),
  ('AssignOp -> SUB_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1000),
  ('AssignOp -> MUL_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1001),
  ('AssignOp -> DIV_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1002),
  ('AssignOp -> MOD_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1003),
  ('AssignOp -> AND_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1004),
  ('AssignOp -> AND_NOT_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1005),
  ('AssignOp -> OR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1006),
  ('AssignOp -> XOR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1007),
  ('AssignOp -> SHL_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1008),
  ('AssignOp -> SHR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1009),
  ('AssignOp -> ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1010),
  ('LabelledStmt -> ID COLON Statement','LabelledStmt',3,'p_LabelledStmt','parser.py',1017),
  ('ReturnStmt -> RETURN ExpressionList','ReturnStmt',2,'p_ReturnStmt','parser.py',1022),
  ('ReturnStmt -> RETURN','ReturnStmt',1,'p_ReturnStmt','parser.py',1023),
  ('BreakStmt -> BREAK ID','BreakStmt',2,'p_BreakStmt','parser.py',1032),
  ('BreakStmt -> BREAK','BreakStmt',1,'p_BreakStmt','parser.py',1033),
  ('ContinueStmt -> CONTINUE ID','ContinueStmt',2,'p_ContinueStmt','parser.py',1040),
  ('ContinueStmt -> CONTINUE','ContinueStmt',1,'p_ContinueStmt','parser.py',1041),
  ('GotoStmt -> GOTO ID','GotoStmt',2,'p_GotoStmt','parser.py',1048),
  ('FallthroughStmt -> FALLTHROUGH','FallthroughStmt',1,'p_FallthroughStmt','parser.py',1053),
  ('ShortVarDecl -> IdentifierList DEFINE ExpressionList','ShortVarDecl',3,'p_ShortVarDecl','parser.py',1058),
  ('IfStmt -> IF OpenS Expression Block CloseS','IfStmt',5,'p_IfStmt','parser.py',1076),
  ('IfStmt -> IF OpenS Expression Block CloseS ELSE IfStmt','IfStmt',7,'p_IfStmt','parser.py',1077),
  ('IfStmt -> IF OpenS Expression Block CloseS ELSE OpenS Block CloseS','IfStmt',9,'p_IfStmt','parser.py',1078),
  ('SwitchStmt -> ExprSwitchStmt','SwitchStmt',1,'p_SwitchStmt','parser.py',1085),
  ('ExprSwitchStmt -> SWITCH ExpressionName LBRACE OpenW ExprCaseClause_curl CloseW RBRACE','ExprSwitchStmt',7,'p_ExprSwitchStmt','parser.py',1090),
  ('ExpressionName -> Expression','ExpressionName',1,'p_ExpressionName','parser.py',1095),
  ('ExprCaseClause_curl -> ExprCaseClause_curl ExprCaseClause','ExprCaseClause_curl',2,'p_ExprCaseClause_curl','parser.py',1106),
  ('ExprCaseClause_curl -> DefCaseClause','ExprCaseClause_curl',1,'p_ExprCaseClause_curl','parser.py',1107),
  ('ExprCaseClause_curl -> <empty>','ExprCaseClause_curl',0,'p_ExprCaseClause_curl','parser.py',1108),
  ('ExprCaseClause -> OpenS ExprSwitchCase COLON StatementList CloseS','ExprCaseClause',5,'p_ExprCaseClause','parser.py',1113),
  ('ExprSwitchCase -> CASE Expression','ExprSwitchCase',2,'p_ExprSwitchCase','parser.py',1118),
  ('DefCaseClause -> OpenS DEFAULT COLON StatementList CloseS','DefCaseClause',5,'p_DefCaseClause','parser.py',1129),
  ('ForStmt -> FOR OpenS OpenF Expression Block CloseF CloseS','ForStmt',7,'p_ForStmt','parser.py',1134),
  ('ForStmt -> FOR OpenS OpenF ForClause Block CloseF CloseS','ForStmt',7,'p_ForStmt','parser.py',1135),
  ('ForStmt -> FOR OpenS OpenF Block CloseF CloseS','ForStmt',6,'p_ForStmt','parser.py',1136),
  ('OpenF -> <empty>','OpenF',0,'p_OpenF','parser.py',1146),
  ('CloseF -> <empty>','CloseF',0,'p_CloseF','parser.py',1153),
  ('OpenW -> <empty>','OpenW',0,'p_OpenW','parser.py',1160),
  ('CloseW -> <empty>','CloseW',0,'p_CloseW','parser.py',1167),
  ('ForClause -> SimpleStmt SEMICOLON SEMICOLON SimpleStmt','ForClause',4,'p_ForClause','parser.py',1174),
  ('ForClause -> SimpleStmt SEMICOLON Expression SEMICOLON SimpleStmt','ForClause',5,'p_ForClause','parser.py',1175),
]

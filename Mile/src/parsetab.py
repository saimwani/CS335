
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLPARENleftLBRACEleftIDleftDEFINEleftCOMMAleftLBRACKleftRBRACKleftDOTleftSEMICOLONleftCOLONleftINTleftFLOATleftSTRINGleftBREAKleftCONTINUEleftRETURNleftLORleftLANDleftEQLNEQLTNLEQGTNGEQleftADDSUBORXORleftMULDIVMODANDAND_NOTSHLSHRADD ADD_ASSIGN AND AND_ASSIGN AND_NOT AND_NOT_ASSIGN ASSIGN BREAK CASE COLON COMMA CONST CONTINUE DEC DEFAULT DEFINE DIV DIV_ASSIGN DOT ELSE EQL FALLTHROUGH FALSE FLOAT FOR FUNC GEQ GOTO GTN ID IF IMPORT INC INT LAND LBRACE LBRACK LEQ LOR LPAREN LTN MOD MOD_ASSIGN MUL MUL_ASSIGN NEQ NOT OR OR_ASSIGN PACKAGE RBRACE RBRACK RETURN RPAREN RUNE SEMICOLON SHL SHL_ASSIGN SHR SHR_ASSIGN STRING STRUCT SUB SUB_ASSIGN SWITCH TRUE TYPE VAR XOR XOR_ASSIGN\n    SourceFile : PackageClause SEMICOLON ImportDecl_curl TopLevelDecl_curl\n    OpenS : CloseS : OpenStructS : CloseStructS : \n    TopLevelDecl_curl : TopLevelDecl_curl TopLevelDecl SEMICOLON\n                    |\n    \n    ImportDecl_curl : ImportDecl_curl ImportDecl SEMICOLON\n                  |\n    \n    PackageClause : PACKAGE ID\n    \n    ImportDecl : IMPORT ImportSpec\n               | IMPORT LPAREN ImportSpec_curl RPAREN\n    \n    ImportSpec_curl : ImportSpec_curl ImportSpec SEMICOLON\n                    |\n    \n    ImportSpec : DOT ImportPath\n               | ID ImportPath\n               | ImportPath\n    \n    ImportPath : STRING\n    \n    TopLevelDecl : Declaration\n                 | FunctionDecl\n    \n    Declaration : ConstDecl\n                | StructDecl\n                | VarDecl\n    \n    ConstDecl : CONST ConstSpec\n              | CONST LPAREN ConstSpec_curl RPAREN\n    \n    ConstSpec_curl : ConstSpec_curl ConstSpec SEMICOLON\n                   |\n    \n    ConstSpec : IdentifierList ID ASSIGN ExpressionList\n    \n    IdentifierList : ID\n                   | ID COMMA IdentifierList\n    \n    ExpressionList : Expression\n                   | ExpressionList COMMA Expression\n    \n    StructDecl : TYPE StructName StructType \n    \n    StructName : ID\n    \n    VarDecl : VAR VarSpec\n            | VAR LPAREN VarSpec_curl RPAREN\n    \n    VarSpec_curl : VarSpec_curl VarSpec SEMICOLON\n                 |\n    \n    VarSpec : IdentifierList Type ASSIGN ExpressionList\n            | IdentifierList ID ASSIGN ExpressionList\n            | IdentifierList ASSIGN ExpressionList\n            | IdentifierList ID\n            | IdentifierList Type\n    \n    FunctionDecl : FUNC FuncName OpenS Signature Block CloseS\n    \n    FuncName : ID \n    \n    Type : LPAREN Type RPAREN\n         | LPAREN ID RPAREN\n         | TypeLit\n    \n    TypeLit : ArrayType\n            | PointerType\n            | SliceType\n    \n    ArrayType : LBRACK INT RBRACK Type\n              | LBRACK INT RBRACK ID\n    \n    SliceType : LBRACK RBRACK Type\n              | LBRACK RBRACK ID\n    \n    StructType : STRUCT OpenStructS LBRACE FieldDecl_curl RBRACE CloseStructS\n    \n    FieldDecl_curl : FieldDecl_curl FieldDecl SEMICOLON\n                   |\n    \n    FieldDecl : ID COMMA IdentifierList Type\n              | ID COMMA IdentifierList ID\n              | ID Type\n              | ID ID\n              | ID STRUCT MUL ID\n              | ID COMMA IdentifierList STRUCT MUL ID\n    \n    PointerType : MUL Type\n                | MUL ID\n    \n    Signature : Parameters Result\n    \n    Result : LPAREN TypeList RPAREN\n           |\n    \n    TypeList : ID\n             | Type\n             | TypeList COMMA ID\n             | TypeList COMMA Type\n    \n    Parameters : LPAREN RPAREN\n               | LPAREN ParameterList RPAREN\n               | LPAREN ParameterList COMMA RPAREN\n    \n    ParameterList : ParameterDecl\n                  | ParameterList COMMA ParameterDecl\n    \n    ParameterDecl : ParaIdList Type\n                  | ID Type\n                  | ParaIdList ID\n                  | ID ID\n    \n    ParaIdList : ID COMMA ID\n               | ParaIdList COMMA ID\n    \n    Block : LBRACE StatementList RBRACE \n    \n    StatementList : Statement_curl\n    \n    Statement_curl : Statement_curl Statement SEMICOLON\n                   |\n    \n    Expression : UnaryExpr\n               | Expression BinaryOp UnaryExpr\n    \n    UnaryExpr : PrimaryExpr\n              | UnaryOp UnaryExpr\n    \n    BinaryOp : LOR\n             | LAND\n             | RelOp\n             | AddOp\n             | MulOp\n    \n    RelOp : EQL\n          | NEQ\n          | LTN\n          | LEQ\n          | GTN\n          | GEQ\n    \n    AddOp : ADD\n          | SUB\n          | OR\n          | XOR\n    \n    MulOp : MUL\n          | DIV\n          | MOD\n          | SHL\n          | SHR\n          | AND\n          | AND_NOT\n    \n    UnaryOp : ADD\n            | SUB\n            | NOT\n            | XOR\n            | MUL\n            | AND\n    \n    PrimaryExpr : Literal\n                | ID\n                | ID DOT ID\n                | LPAREN Expression RPAREN\n                | PrimaryExpr Index\n                | PrimaryExpr Slice\n                | PrimaryExpr Arguments\n    \n    Index : LBRACK Expression RBRACK\n    \n    Slice : LBRACK Expression COLON Expression RBRACK\n          | LBRACK COLON Expression RBRACK\n          | LBRACK Expression COLON RBRACK\n          | LBRACK COLON RBRACK\n          | LBRACK Expression COLON Expression COLON Expression RBRACK\n          | LBRACK COLON Expression COLON Expression RBRACK\n    \n    Arguments : LPAREN RPAREN\n              | LPAREN ExpressionList RPAREN\n              | LPAREN ExpressionList COMMA RPAREN\n    \n    Literal : BasicLit\n    \n    BasicLit : IntLit \n             | FloatLit\n             | RuneLit\n             | StringLit\n             | TrueLit\n             | FalseLit\n    \n    TrueLit : TRUE\n    \n    FalseLit : FALSE\n    \n    IntLit : INT\n    \n    FloatLit : FLOAT\n    \n    RuneLit : RUNE\n    \n    StringLit : STRING\n    \n    Statement : Declaration\n              | LabelledStmt\n              | SimpleStmt\n              | ReturnStmt\n              | BreakStmt\n              | ContinueStmt\n              | GotoStmt\n              | FallthroughStmt\n              | IfStmt\n              | OpenS Block CloseS\n              | SwitchStmt\n              | ForStmt\n    \n    SimpleStmt : Expression\n               | IncDecStmt\n               | Assignment\n               | ShortVarDecl\n               |\n    \n    IncDecStmt : Expression INC\n               | Expression DEC\n    \n    Assignment : ExpressionList AssignOp ExpressionList\n    \n    AssignOp : ADD_ASSIGN\n             | SUB_ASSIGN\n             | MUL_ASSIGN\n             | DIV_ASSIGN\n             | MOD_ASSIGN\n             | AND_ASSIGN\n             | AND_NOT_ASSIGN\n             | OR_ASSIGN\n             | XOR_ASSIGN\n             | SHL_ASSIGN\n             | SHR_ASSIGN\n             | ASSIGN\n    \n    LabelledStmt : ID COLON Statement\n    \n    ReturnStmt : RETURN ExpressionList\n               | RETURN\n    \n    BreakStmt : BREAK ID\n              | BREAK\n    \n    ContinueStmt : CONTINUE ID\n                 | CONTINUE\n    \n    GotoStmt : GOTO ID\n    \n    FallthroughStmt : FALLTHROUGH\n    \n    ShortVarDecl : IdentifierList DEFINE ExpressionList\n    \n    IfStmt : IF OpenS Expression Block CloseS \n           | IF OpenS Expression Block CloseS ELSE IfStmt\n           | IF OpenS Expression Block CloseS ELSE OpenS Block CloseS \n    \n    SwitchStmt : ExprSwitchStmt\n    \n    ExprSwitchStmt : SWITCH ExpressionName LBRACE ExprCaseClause_curl RBRACE \n    \n    ExpressionName : Expression\n    \n    ExprCaseClause_curl : ExprCaseClause_curl ExprCaseClause\n                        | DefCaseClause\n                        |\n    \n    ExprCaseClause : OpenS ExprSwitchCase COLON StatementList CloseS\n    \n    ExprSwitchCase : CASE Expression\n    \n    DefCaseClause : OpenS DEFAULT COLON StatementList CloseS\n    \n    ForStmt : FOR OpenS Expression Block CloseS      \n            | FOR OpenS ForClause Block CloseS \n            | FOR OpenS Block CloseS  \n    \n    ForClause : SimpleStmt SEMICOLON SEMICOLON SimpleStmt\n              | SimpleStmt SEMICOLON Expression SEMICOLON SimpleStmt\n    '
    
_lr_action_items = {'RETURN':([116,170,231,238,315,320,],[-88,196,-87,196,-88,-88,]),'CONST':([4,6,7,26,31,116,170,231,238,315,320,],[-9,-7,10,-8,-6,-88,10,-87,10,-88,-88,]),'FUNC':([4,6,7,26,31,],[-9,-7,15,-8,-6,]),'DEFAULT':([277,291,],[-2,306,]),'GOTO':([116,170,231,238,315,320,],[-88,195,-87,195,-88,-88,]),'SHL_ASSIGN':([74,75,76,78,79,80,82,83,84,85,89,91,93,94,95,96,98,122,123,124,126,177,179,180,181,182,205,208,209,220,223,224,259,260,262,273,274,282,293,308,311,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,-135,-32,-124,-90,-123,-122,249,-31,-132,-128,-136,-130,-131,-137,-31,-122,-129,-134,-133,-122,]),'LOR':([74,75,76,78,79,80,82,83,84,85,89,90,91,93,94,95,96,98,122,123,124,126,129,176,177,179,180,181,182,205,209,220,221,223,224,240,259,260,261,262,273,274,279,280,282,293,294,300,308,311,319,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,131,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,131,131,-135,131,-124,-90,-123,-122,131,-132,131,-128,-136,131,-130,-131,131,-137,131,-122,131,131,-129,-134,131,131,-133,-122,131,]),'COLON':([74,75,76,78,79,80,82,83,84,85,89,91,93,94,95,96,98,122,123,124,125,126,176,177,180,181,182,205,220,221,223,224,259,260,261,262,282,293,306,308,314,319,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-122,-146,-147,-148,-142,-143,-92,-125,-126,175,-127,222,-135,-124,-90,-123,238,-132,258,-128,-136,-130,-131,281,-137,-129,-134,315,-133,320,-203,]),'DIV_ASSIGN':([74,75,76,78,79,80,82,83,84,85,89,91,93,94,95,96,98,122,123,124,126,177,179,180,181,182,205,208,209,220,223,224,259,260,262,273,274,282,293,308,311,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,-135,-32,-124,-90,-123,-122,251,-31,-132,-128,-136,-130,-131,-137,-31,-122,-129,-134,-133,-122,]),'MUL':([30,36,50,51,53,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,92,93,94,95,96,97,98,103,104,111,113,114,116,119,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,170,175,176,177,179,180,181,182,186,187,189,196,200,205,206,209,217,220,221,222,223,224,225,227,231,235,236,238,240,241,242,243,244,245,246,247,248,249,250,251,252,253,257,258,259,260,261,262,264,273,274,279,280,281,282,284,285,293,294,296,299,300,308,311,312,313,315,319,320,],[-29,53,77,53,53,77,-30,53,-116,77,-144,-121,-139,-119,-145,-138,-149,-118,-150,-89,-140,-91,-115,77,-141,132,-122,-120,-146,-147,-148,-142,-117,-143,77,77,53,53,53,-88,53,-92,-125,-126,77,-127,77,77,132,-105,-93,-108,-109,-99,-103,-94,-114,77,-96,-112,-107,-97,-102,-104,-98,-111,-100,-113,-95,-101,-106,-110,77,77,132,-135,132,-124,-90,-123,-84,-83,53,77,-2,-122,77,132,-2,-132,132,77,-128,-136,77,53,-87,77,77,77,132,-172,77,-173,-179,-182,-181,-178,-175,-180,-176,-174,-171,-177,77,77,-130,-131,132,-137,283,132,-122,132,132,77,-129,53,77,-134,132,309,77,132,-133,-122,77,77,-88,132,-88,]),'DIV':([74,75,76,78,79,80,82,83,84,85,89,90,91,93,94,95,96,98,122,123,124,126,129,176,177,179,180,181,182,205,209,220,221,223,224,240,259,260,261,262,273,274,279,280,282,293,294,300,308,311,319,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,133,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,133,133,-135,133,-124,-90,-123,-122,133,-132,133,-128,-136,133,-130,-131,133,-137,133,-122,133,133,-129,-134,133,133,-133,-122,133,]),'RUNE':([50,63,72,73,77,81,86,88,92,97,103,104,116,125,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,170,175,196,200,206,217,222,225,231,235,236,238,241,242,243,244,245,246,247,248,249,250,251,252,253,257,258,281,285,299,312,313,315,320,],[80,80,-116,80,-119,-118,-115,80,-120,-117,80,80,-88,80,80,80,-105,-93,-108,-109,-99,-103,-94,-114,80,-96,-112,-107,-97,-102,-104,-98,-111,-100,-113,-95,-101,-106,-110,80,80,80,-2,80,-2,80,80,-87,80,80,80,-172,80,-173,-179,-182,-181,-178,-175,-180,-176,-174,-171,-177,80,80,80,80,80,80,80,-88,-88,]),'TRUE':([50,63,72,73,77,81,86,88,92,97,103,104,116,125,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,170,175,196,200,206,217,222,225,231,235,236,238,241,242,243,244,245,246,247,248,249,250,251,252,253,257,258,281,285,299,312,313,315,320,],[78,78,-116,78,-119,-118,-115,78,-120,-117,78,78,-88,78,78,78,-105,-93,-108,-109,-99,-103,-94,-114,78,-96,-112,-107,-97,-102,-104,-98,-111,-100,-113,-95,-101,-106,-110,78,78,78,-2,78,-2,78,78,-87,78,78,78,-172,78,-173,-179,-182,-181,-178,-175,-180,-176,-174,-171,-177,78,78,78,78,78,78,78,-88,-88,]),'DOT':([8,23,39,91,106,205,274,311,],[25,-14,25,153,-13,153,153,153,]),'SUB':([50,63,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,92,93,94,95,96,97,98,103,104,116,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,170,175,176,177,179,180,181,182,196,200,205,206,209,217,220,221,222,223,224,225,231,235,236,238,240,241,242,243,244,245,246,247,248,249,250,251,252,253,257,258,259,260,261,262,273,274,279,280,281,282,285,293,294,299,300,308,311,312,313,315,319,320,],[72,72,-116,72,-144,-121,-139,-119,-145,-138,-149,-118,-150,-89,-140,-91,-115,72,-141,130,-122,-120,-146,-147,-148,-142,-117,-143,72,72,-88,-92,-125,-126,72,-127,72,72,130,-105,-93,-108,-109,-99,-103,-94,-114,72,-96,-112,-107,-97,-102,-104,-98,-111,-100,-113,-95,-101,-106,-110,72,72,130,-135,130,-124,-90,-123,72,-2,-122,72,130,-2,-132,130,72,-128,-136,72,-87,72,72,72,130,-172,72,-173,-179,-182,-181,-178,-175,-180,-176,-174,-171,-177,72,72,-130,-131,130,-137,130,-122,130,130,72,-129,72,-134,130,72,130,-133,-122,72,72,-88,130,-88,]),'CASE':([170,231,277,289,290,304,305,315,320,321,324,325,327,],[-86,-87,-201,-200,-2,-199,313,-88,-88,-3,-3,-204,-202,]),'BREAK':([116,170,231,238,315,320,],[-88,210,-87,210,-88,-88,]),'GEQ':([74,75,76,78,79,80,82,83,84,85,89,90,91,93,94,95,96,98,122,123,124,126,129,176,177,179,180,181,182,205,209,220,221,223,224,240,259,260,261,262,273,274,279,280,282,293,294,300,308,311,319,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,135,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,135,135,-135,135,-124,-90,-123,-122,135,-132,135,-128,-136,135,-130,-131,135,-137,135,-122,135,135,-129,-134,135,135,-133,-122,135,]),'DEC':([74,75,76,78,79,80,82,83,84,85,89,91,93,94,95,96,98,122,123,124,126,177,180,181,182,205,209,220,223,224,259,260,262,273,274,282,293,308,311,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,-135,-124,-90,-123,-122,254,-132,-128,-136,-130,-131,-137,254,-122,-129,-134,-133,-122,]),'RPAREN':([23,28,35,39,42,46,47,49,52,56,65,74,75,76,78,79,80,82,83,84,85,89,90,91,93,94,95,96,98,99,100,101,102,106,107,110,112,118,120,121,122,123,124,126,127,129,154,155,159,162,163,164,166,167,168,169,173,174,177,178,179,180,181,182,185,220,223,224,225,229,230,259,260,262,282,293,308,],[-14,-27,-38,59,61,68,-48,-49,-50,-51,109,-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-31,-122,-146,-147,-148,-142,-143,154,155,-65,-66,-13,-26,160,-77,-37,-54,-55,-92,-125,-126,-127,177,180,-46,-47,184,-79,-81,-80,-82,188,-71,-70,-52,-53,-135,224,-32,-124,-90,-123,-78,-132,-128,-136,262,-73,-72,-130,-131,-137,-129,-134,-133,]),'SEMICOLON':([1,5,9,11,12,13,14,17,18,20,21,22,27,34,40,41,47,49,52,54,55,56,57,59,60,61,62,68,69,74,75,76,78,79,80,82,83,84,85,87,89,90,91,93,94,95,96,98,101,102,108,116,117,120,121,122,123,124,126,154,155,156,157,170,172,173,174,177,179,180,181,182,190,191,192,193,196,197,199,200,201,202,203,204,205,207,209,210,211,212,213,214,215,216,218,219,220,223,224,226,228,231,232,233,234,236,237,238,254,255,256,259,260,262,266,267,268,269,270,271,273,274,275,276,278,282,285,286,287,288,292,293,295,297,298,300,301,302,303,307,308,315,317,320,323,326,328,],[4,-10,26,-22,-20,31,-19,-21,-23,-18,-11,-17,-24,-35,-16,-15,-48,-49,-50,-43,-42,-51,-33,-12,106,-25,107,-36,118,-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-41,-141,-31,-122,-146,-147,-148,-142,-143,-65,-66,-28,-88,-3,-54,-55,-92,-125,-126,-127,-46,-47,-39,-40,-167,-44,-52,-53,-135,-32,-124,-90,-123,-156,231,-159,-165,-185,-196,-157,-2,-152,-161,-189,-191,-122,-151,-163,-187,-154,-158,-153,-162,-164,-166,-155,-85,-132,-128,-136,263,-5,-87,-3,-190,-184,-167,-188,-167,-169,-168,-186,-130,-131,-137,-61,-62,-56,-160,-192,285,-163,-122,-3,-183,-170,-129,299,-3,-3,-207,-3,-134,-63,-59,-60,312,-206,-205,-197,-193,-133,-88,-64,-88,-194,-3,-195,]),'FALLTHROUGH':([116,170,231,238,315,320,],[-88,204,-87,204,-88,-88,]),'SHR_ASSIGN':([74,75,76,78,79,80,82,83,84,85,89,91,93,94,95,96,98,122,123,124,126,177,179,180,181,182,205,208,209,220,223,224,259,260,262,273,274,282,293,308,311,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,-135,-32,-124,-90,-123,-122,246,-31,-132,-128,-136,-130,-131,-137,-31,-122,-129,-134,-133,-122,]),'MOD':([74,75,76,78,79,80,82,83,84,85,89,90,91,93,94,95,96,98,122,123,124,126,129,176,177,179,180,181,182,205,209,220,221,223,224,240,259,260,261,262,273,274,279,280,282,293,294,300,308,311,319,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,152,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,152,152,-135,152,-124,-90,-123,-122,152,-132,152,-128,-136,152,-130,-131,152,-137,152,-122,152,152,-129,-134,152,152,-133,-122,152,]),'SWITCH':([116,170,231,238,315,320,],[-88,206,-87,206,-88,-88,]),'LTN':([74,75,76,78,79,80,82,83,84,85,89,90,91,93,94,95,96,98,122,123,124,126,129,176,177,179,180,181,182,205,209,220,221,223,224,240,259,260,261,262,273,274,279,280,282,293,294,300,308,311,319,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,147,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,147,147,-135,147,-124,-90,-123,-122,147,-132,147,-128,-136,147,-130,-131,147,-137,147,-122,147,147,-129,-134,147,147,-133,-122,147,]),'AND_NOT':([74,75,76,78,79,80,82,83,84,85,89,90,91,93,94,95,96,98,122,123,124,126,129,176,177,179,180,181,182,205,209,220,221,223,224,240,259,260,261,262,273,274,279,280,282,293,294,300,308,311,319,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,137,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,137,137,-135,137,-124,-90,-123,-122,137,-132,137,-128,-136,137,-130,-131,137,-137,137,-122,137,137,-129,-134,137,137,-133,-122,137,]),'AND_ASSIGN':([74,75,76,78,79,80,82,83,84,85,89,91,93,94,95,96,98,122,123,124,126,177,179,180,181,182,205,208,209,220,223,224,259,260,262,273,274,282,293,308,311,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,-135,-32,-124,-90,-123,-122,250,-31,-132,-128,-136,-130,-131,-137,-31,-122,-129,-134,-133,-122,]),'COMMA':([30,47,49,52,56,74,75,76,78,79,80,82,83,84,85,87,89,90,91,93,94,95,96,98,101,102,108,110,111,112,113,120,121,122,123,124,126,154,155,156,157,162,163,164,166,167,168,169,173,174,177,178,179,180,181,182,185,186,187,205,208,209,220,223,224,227,229,230,234,259,260,262,270,273,274,278,282,293,308,311,],[44,-48,-49,-50,-51,-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,128,-141,-31,-122,-146,-147,-148,-142,-143,-65,-66,128,159,161,-77,165,-54,-55,-92,-125,-126,-127,-46,-47,128,128,-79,-81,-80,-82,189,-71,-70,-52,-53,-135,225,-32,-124,-90,-123,-78,-84,-83,44,128,-31,-132,-128,-136,265,-73,-72,128,-130,-131,-137,128,-31,44,128,-129,-134,-133,44,]),'AND_NOT_ASSIGN':([74,75,76,78,79,80,82,83,84,85,89,91,93,94,95,96,98,122,123,124,126,177,179,180,181,182,205,208,209,220,223,224,259,260,262,273,274,282,293,308,311,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,-135,-32,-124,-90,-123,-122,253,-31,-132,-128,-136,-130,-131,-137,-31,-122,-129,-134,-133,-122,]),'IMPORT':([4,6,26,],[-9,8,-8,]),'NEQ':([74,75,76,78,79,80,82,83,84,85,89,90,91,93,94,95,96,98,122,123,124,126,129,176,177,179,180,181,182,205,209,220,221,223,224,240,259,260,261,262,273,274,279,280,282,293,294,300,308,311,319,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,134,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,134,134,-135,134,-124,-90,-123,-122,134,-132,134,-128,-136,134,-130,-131,134,-137,134,-122,134,134,-129,-134,134,134,-133,-122,134,]),'ASSIGN':([30,36,43,47,49,52,54,55,56,64,74,75,76,78,79,80,82,83,84,85,89,91,93,94,95,96,98,101,102,120,121,122,123,124,126,154,155,173,174,177,179,180,181,182,205,208,209,220,223,224,259,260,262,273,274,282,293,308,311,],[-29,50,63,-48,-49,-50,103,104,-51,-30,-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-122,-146,-147,-148,-142,-143,-65,-66,-54,-55,-92,-125,-126,-127,-46,-47,-52,-53,-135,-32,-124,-90,-123,-122,245,-31,-132,-128,-136,-130,-131,-137,-31,-122,-129,-134,-133,-122,]),'DEFINE':([30,64,198,205,274,311,],[-29,-30,235,-29,-29,-29,]),'SUB_ASSIGN':([74,75,76,78,79,80,82,83,84,85,89,91,93,94,95,96,98,122,123,124,126,177,179,180,181,182,205,208,209,220,223,224,259,260,262,273,274,282,293,308,311,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,-135,-32,-124,-90,-123,-122,241,-31,-132,-128,-136,-130,-131,-137,-31,-122,-129,-134,-133,-122,]),'SHR':([74,75,76,78,79,80,82,83,84,85,89,90,91,93,94,95,96,98,122,123,124,126,129,176,177,179,180,181,182,205,209,220,221,223,224,240,259,260,261,262,273,274,279,280,282,293,294,300,308,311,319,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,140,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,140,140,-135,140,-124,-90,-123,-122,140,-132,140,-128,-136,140,-130,-131,140,-137,140,-122,140,140,-129,-134,140,140,-133,-122,140,]),'XOR':([50,63,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,92,93,94,95,96,97,98,103,104,116,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,170,175,176,177,179,180,181,182,196,200,205,206,209,217,220,221,222,223,224,225,231,235,236,238,240,241,242,243,244,245,246,247,248,249,250,251,252,253,257,258,259,260,261,262,273,274,279,280,281,282,285,293,294,299,300,308,311,312,313,315,319,320,],[81,81,-116,81,-144,-121,-139,-119,-145,-138,-149,-118,-150,-89,-140,-91,-115,81,-141,141,-122,-120,-146,-147,-148,-142,-117,-143,81,81,-88,-92,-125,-126,81,-127,81,81,141,-105,-93,-108,-109,-99,-103,-94,-114,81,-96,-112,-107,-97,-102,-104,-98,-111,-100,-113,-95,-101,-106,-110,81,81,141,-135,141,-124,-90,-123,81,-2,-122,81,141,-2,-132,141,81,-128,-136,81,-87,81,81,81,141,-172,81,-173,-179,-182,-181,-178,-175,-180,-176,-174,-171,-177,81,81,-130,-131,141,-137,141,-122,141,141,81,-129,81,-134,141,81,141,-133,-122,81,81,-88,141,-88,]),'STRING':([8,23,24,25,39,50,63,72,73,77,81,86,88,92,97,103,104,106,116,125,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,170,175,196,200,206,217,222,225,231,235,236,238,241,242,243,244,245,246,247,248,249,250,251,252,253,257,258,281,285,299,312,313,315,320,],[20,-14,20,20,20,82,82,-116,82,-119,-118,-115,82,-120,-117,82,82,-13,-88,82,82,82,-105,-93,-108,-109,-99,-103,-94,-114,82,-96,-112,-107,-97,-102,-104,-98,-111,-100,-113,-95,-101,-106,-110,82,82,82,-2,82,-2,82,82,-87,82,82,82,-172,82,-173,-179,-182,-181,-178,-175,-180,-176,-174,-171,-177,82,82,82,82,82,82,82,-88,-88,]),'FOR':([116,170,231,238,315,320,],[-88,200,-87,200,-88,-88,]),'PACKAGE':([0,],[3,]),'RBRACK':([48,70,74,75,76,78,79,80,82,83,84,85,89,91,93,94,95,96,98,122,123,124,126,175,176,177,180,181,182,220,221,222,223,224,259,260,261,262,280,282,293,294,308,],[71,119,-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,220,223,-135,-124,-90,-123,-132,259,260,-128,-136,-130,-131,282,-137,293,-129,-134,308,-133,]),'GTN':([74,75,76,78,79,80,82,83,84,85,89,90,91,93,94,95,96,98,122,123,124,126,129,176,177,179,180,181,182,205,209,220,221,223,224,240,259,260,261,262,273,274,279,280,282,293,294,300,308,311,319,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,143,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,143,143,-135,143,-124,-90,-123,-122,143,-132,143,-128,-136,143,-130,-131,143,-137,143,-122,143,143,-129,-134,143,143,-133,-122,143,]),'ELSE':([219,292,307,],[-85,-3,316,]),'ADD':([50,63,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,92,93,94,95,96,97,98,103,104,116,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,170,175,176,177,179,180,181,182,196,200,205,206,209,217,220,221,222,223,224,225,231,235,236,238,240,241,242,243,244,245,246,247,248,249,250,251,252,253,257,258,259,260,261,262,273,274,279,280,281,282,285,293,294,299,300,308,311,312,313,315,319,320,],[86,86,-116,86,-144,-121,-139,-119,-145,-138,-149,-118,-150,-89,-140,-91,-115,86,-141,144,-122,-120,-146,-147,-148,-142,-117,-143,86,86,-88,-92,-125,-126,86,-127,86,86,144,-105,-93,-108,-109,-99,-103,-94,-114,86,-96,-112,-107,-97,-102,-104,-98,-111,-100,-113,-95,-101,-106,-110,86,86,144,-135,144,-124,-90,-123,86,-2,-122,86,144,-2,-132,144,86,-128,-136,86,-87,86,86,86,144,-172,86,-173,-179,-182,-181,-178,-175,-180,-176,-174,-171,-177,86,86,-130,-131,144,-137,144,-122,144,144,86,-129,86,-134,144,86,144,-133,-122,86,86,-88,144,-88,]),'LAND':([74,75,76,78,79,80,82,83,84,85,89,90,91,93,94,95,96,98,122,123,124,126,129,176,177,179,180,181,182,205,209,220,221,223,224,240,259,260,261,262,273,274,279,280,282,293,294,300,308,311,319,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,136,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,136,136,-135,136,-124,-90,-123,-122,136,-132,136,-128,-136,136,-130,-131,136,-137,136,-122,136,136,-129,-134,136,136,-133,-122,136,]),'EQL':([74,75,76,78,79,80,82,83,84,85,89,90,91,93,94,95,96,98,122,123,124,126,129,176,177,179,180,181,182,205,209,220,221,223,224,240,259,260,261,262,273,274,279,280,282,293,294,300,308,311,319,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,145,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,145,145,-135,145,-124,-90,-123,-122,145,-132,145,-128,-136,145,-130,-131,145,-137,145,-122,145,145,-129,-134,145,145,-133,-122,145,]),'LPAREN':([8,10,16,30,32,33,36,45,50,51,53,63,64,66,71,72,73,74,75,76,77,78,79,80,81,82,84,85,86,88,89,91,92,93,94,95,96,97,98,103,104,109,111,113,114,116,119,123,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,160,170,175,177,180,182,184,186,187,189,196,200,205,206,217,220,222,223,224,225,227,231,235,236,238,241,242,243,244,245,246,247,248,249,250,251,252,253,257,258,259,260,262,274,281,282,284,285,293,299,308,311,312,313,315,320,],[23,28,35,-29,-2,-45,51,65,88,51,51,88,-30,114,51,-116,88,-144,-121,-139,-119,-145,-138,-149,-118,-150,-140,127,-115,88,-141,-122,-120,-146,-147,-148,-142,-117,-143,88,88,-74,51,51,51,-88,51,-125,-126,88,-127,88,88,-105,-93,-108,-109,-99,-103,-94,-114,88,-96,-112,-107,-97,-102,-104,-98,-111,-100,-113,-95,-101,-106,-110,-75,88,88,-135,-124,-123,-76,-84,-83,51,88,-2,-122,88,-2,-132,88,-128,-136,88,51,-87,88,88,88,-172,88,-173,-179,-182,-181,-178,-175,-180,-176,-174,-171,-177,88,88,-130,-131,-137,-122,88,-129,51,88,-134,88,-133,-122,88,88,-88,-88,]),'VAR':([4,6,7,26,31,116,170,231,238,315,320,],[-9,-7,16,-8,-6,-88,16,-87,16,-88,-88,]),'SHL':([74,75,76,78,79,80,82,83,84,85,89,90,91,93,94,95,96,98,122,123,124,126,129,176,177,179,180,181,182,205,209,220,221,223,224,240,259,260,261,262,273,274,279,280,282,293,294,300,308,311,319,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,146,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,146,146,-135,146,-124,-90,-123,-122,146,-132,146,-128,-136,146,-130,-131,146,-137,146,-122,146,146,-129,-134,146,146,-133,-122,146,]),'ID':([3,8,10,15,16,19,23,28,29,30,35,36,39,42,44,46,50,51,53,63,64,65,71,72,73,77,81,86,88,92,97,103,104,106,107,111,113,114,116,118,119,125,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,158,159,161,165,170,175,183,186,187,189,195,196,200,203,206,210,217,222,225,227,231,235,236,238,241,242,243,244,245,246,247,248,249,250,251,252,253,257,258,263,265,281,283,284,285,299,309,312,313,315,320,],[5,24,30,33,30,38,-14,-27,43,-29,-38,55,24,30,30,30,91,100,102,91,-30,113,121,-116,91,-119,-118,-115,91,-120,-117,91,91,-13,-26,163,166,169,-88,-37,174,91,91,91,-105,-93,-108,-109,-99,-103,-94,-114,91,-96,-112,-107,-97,-102,-104,-98,-111,-100,-113,-95,-101,-106,-110,182,-58,113,186,187,205,91,227,-84,-83,230,233,91,-2,237,91,256,-2,91,91,267,-87,91,274,205,-172,91,-173,-179,-182,-181,-178,-175,-180,-176,-174,-171,-177,91,91,-57,30,91,295,298,91,311,317,311,91,-88,-88,]),'IF':([116,170,231,238,315,316,320,],[-88,217,-87,217,-88,217,-88,]),'AND':([50,63,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,92,93,94,95,96,97,98,103,104,116,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,170,175,176,177,179,180,181,182,196,200,205,206,209,217,220,221,222,223,224,225,231,235,236,238,240,241,242,243,244,245,246,247,248,249,250,251,252,253,257,258,259,260,261,262,273,274,279,280,281,282,285,293,294,299,300,308,311,312,313,315,319,320,],[92,92,-116,92,-144,-121,-139,-119,-145,-138,-149,-118,-150,-89,-140,-91,-115,92,-141,148,-122,-120,-146,-147,-148,-142,-117,-143,92,92,-88,-92,-125,-126,92,-127,92,92,148,-105,-93,-108,-109,-99,-103,-94,-114,92,-96,-112,-107,-97,-102,-104,-98,-111,-100,-113,-95,-101,-106,-110,92,92,148,-135,148,-124,-90,-123,92,-2,-122,92,148,-2,-132,148,92,-128,-136,92,-87,92,92,92,148,-172,92,-173,-179,-182,-181,-178,-175,-180,-176,-174,-171,-177,92,92,-130,-131,148,-137,148,-122,148,148,92,-129,92,-134,148,92,148,-133,-122,92,92,-88,148,-88,]),'MOD_ASSIGN':([74,75,76,78,79,80,82,83,84,85,89,91,93,94,95,96,98,122,123,124,126,177,179,180,181,182,205,208,209,220,223,224,259,260,262,273,274,282,293,308,311,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,-135,-32,-124,-90,-123,-122,248,-31,-132,-128,-136,-130,-131,-137,-31,-122,-129,-134,-133,-122,]),'LBRACE':([58,66,67,74,75,76,78,79,80,82,83,84,85,89,90,91,93,94,95,96,98,105,109,115,116,122,123,124,126,160,170,177,179,180,181,182,184,188,193,194,200,209,215,216,220,223,224,231,236,238,239,240,254,255,259,260,262,270,272,273,274,278,279,282,293,299,308,310,311,312,315,316,318,320,322,],[-4,-69,116,-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-31,-122,-146,-147,-148,-142,-143,158,-74,-67,-88,-92,-125,-126,-127,-75,-2,-135,-32,-124,-90,-123,-76,-68,-165,116,-2,-163,-164,-166,-132,-128,-136,-87,116,-2,277,-198,-169,-168,-130,-131,-137,-192,116,116,-122,-170,116,-129,-134,-167,-133,-208,-122,-167,-88,-2,-209,-88,116,]),'FALSE':([50,63,72,73,77,81,86,88,92,97,103,104,116,125,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,170,175,196,200,206,217,222,225,231,235,236,238,241,242,243,244,245,246,247,248,249,250,251,252,253,257,258,281,285,299,312,313,315,320,],[93,93,-116,93,-119,-118,-115,93,-120,-117,93,93,-88,93,93,93,-105,-93,-108,-109,-99,-103,-94,-114,93,-96,-112,-107,-97,-102,-104,-98,-111,-100,-113,-95,-101,-106,-110,93,93,93,-2,93,-2,93,93,-87,93,93,93,-172,93,-173,-179,-182,-181,-178,-175,-180,-176,-174,-171,-177,93,93,93,93,93,93,93,-88,-88,]),'STRUCT':([30,37,38,64,227,284,],[-29,58,-34,-30,264,296,]),'XOR_ASSIGN':([74,75,76,78,79,80,82,83,84,85,89,91,93,94,95,96,98,122,123,124,126,177,179,180,181,182,205,208,209,220,223,224,259,260,262,273,274,282,293,308,311,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,-135,-32,-124,-90,-123,-122,244,-31,-132,-128,-136,-130,-131,-137,-31,-122,-129,-134,-133,-122,]),'INT':([48,50,63,72,73,77,81,86,88,92,97,103,104,116,125,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,170,175,196,200,206,217,222,225,231,235,236,238,241,242,243,244,245,246,247,248,249,250,251,252,253,257,258,281,285,299,312,313,315,320,],[70,94,94,-116,94,-119,-118,-115,94,-120,-117,94,94,-88,94,94,94,-105,-93,-108,-109,-99,-103,-94,-114,94,-96,-112,-107,-97,-102,-104,-98,-111,-100,-113,-95,-101,-106,-110,94,94,94,-2,94,-2,94,94,-87,94,94,94,-172,94,-173,-179,-182,-181,-178,-175,-180,-176,-174,-171,-177,94,94,94,94,94,94,94,-88,-88,]),'FLOAT':([50,63,72,73,77,81,86,88,92,97,103,104,116,125,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,170,175,196,200,206,217,222,225,231,235,236,238,241,242,243,244,245,246,247,248,249,250,251,252,253,257,258,281,285,299,312,313,315,320,],[95,95,-116,95,-119,-118,-115,95,-120,-117,95,95,-88,95,95,95,-105,-93,-108,-109,-99,-103,-94,-114,95,-96,-112,-107,-97,-102,-104,-98,-111,-100,-113,-95,-101,-106,-110,95,95,95,-2,95,-2,95,95,-87,95,95,95,-172,95,-173,-179,-182,-181,-178,-175,-180,-176,-174,-171,-177,95,95,95,95,95,95,95,-88,-88,]),'OR_ASSIGN':([74,75,76,78,79,80,82,83,84,85,89,91,93,94,95,96,98,122,123,124,126,177,179,180,181,182,205,208,209,220,223,224,259,260,262,273,274,282,293,308,311,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,-135,-32,-124,-90,-123,-122,247,-31,-132,-128,-136,-130,-131,-137,-31,-122,-129,-134,-133,-122,]),'LBRACK':([30,36,51,53,64,71,74,75,76,78,79,80,82,84,85,89,91,93,94,95,96,98,111,113,114,119,123,124,126,177,180,182,186,187,189,205,220,223,224,227,259,260,262,274,282,284,293,308,311,],[-29,48,48,48,-30,48,-144,-121,-139,-145,-138,-149,-150,-140,125,-141,-122,-146,-147,-148,-142,-143,48,48,48,48,-125,-126,-127,-135,-124,-123,-84,-83,48,-122,-132,-128,-136,48,-130,-131,-137,-122,-129,48,-134,-133,-122,]),'ADD_ASSIGN':([74,75,76,78,79,80,82,83,84,85,89,91,93,94,95,96,98,122,123,124,126,177,179,180,181,182,205,208,209,220,223,224,259,260,262,273,274,282,293,308,311,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,-135,-32,-124,-90,-123,-122,252,-31,-132,-128,-136,-130,-131,-137,-31,-122,-129,-134,-133,-122,]),'RBRACE':([116,158,170,171,183,231,263,277,289,290,304,315,320,321,324,325,327,],[-88,-58,-86,219,228,-87,-57,-201,-200,303,-199,-88,-88,-3,-3,-204,-202,]),'LEQ':([74,75,76,78,79,80,82,83,84,85,89,90,91,93,94,95,96,98,122,123,124,126,129,176,177,179,180,181,182,205,209,220,221,223,224,240,259,260,261,262,273,274,279,280,282,293,294,300,308,311,319,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,150,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,150,150,-135,150,-124,-90,-123,-122,150,-132,150,-128,-136,150,-130,-131,150,-137,150,-122,150,150,-129,-134,150,150,-133,-122,150,]),'CONTINUE':([116,170,231,238,315,320,],[-88,203,-87,203,-88,-88,]),'MUL_ASSIGN':([74,75,76,78,79,80,82,83,84,85,89,91,93,94,95,96,98,122,123,124,126,177,179,180,181,182,205,208,209,220,223,224,259,260,262,273,274,282,293,308,311,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,-135,-32,-124,-90,-123,-122,243,-31,-132,-128,-136,-130,-131,-137,-31,-122,-129,-134,-133,-122,]),'NOT':([50,63,72,73,77,81,86,88,92,97,103,104,116,125,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,170,175,196,200,206,217,222,225,231,235,236,238,241,242,243,244,245,246,247,248,249,250,251,252,253,257,258,281,285,299,312,313,315,320,],[97,97,-116,97,-119,-118,-115,97,-120,-117,97,97,-88,97,97,97,-105,-93,-108,-109,-99,-103,-94,-114,97,-96,-112,-107,-97,-102,-104,-98,-111,-100,-113,-95,-101,-106,-110,97,97,97,-2,97,-2,97,97,-87,97,97,97,-172,97,-173,-179,-182,-181,-178,-175,-180,-176,-174,-171,-177,97,97,97,97,97,97,97,-88,-88,]),'$end':([2,4,6,7,26,31,],[0,-9,-7,-1,-8,-6,]),'TYPE':([4,6,7,26,31,116,170,231,238,315,320,],[-9,-7,19,-8,-6,-88,19,-87,19,-88,-88,]),'OR':([74,75,76,78,79,80,82,83,84,85,89,90,91,93,94,95,96,98,122,123,124,126,129,176,177,179,180,181,182,205,209,220,221,223,224,240,259,260,261,262,273,274,279,280,282,293,294,300,308,311,319,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,151,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,151,151,-135,151,-124,-90,-123,-122,151,-132,151,-128,-136,151,-130,-131,151,-137,151,-122,151,151,-129,-134,151,151,-133,-122,151,]),'INC':([74,75,76,78,79,80,82,83,84,85,89,91,93,94,95,96,98,122,123,124,126,177,180,181,182,205,209,220,223,224,259,260,262,273,274,282,293,308,311,],[-144,-121,-139,-145,-138,-149,-150,-89,-140,-91,-141,-122,-146,-147,-148,-142,-143,-92,-125,-126,-127,-135,-124,-90,-123,-122,255,-132,-128,-136,-130,-131,-137,255,-122,-129,-134,-133,-122,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Index':([85,],[123,]),'Slice':([85,],[124,]),'Statement':([170,238,],[191,276,]),'Parameters':([45,],[66,]),'TopLevelDecl_curl':([6,],[7,]),'StructDecl':([7,170,238,],[11,11,11,]),'BinaryOp':([90,129,176,179,209,221,240,261,273,279,280,294,300,319,],[138,138,138,138,138,138,138,138,138,138,138,138,138,138,]),'SourceFile':([0,],[2,]),'ParameterList':([65,],[110,]),'ExpressionName':([206,],[239,]),'ArrayType':([36,51,53,71,111,113,114,119,189,227,284,],[49,49,49,49,49,49,49,49,49,49,49,]),'ImportDecl_curl':([4,],[6,]),'ImportPath':([8,24,25,39,],[22,40,41,22,]),'TopLevelDecl':([7,],[13,]),'Literal':([50,63,73,88,103,104,125,127,128,138,170,175,196,206,222,225,235,236,238,242,257,258,281,285,299,312,313,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'ForStmt':([170,238,],[214,214,]),'Arguments':([85,],[126,]),'Statement_curl':([116,315,320,],[170,170,170,]),'IdentifierList':([10,16,42,44,46,170,236,238,265,299,312,],[29,36,29,64,36,198,198,198,284,198,198,]),'IntLit':([50,63,73,88,103,104,125,127,128,138,170,175,196,206,222,225,235,236,238,242,257,258,281,285,299,312,313,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'VarSpec_curl':([35,],[46,]),'TypeLit':([36,51,53,71,111,113,114,119,189,227,284,],[47,47,47,47,47,47,47,47,47,47,47,]),'ImportDecl':([6,],[9,]),'ExprCaseClause':([290,],[304,]),'CloseS':([117,232,275,286,287,292,321,324,326,],[172,269,288,301,302,307,325,327,328,]),'PackageClause':([0,],[1,]),'FallthroughStmt':([170,238,],[212,212,]),'RuneLit':([50,63,73,88,103,104,125,127,128,138,170,175,196,206,222,225,235,236,238,242,257,258,281,285,299,312,313,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'FieldDecl':([183,],[226,]),'ImportSpec':([8,39,],[21,60,]),'Type':([36,51,53,71,111,113,114,119,189,227,284,],[54,99,101,120,162,164,168,173,229,266,297,]),'AddOp':([90,129,176,179,209,221,240,261,273,279,280,294,300,319,],[139,139,139,139,139,139,139,139,139,139,139,139,139,139,]),'UnaryOp':([50,63,73,88,103,104,125,127,128,138,170,175,196,206,222,225,235,236,238,242,257,258,281,285,299,312,313,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'SwitchStmt':([170,238,],[202,202,]),'TypeList':([114,],[167,]),'FuncName':([15,],[32,]),'ContinueStmt':([170,238,],[190,190,]),'IncDecStmt':([170,236,238,299,312,],[215,215,215,215,215,]),'FalseLit':([50,63,73,88,103,104,125,127,128,138,170,175,196,206,222,225,235,236,238,242,257,258,281,285,299,312,313,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'Declaration':([7,170,238,],[14,207,207,]),'ConstDecl':([7,170,238,],[17,17,17,]),'AssignOp':([208,],[242,]),'ParameterDecl':([65,159,],[112,185,]),'GotoStmt':([170,238,],[199,199,]),'OpenS':([32,170,200,217,238,277,290,316,],[45,194,236,257,194,291,305,322,]),'SliceType':([36,51,53,71,111,113,114,119,189,227,284,],[56,56,56,56,56,56,56,56,56,56,56,]),'StructType':([37,],[57,]),'ConstSpec':([10,42,],[27,62,]),'OpenStructS':([58,],[105,]),'CloseStructS':([228,],[268,]),'ExprCaseClause_curl':([277,],[290,]),'IfStmt':([170,238,316,],[192,192,323,]),'UnaryExpr':([50,63,73,88,103,104,125,127,128,138,170,175,196,206,222,225,235,236,238,242,257,258,281,285,299,312,313,],[83,83,122,83,83,83,83,83,83,181,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'StatementList':([116,315,320,],[171,321,324,]),'FloatLit':([50,63,73,88,103,104,125,127,128,138,170,175,196,206,222,225,235,236,238,242,257,258,281,285,299,312,313,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'MulOp':([90,129,176,179,209,221,240,261,273,279,280,294,300,319,],[142,142,142,142,142,142,142,142,142,142,142,142,142,142,]),'PrimaryExpr':([50,63,73,88,103,104,125,127,128,138,170,175,196,206,222,225,235,236,238,242,257,258,281,285,299,312,313,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'ConstSpec_curl':([28,],[42,]),'ExpressionList':([50,63,103,104,127,170,196,235,236,238,242,299,312,],[87,108,156,157,178,208,234,270,208,208,278,208,208,]),'SimpleStmt':([170,236,238,299,312,],[213,271,213,310,318,]),'Signature':([45,],[67,]),'ForClause':([236,],[272,]),'Expression':([50,63,88,103,104,125,127,128,170,175,196,206,222,225,235,236,238,242,257,258,281,285,299,312,313,],[90,90,129,90,90,176,90,179,209,221,90,240,261,179,90,273,209,90,279,280,294,300,209,209,319,]),'ShortVarDecl':([170,236,238,299,312,],[216,216,216,216,216,]),'Block':([67,194,236,272,273,279,322,],[117,232,275,286,287,292,326,]),'FieldDecl_curl':([158,],[183,]),'FunctionDecl':([7,],[12,]),'TrueLit':([50,63,73,88,103,104,125,127,128,138,170,175,196,206,222,225,235,236,238,242,257,258,281,285,299,312,313,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'RelOp':([90,129,176,179,209,221,240,261,273,279,280,294,300,319,],[149,149,149,149,149,149,149,149,149,149,149,149,149,149,]),'DefCaseClause':([277,],[289,]),'StructName':([19,],[37,]),'BreakStmt':([170,238,],[218,218,]),'ExprSwitchCase':([305,],[314,]),'VarDecl':([7,170,238,],[18,18,18,]),'StringLit':([50,63,73,88,103,104,125,127,128,138,170,175,196,206,222,225,235,236,238,242,257,258,281,285,299,312,313,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'VarSpec':([16,46,],[34,69,]),'LabelledStmt':([170,238,],[201,201,]),'Assignment':([170,236,238,299,312,],[193,193,193,193,193,]),'Result':([66,],[115,]),'BasicLit':([50,63,73,88,103,104,125,127,128,138,170,175,196,206,222,225,235,236,238,242,257,258,281,285,299,312,313,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'PointerType':([36,51,53,71,111,113,114,119,189,227,284,],[52,52,52,52,52,52,52,52,52,52,52,]),'ReturnStmt':([170,238,],[211,211,]),'ParaIdList':([65,159,],[111,111,]),'ImportSpec_curl':([23,],[39,]),'ExprSwitchStmt':([170,238,],[197,197,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> SourceFile","S'",1,None,None,None),
  ('SourceFile -> PackageClause SEMICOLON ImportDecl_curl TopLevelDecl_curl','SourceFile',4,'p_SourceFile','parser.py',153),
  ('OpenS -> <empty>','OpenS',0,'p_OpenS','parser.py',162),
  ('CloseS -> <empty>','CloseS',0,'p_CloseS','parser.py',166),
  ('OpenStructS -> <empty>','OpenStructS',0,'p_OpenStructS','parser.py',170),
  ('CloseStructS -> <empty>','CloseStructS',0,'p_CloseStructS','parser.py',174),
  ('TopLevelDecl_curl -> TopLevelDecl_curl TopLevelDecl SEMICOLON','TopLevelDecl_curl',3,'p_TopLevelDecl_curl','parser.py',178),
  ('TopLevelDecl_curl -> <empty>','TopLevelDecl_curl',0,'p_TopLevelDecl_curl','parser.py',179),
  ('ImportDecl_curl -> ImportDecl_curl ImportDecl SEMICOLON','ImportDecl_curl',3,'p_ImportDecl_curl','parser.py',184),
  ('ImportDecl_curl -> <empty>','ImportDecl_curl',0,'p_ImportDecl_curl','parser.py',185),
  ('PackageClause -> PACKAGE ID','PackageClause',2,'p_PackageClause','parser.py',190),
  ('ImportDecl -> IMPORT ImportSpec','ImportDecl',2,'p_ImportDecl','parser.py',195),
  ('ImportDecl -> IMPORT LPAREN ImportSpec_curl RPAREN','ImportDecl',4,'p_ImportDecl','parser.py',196),
  ('ImportSpec_curl -> ImportSpec_curl ImportSpec SEMICOLON','ImportSpec_curl',3,'p_ImportSpec_curl','parser.py',201),
  ('ImportSpec_curl -> <empty>','ImportSpec_curl',0,'p_ImportSpec_curl','parser.py',202),
  ('ImportSpec -> DOT ImportPath','ImportSpec',2,'p_ImportSpec','parser.py',207),
  ('ImportSpec -> ID ImportPath','ImportSpec',2,'p_ImportSpec','parser.py',208),
  ('ImportSpec -> ImportPath','ImportSpec',1,'p_ImportSpec','parser.py',209),
  ('ImportPath -> STRING','ImportPath',1,'p_ImportPath','parser.py',215),
  ('TopLevelDecl -> Declaration','TopLevelDecl',1,'p_TopLevelDecl','parser.py',220),
  ('TopLevelDecl -> FunctionDecl','TopLevelDecl',1,'p_TopLevelDecl','parser.py',221),
  ('Declaration -> ConstDecl','Declaration',1,'p_Declaration','parser.py',226),
  ('Declaration -> StructDecl','Declaration',1,'p_Declaration','parser.py',227),
  ('Declaration -> VarDecl','Declaration',1,'p_Declaration','parser.py',228),
  ('ConstDecl -> CONST ConstSpec','ConstDecl',2,'p_ConstDecl','parser.py',233),
  ('ConstDecl -> CONST LPAREN ConstSpec_curl RPAREN','ConstDecl',4,'p_ConstDecl','parser.py',234),
  ('ConstSpec_curl -> ConstSpec_curl ConstSpec SEMICOLON','ConstSpec_curl',3,'p_ConstSpec_curl','parser.py',239),
  ('ConstSpec_curl -> <empty>','ConstSpec_curl',0,'p_ConstSpec_curl','parser.py',240),
  ('ConstSpec -> IdentifierList ID ASSIGN ExpressionList','ConstSpec',4,'p_ConstSpec','parser.py',245),
  ('IdentifierList -> ID','IdentifierList',1,'p_IdentifierList','parser.py',269),
  ('IdentifierList -> ID COMMA IdentifierList','IdentifierList',3,'p_IdentifierList','parser.py',270),
  ('ExpressionList -> Expression','ExpressionList',1,'p_ExpressionList','parser.py',281),
  ('ExpressionList -> ExpressionList COMMA Expression','ExpressionList',3,'p_ExpressionList','parser.py',282),
  ('StructDecl -> TYPE StructName StructType','StructDecl',3,'p_StructDecl','parser.py',301),
  ('StructName -> ID','StructName',1,'p_StructName','parser.py',308),
  ('VarDecl -> VAR VarSpec','VarDecl',2,'p_VarDecl','parser.py',321),
  ('VarDecl -> VAR LPAREN VarSpec_curl RPAREN','VarDecl',4,'p_VarDecl','parser.py',322),
  ('VarSpec_curl -> VarSpec_curl VarSpec SEMICOLON','VarSpec_curl',3,'p_VarSpec_curl','parser.py',327),
  ('VarSpec_curl -> <empty>','VarSpec_curl',0,'p_VarSpec_curl','parser.py',328),
  ('VarSpec -> IdentifierList Type ASSIGN ExpressionList','VarSpec',4,'p_VarSpec','parser.py',333),
  ('VarSpec -> IdentifierList ID ASSIGN ExpressionList','VarSpec',4,'p_VarSpec','parser.py',334),
  ('VarSpec -> IdentifierList ASSIGN ExpressionList','VarSpec',3,'p_VarSpec','parser.py',335),
  ('VarSpec -> IdentifierList ID','VarSpec',2,'p_VarSpec','parser.py',336),
  ('VarSpec -> IdentifierList Type','VarSpec',2,'p_VarSpec','parser.py',337),
  ('FunctionDecl -> FUNC FuncName OpenS Signature Block CloseS','FunctionDecl',6,'p_FunctionDecl','parser.py',379),
  ('FuncName -> ID','FuncName',1,'p_FuncName','parser.py',384),
  ('Type -> LPAREN Type RPAREN','Type',3,'p_Type','parser.py',394),
  ('Type -> LPAREN ID RPAREN','Type',3,'p_Type','parser.py',395),
  ('Type -> TypeLit','Type',1,'p_Type','parser.py',396),
  ('TypeLit -> ArrayType','TypeLit',1,'p_TypeLit','parser.py',412),
  ('TypeLit -> PointerType','TypeLit',1,'p_TypeLit','parser.py',413),
  ('TypeLit -> SliceType','TypeLit',1,'p_TypeLit','parser.py',414),
  ('ArrayType -> LBRACK INT RBRACK Type','ArrayType',4,'p_ArrayType','parser.py',420),
  ('ArrayType -> LBRACK INT RBRACK ID','ArrayType',4,'p_ArrayType','parser.py',421),
  ('SliceType -> LBRACK RBRACK Type','SliceType',3,'p_SliceType','parser.py',439),
  ('SliceType -> LBRACK RBRACK ID','SliceType',3,'p_SliceType','parser.py',440),
  ('StructType -> STRUCT OpenStructS LBRACE FieldDecl_curl RBRACE CloseStructS','StructType',6,'p_StructType','parser.py',455),
  ('FieldDecl_curl -> FieldDecl_curl FieldDecl SEMICOLON','FieldDecl_curl',3,'p_FieldDecl_curl','parser.py',460),
  ('FieldDecl_curl -> <empty>','FieldDecl_curl',0,'p_FieldDecl_curl','parser.py',461),
  ('FieldDecl -> ID COMMA IdentifierList Type','FieldDecl',4,'p_FieldDecl','parser.py',466),
  ('FieldDecl -> ID COMMA IdentifierList ID','FieldDecl',4,'p_FieldDecl','parser.py',467),
  ('FieldDecl -> ID Type','FieldDecl',2,'p_FieldDecl','parser.py',468),
  ('FieldDecl -> ID ID','FieldDecl',2,'p_FieldDecl','parser.py',469),
  ('FieldDecl -> ID STRUCT MUL ID','FieldDecl',4,'p_FieldDecl','parser.py',470),
  ('FieldDecl -> ID COMMA IdentifierList STRUCT MUL ID','FieldDecl',6,'p_FieldDecl','parser.py',471),
  ('PointerType -> MUL Type','PointerType',2,'p_PointerType','parser.py',540),
  ('PointerType -> MUL ID','PointerType',2,'p_PointerType','parser.py',541),
  ('Signature -> Parameters Result','Signature',2,'p_Signature','parser.py',558),
  ('Result -> LPAREN TypeList RPAREN','Result',3,'p_Result','parser.py',564),
  ('Result -> <empty>','Result',0,'p_Result','parser.py',565),
  ('TypeList -> ID','TypeList',1,'p_TypeList','parser.py',574),
  ('TypeList -> Type','TypeList',1,'p_TypeList','parser.py',575),
  ('TypeList -> TypeList COMMA ID','TypeList',3,'p_TypeList','parser.py',576),
  ('TypeList -> TypeList COMMA Type','TypeList',3,'p_TypeList','parser.py',577),
  ('Parameters -> LPAREN RPAREN','Parameters',2,'p_Parameters','parser.py',599),
  ('Parameters -> LPAREN ParameterList RPAREN','Parameters',3,'p_Parameters','parser.py',600),
  ('Parameters -> LPAREN ParameterList COMMA RPAREN','Parameters',4,'p_Parameters','parser.py',601),
  ('ParameterList -> ParameterDecl','ParameterList',1,'p_ParameterList','parser.py',612),
  ('ParameterList -> ParameterList COMMA ParameterDecl','ParameterList',3,'p_ParameterList','parser.py',613),
  ('ParameterDecl -> ParaIdList Type','ParameterDecl',2,'p_ParameterDecl','parser.py',624),
  ('ParameterDecl -> ID Type','ParameterDecl',2,'p_ParameterDecl','parser.py',625),
  ('ParameterDecl -> ParaIdList ID','ParameterDecl',2,'p_ParameterDecl','parser.py',626),
  ('ParameterDecl -> ID ID','ParameterDecl',2,'p_ParameterDecl','parser.py',627),
  ('ParaIdList -> ID COMMA ID','ParaIdList',3,'p_ParaIdList','parser.py',658),
  ('ParaIdList -> ParaIdList COMMA ID','ParaIdList',3,'p_ParaIdList','parser.py',659),
  ('Block -> LBRACE StatementList RBRACE','Block',3,'p_Block','parser.py',671),
  ('StatementList -> Statement_curl','StatementList',1,'p_StatementList','parser.py',676),
  ('Statement_curl -> Statement_curl Statement SEMICOLON','Statement_curl',3,'p_Statement_curl','parser.py',681),
  ('Statement_curl -> <empty>','Statement_curl',0,'p_Statement_curl','parser.py',682),
  ('Expression -> UnaryExpr','Expression',1,'p_Expression','parser.py',687),
  ('Expression -> Expression BinaryOp UnaryExpr','Expression',3,'p_Expression','parser.py',688),
  ('UnaryExpr -> PrimaryExpr','UnaryExpr',1,'p_UnaryExpr','parser.py',704),
  ('UnaryExpr -> UnaryOp UnaryExpr','UnaryExpr',2,'p_UnaryExpr','parser.py',705),
  ('BinaryOp -> LOR','BinaryOp',1,'p_BinaryOp','parser.py',724),
  ('BinaryOp -> LAND','BinaryOp',1,'p_BinaryOp','parser.py',725),
  ('BinaryOp -> RelOp','BinaryOp',1,'p_BinaryOp','parser.py',726),
  ('BinaryOp -> AddOp','BinaryOp',1,'p_BinaryOp','parser.py',727),
  ('BinaryOp -> MulOp','BinaryOp',1,'p_BinaryOp','parser.py',728),
  ('RelOp -> EQL','RelOp',1,'p_RelOp','parser.py',738),
  ('RelOp -> NEQ','RelOp',1,'p_RelOp','parser.py',739),
  ('RelOp -> LTN','RelOp',1,'p_RelOp','parser.py',740),
  ('RelOp -> LEQ','RelOp',1,'p_RelOp','parser.py',741),
  ('RelOp -> GTN','RelOp',1,'p_RelOp','parser.py',742),
  ('RelOp -> GEQ','RelOp',1,'p_RelOp','parser.py',743),
  ('AddOp -> ADD','AddOp',1,'p_AddOp','parser.py',751),
  ('AddOp -> SUB','AddOp',1,'p_AddOp','parser.py',752),
  ('AddOp -> OR','AddOp',1,'p_AddOp','parser.py',753),
  ('AddOp -> XOR','AddOp',1,'p_AddOp','parser.py',754),
  ('MulOp -> MUL','MulOp',1,'p_MulOp','parser.py',761),
  ('MulOp -> DIV','MulOp',1,'p_MulOp','parser.py',762),
  ('MulOp -> MOD','MulOp',1,'p_MulOp','parser.py',763),
  ('MulOp -> SHL','MulOp',1,'p_MulOp','parser.py',764),
  ('MulOp -> SHR','MulOp',1,'p_MulOp','parser.py',765),
  ('MulOp -> AND','MulOp',1,'p_MulOp','parser.py',766),
  ('MulOp -> AND_NOT','MulOp',1,'p_MulOp','parser.py',767),
  ('UnaryOp -> ADD','UnaryOp',1,'p_UnaryOp','parser.py',774),
  ('UnaryOp -> SUB','UnaryOp',1,'p_UnaryOp','parser.py',775),
  ('UnaryOp -> NOT','UnaryOp',1,'p_UnaryOp','parser.py',776),
  ('UnaryOp -> XOR','UnaryOp',1,'p_UnaryOp','parser.py',777),
  ('UnaryOp -> MUL','UnaryOp',1,'p_UnaryOp','parser.py',778),
  ('UnaryOp -> AND','UnaryOp',1,'p_UnaryOp','parser.py',779),
  ('PrimaryExpr -> Literal','PrimaryExpr',1,'p_PrimaryExpr','parser.py',787),
  ('PrimaryExpr -> ID','PrimaryExpr',1,'p_PrimaryExpr','parser.py',788),
  ('PrimaryExpr -> ID DOT ID','PrimaryExpr',3,'p_PrimaryExpr','parser.py',789),
  ('PrimaryExpr -> LPAREN Expression RPAREN','PrimaryExpr',3,'p_PrimaryExpr','parser.py',790),
  ('PrimaryExpr -> PrimaryExpr Index','PrimaryExpr',2,'p_PrimaryExpr','parser.py',791),
  ('PrimaryExpr -> PrimaryExpr Slice','PrimaryExpr',2,'p_PrimaryExpr','parser.py',792),
  ('PrimaryExpr -> PrimaryExpr Arguments','PrimaryExpr',2,'p_PrimaryExpr','parser.py',793),
  ('Index -> LBRACK Expression RBRACK','Index',3,'p_Index','parser.py',836),
  ('Slice -> LBRACK Expression COLON Expression RBRACK','Slice',5,'p_Slice','parser.py',845),
  ('Slice -> LBRACK COLON Expression RBRACK','Slice',4,'p_Slice','parser.py',846),
  ('Slice -> LBRACK Expression COLON RBRACK','Slice',4,'p_Slice','parser.py',847),
  ('Slice -> LBRACK COLON RBRACK','Slice',3,'p_Slice','parser.py',848),
  ('Slice -> LBRACK Expression COLON Expression COLON Expression RBRACK','Slice',7,'p_Slice','parser.py',849),
  ('Slice -> LBRACK COLON Expression COLON Expression RBRACK','Slice',6,'p_Slice','parser.py',850),
  ('Arguments -> LPAREN RPAREN','Arguments',2,'p_Arguments','parser.py',856),
  ('Arguments -> LPAREN ExpressionList RPAREN','Arguments',3,'p_Arguments','parser.py',857),
  ('Arguments -> LPAREN ExpressionList COMMA RPAREN','Arguments',4,'p_Arguments','parser.py',858),
  ('Literal -> BasicLit','Literal',1,'p_Literal','parser.py',879),
  ('BasicLit -> IntLit','BasicLit',1,'p_BasicLit','parser.py',885),
  ('BasicLit -> FloatLit','BasicLit',1,'p_BasicLit','parser.py',886),
  ('BasicLit -> RuneLit','BasicLit',1,'p_BasicLit','parser.py',887),
  ('BasicLit -> StringLit','BasicLit',1,'p_BasicLit','parser.py',888),
  ('BasicLit -> TrueLit','BasicLit',1,'p_BasicLit','parser.py',889),
  ('BasicLit -> FalseLit','BasicLit',1,'p_BasicLit','parser.py',890),
  ('TrueLit -> TRUE','TrueLit',1,'p_TrueLit','parser.py',896),
  ('FalseLit -> FALSE','FalseLit',1,'p_FalseLit','parser.py',903),
  ('IntLit -> INT','IntLit',1,'p_IntLit','parser.py',910),
  ('FloatLit -> FLOAT','FloatLit',1,'p_FloatLit','parser.py',917),
  ('RuneLit -> RUNE','RuneLit',1,'p_RuneLit','parser.py',924),
  ('StringLit -> STRING','StringLit',1,'p_StringLit','parser.py',931),
  ('Statement -> Declaration','Statement',1,'p_Statement','parser.py',938),
  ('Statement -> LabelledStmt','Statement',1,'p_Statement','parser.py',939),
  ('Statement -> SimpleStmt','Statement',1,'p_Statement','parser.py',940),
  ('Statement -> ReturnStmt','Statement',1,'p_Statement','parser.py',941),
  ('Statement -> BreakStmt','Statement',1,'p_Statement','parser.py',942),
  ('Statement -> ContinueStmt','Statement',1,'p_Statement','parser.py',943),
  ('Statement -> GotoStmt','Statement',1,'p_Statement','parser.py',944),
  ('Statement -> FallthroughStmt','Statement',1,'p_Statement','parser.py',945),
  ('Statement -> IfStmt','Statement',1,'p_Statement','parser.py',946),
  ('Statement -> OpenS Block CloseS','Statement',3,'p_Statement','parser.py',947),
  ('Statement -> SwitchStmt','Statement',1,'p_Statement','parser.py',948),
  ('Statement -> ForStmt','Statement',1,'p_Statement','parser.py',949),
  ('SimpleStmt -> Expression','SimpleStmt',1,'p_SimpleStmt','parser.py',954),
  ('SimpleStmt -> IncDecStmt','SimpleStmt',1,'p_SimpleStmt','parser.py',955),
  ('SimpleStmt -> Assignment','SimpleStmt',1,'p_SimpleStmt','parser.py',956),
  ('SimpleStmt -> ShortVarDecl','SimpleStmt',1,'p_SimpleStmt','parser.py',957),
  ('SimpleStmt -> <empty>','SimpleStmt',0,'p_SimpleStmt','parser.py',958),
  ('IncDecStmt -> Expression INC','IncDecStmt',2,'p_IncDecStmt','parser.py',969),
  ('IncDecStmt -> Expression DEC','IncDecStmt',2,'p_IncDecStmt','parser.py',970),
  ('Assignment -> ExpressionList AssignOp ExpressionList','Assignment',3,'p_Assignment','parser.py',977),
  ('AssignOp -> ADD_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',990),
  ('AssignOp -> SUB_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',991),
  ('AssignOp -> MUL_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',992),
  ('AssignOp -> DIV_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',993),
  ('AssignOp -> MOD_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',994),
  ('AssignOp -> AND_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',995),
  ('AssignOp -> AND_NOT_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',996),
  ('AssignOp -> OR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',997),
  ('AssignOp -> XOR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',998),
  ('AssignOp -> SHL_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',999),
  ('AssignOp -> SHR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1000),
  ('AssignOp -> ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1001),
  ('LabelledStmt -> ID COLON Statement','LabelledStmt',3,'p_LabelledStmt','parser.py',1008),
  ('ReturnStmt -> RETURN ExpressionList','ReturnStmt',2,'p_ReturnStmt','parser.py',1013),
  ('ReturnStmt -> RETURN','ReturnStmt',1,'p_ReturnStmt','parser.py',1014),
  ('BreakStmt -> BREAK ID','BreakStmt',2,'p_BreakStmt','parser.py',1023),
  ('BreakStmt -> BREAK','BreakStmt',1,'p_BreakStmt','parser.py',1024),
  ('ContinueStmt -> CONTINUE ID','ContinueStmt',2,'p_ContinueStmt','parser.py',1029),
  ('ContinueStmt -> CONTINUE','ContinueStmt',1,'p_ContinueStmt','parser.py',1030),
  ('GotoStmt -> GOTO ID','GotoStmt',2,'p_GotoStmt','parser.py',1035),
  ('FallthroughStmt -> FALLTHROUGH','FallthroughStmt',1,'p_FallthroughStmt','parser.py',1040),
  ('ShortVarDecl -> IdentifierList DEFINE ExpressionList','ShortVarDecl',3,'p_ShortVarDecl','parser.py',1045),
  ('IfStmt -> IF OpenS Expression Block CloseS','IfStmt',5,'p_IfStmt','parser.py',1063),
  ('IfStmt -> IF OpenS Expression Block CloseS ELSE IfStmt','IfStmt',7,'p_IfStmt','parser.py',1064),
  ('IfStmt -> IF OpenS Expression Block CloseS ELSE OpenS Block CloseS','IfStmt',9,'p_IfStmt','parser.py',1065),
  ('SwitchStmt -> ExprSwitchStmt','SwitchStmt',1,'p_SwitchStmt','parser.py',1072),
  ('ExprSwitchStmt -> SWITCH ExpressionName LBRACE ExprCaseClause_curl RBRACE','ExprSwitchStmt',5,'p_ExprSwitchStmt','parser.py',1077),
  ('ExpressionName -> Expression','ExpressionName',1,'p_ExpressionName','parser.py',1082),
  ('ExprCaseClause_curl -> ExprCaseClause_curl ExprCaseClause','ExprCaseClause_curl',2,'p_ExprCaseClause_curl','parser.py',1093),
  ('ExprCaseClause_curl -> DefCaseClause','ExprCaseClause_curl',1,'p_ExprCaseClause_curl','parser.py',1094),
  ('ExprCaseClause_curl -> <empty>','ExprCaseClause_curl',0,'p_ExprCaseClause_curl','parser.py',1095),
  ('ExprCaseClause -> OpenS ExprSwitchCase COLON StatementList CloseS','ExprCaseClause',5,'p_ExprCaseClause','parser.py',1100),
  ('ExprSwitchCase -> CASE Expression','ExprSwitchCase',2,'p_ExprSwitchCase','parser.py',1105),
  ('DefCaseClause -> OpenS DEFAULT COLON StatementList CloseS','DefCaseClause',5,'p_DefCaseClause','parser.py',1116),
  ('ForStmt -> FOR OpenS Expression Block CloseS','ForStmt',5,'p_ForStmt','parser.py',1121),
  ('ForStmt -> FOR OpenS ForClause Block CloseS','ForStmt',5,'p_ForStmt','parser.py',1122),
  ('ForStmt -> FOR OpenS Block CloseS','ForStmt',4,'p_ForStmt','parser.py',1123),
  ('ForClause -> SimpleStmt SEMICOLON SEMICOLON SimpleStmt','ForClause',4,'p_ForClause','parser.py',1133),
  ('ForClause -> SimpleStmt SEMICOLON Expression SEMICOLON SimpleStmt','ForClause',5,'p_ForClause','parser.py',1134),
]

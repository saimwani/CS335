
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLPARENleftLBRACEleftIDleftDEFINEleftCOMMAleftLBRACKleftRBRACKleftDOTleftSEMICOLONleftCOLONleftINTleftFLOATleftSTRINGleftBREAKleftCONTINUEleftRETURNleftLORleftLANDleftEQLNEQLTNLEQGTNGEQleftADDSUBORXORleftMULDIVMODANDAND_NOTSHLSHRADD ADD_ASSIGN AND AND_NOT ASSIGN BREAK CASE COLON COMMA CONST CONTINUE DEC DEFAULT DEFINE DIV DIV_ASSIGN DOT ELSE EQL FALLTHROUGH FALSE FLOAT FOR FUNC GEQ GOTO GTN ID IF IMPORT INC INT LAND LBRACE LBRACK LEQ LOR LPAREN LTN MOD MOD_ASSIGN MUL MUL_ASSIGN NEQ NOT OR OR_ASSIGN PACKAGE RBRACE RBRACK RETURN RPAREN RUNE SEMICOLON SHL SHL_ASSIGN SHR SHR_ASSIGN STRING STRUCT SUB SUB_ASSIGN SWITCH TRUE TYPE VAR XOR XOR_ASSIGN\n    SourceFile : PackageClause SEMICOLON ImportDecl_curl TopLevelDecl_curl\n    OpenS : CloseS : OpenStructS : CloseStructS : \n    TopLevelDecl_curl : TopLevelDecl_curl TopLevelDecl SEMICOLON\n                      |\n    \n    ImportDecl_curl : ImportDecl_curl ImportDecl SEMICOLON\n                    |\n    \n    PackageClause : PACKAGE ID\n    \n    ImportDecl : IMPORT ImportSpec\n               | IMPORT LPAREN ImportSpec_curl RPAREN\n    \n    ImportSpec_curl : ImportSpec_curl ImportSpec SEMICOLON\n                    |\n    \n    ImportSpec : ID ImportPath\n               | ImportPath\n    \n    ImportPath : STRING\n    \n    TopLevelDecl : Declaration\n                 | FunctionDecl\n    \n    Declaration : ConstDecl\n                | StructDecl\n                | VarDecl\n    \n    ConstDecl : CONST ConstSpec\n              | CONST LPAREN ConstSpec_curl RPAREN\n    \n    ConstSpec_curl : ConstSpec_curl ConstSpec SEMICOLON\n                   |\n    \n    ConstSpec : IdentifierList ID ASSIGN ExpressionList\n    \n    IdentifierList : ID\n                   | ID COMMA IdentifierList\n    \n    ExpressionList : Expression\n                   | ExpressionList COMMA Expression\n    \n    StructDecl : TYPE StructName StructType\n    \n    StructName : ID\n    \n    VarDecl : VAR VarSpec\n            | VAR LPAREN VarSpec_curl RPAREN\n    \n    VarSpec_curl : VarSpec_curl VarSpec SEMICOLON\n                 |\n    \n    VarSpec : IdentifierList Type ASSIGN ExpressionList\n            | IdentifierList ID ASSIGN ExpressionList\n            | IdentifierList ASSIGN ExpressionList\n            | IdentifierList ID\n            | IdentifierList Type\n    \n    FunctionDecl : FUNC FuncName OpenS Signature Block CloseS\n    \n    FuncName : ID\n    \n    Type : LPAREN Type RPAREN\n         | LPAREN ID RPAREN\n         | TypeLit\n    \n    TypeLit : ArrayType\n            | PointerType\n            | SliceType\n    \n    ArrayType : LBRACK INT RBRACK Type\n              | LBRACK INT RBRACK ID\n    \n    SliceType : LBRACK RBRACK Type\n              | LBRACK RBRACK ID\n    \n    StructType : STRUCT OpenStructS LBRACE FieldDecl_curl RBRACE CloseStructS\n    \n    FieldDecl_curl : FieldDecl_curl FieldDecl SEMICOLON\n                   |\n    \n    FieldDecl : ID COMMA IdentifierList Type\n              | ID COMMA IdentifierList ID\n              | ID Type\n              | ID ID\n              | ID STRUCT MUL ID\n              | ID COMMA IdentifierList STRUCT MUL ID\n    \n    PointerType : MUL Type\n                | MUL ID\n    \n    Signature : Parameters Result\n    \n    Result : LPAREN TypeList RPAREN\n           |\n    \n    TypeList : ID\n             | Type\n             | TypeList COMMA ID\n             | TypeList COMMA Type\n    \n    Parameters : LPAREN RPAREN\n               | LPAREN ParameterList RPAREN\n               | LPAREN ParameterList COMMA RPAREN\n    \n    ParameterList : ParameterDecl\n                  | ParameterList COMMA ParameterDecl\n    \n    ParameterDecl : ParaIdList Type\n                  | ID Type\n                  | ParaIdList ID\n                  | ID ID\n    \n    ParaIdList : ID COMMA ID\n               | ParaIdList COMMA ID\n    \n    Block : LBRACE StatementList RBRACE\n    \n    StatementList : Statement_curl\n    \n    Statement_curl : Statement_curl Statement SEMICOLON\n                   |\n    \n    Expression : UnaryExpr\n               | Expression BinaryOp UnaryExpr\n    \n    UnaryExpr : PrimaryExpr\n              | UnaryOp UnaryExpr\n    \n    BinaryOp : LOR\n             | LAND\n             | RelOp\n             | AddOp\n             | MulOp\n    \n    RelOp : EQL\n          | NEQ\n          | LTN\n          | LEQ\n          | GTN\n          | GEQ\n    \n    AddOp : ADD\n          | SUB\n          | OR\n          | XOR\n    \n    MulOp : MUL\n          | DIV\n          | MOD\n          | SHL\n          | SHR\n          | AND\n          | AND_NOT\n    \n    UnaryOp : ADD\n            | SUB\n            | NOT\n            | XOR\n            | MUL\n            | AND\n    \n    PrimaryExpr : Literal\n                | ID\n                | PrimaryExpr DOT ID\n                | LPAREN Expression RPAREN\n                | PrimaryExpr Index\n                | PrimaryExpr Slice\n                | PrimaryExpr Arguments\n    \n    Index : LBRACK Expression RBRACK\n    \n    Slice : LBRACK Expression COLON Expression RBRACK\n          | LBRACK COLON Expression RBRACK\n          | LBRACK Expression COLON RBRACK\n          | LBRACK COLON RBRACK\n          | LBRACK Expression COLON Expression COLON Expression RBRACK\n          | LBRACK COLON Expression COLON Expression RBRACK\n    \n    Arguments : LPAREN RPAREN\n              | LPAREN ExpressionList RPAREN\n              | LPAREN ExpressionList COMMA RPAREN\n    \n    Literal : BasicLit\n    \n    BasicLit : IntLit\n             | FloatLit\n             | RuneLit\n             | StringLit\n             | TrueLit\n             | FalseLit\n    \n    TrueLit : TRUE\n    \n    FalseLit : FALSE\n    \n    IntLit : INT\n    \n    FloatLit : FLOAT\n    \n    RuneLit : RUNE\n    \n    StringLit : STRING\n    \n    Statement : Declaration\n              | LabelledStmt\n              | SimpleStmt\n              | ReturnStmt\n              | BreakStmt\n              | ContinueStmt\n              | GotoStmt\n              | FallthroughStmt\n              | IfStmt\n              | OpenS Block CloseS\n              | SwitchStmt\n              | ForStmt\n    \n    SimpleStmt : Expression\n               | IncDecStmt\n               | Assignment\n               | ShortVarDecl\n               |\n    \n    IncDecStmt : Expression INC\n               | Expression DEC\n    \n    Assignment : ExpressionList AssignOp ExpressionList\n    \n    AssignOp : ADD_ASSIGN\n             | SUB_ASSIGN\n             | MUL_ASSIGN\n             | DIV_ASSIGN\n             | MOD_ASSIGN\n             | OR_ASSIGN\n             | XOR_ASSIGN\n             | SHL_ASSIGN\n             | SHR_ASSIGN\n             | ASSIGN\n    \n    LabelledStmt : ID COLON Statement\n    \n    ReturnStmt : RETURN ExpressionList\n               | RETURN\n    \n    BreakStmt : BREAK ID\n              | BREAK\n    \n    ContinueStmt : CONTINUE ID\n                 | CONTINUE\n    \n    GotoStmt : GOTO ID\n    \n    FallthroughStmt : FALLTHROUGH\n    \n    ShortVarDecl : IdentifierList DEFINE ExpressionList\n    \n    IfStmt : IF OpenS Expression Block CloseS\n           | IF OpenS Expression Block CloseS ELSE IfStmt\n           | IF OpenS Expression Block CloseS ELSE OpenS Block CloseS\n    \n    SwitchStmt : SWITCH ExpressionName LBRACE OpenW ExprCaseClause_curl CloseW RBRACE\n    \n    ExpressionName : Expression\n    \n    ExprCaseClause_curl : ExprCaseClause ExprCaseClause_curl\n                        | DefCaseClause\n                        | ExprCaseClause\n    \n    ExprCaseClause : OpenS CASE Expression COLON StatementList CloseS\n    \n    DefCaseClause : DEFAULT COLON OpenS StatementList CloseS\n    \n    ForStmt : FOR OpenS OpenF Expression Block CloseF CloseS\n            | FOR OpenS OpenF ForClause Block CloseF CloseS\n            | FOR OpenS OpenF Block CloseF CloseS\n    \n    OpenF :\n    \n    CloseF :\n    \n    OpenW :\n    \n    CloseW :\n    \n    ForClause : SimpleStmt SEMICOLON SEMICOLON SimpleStmt\n              | SimpleStmt SEMICOLON Expression SEMICOLON SimpleStmt\n    '
    
_lr_action_items = {'RETURN':([114,168,228,234,307,318,324,],[-87,194,-86,194,-2,-87,-87,]),'CONST':([4,6,7,25,30,114,168,228,234,307,318,324,],[-9,-7,10,-8,-6,-87,10,-86,10,-2,-87,-87,]),'FUNC':([4,6,7,25,30,],[-9,-7,15,-8,-6,]),'DEFAULT':([168,228,268,281,296,324,327,329,],[-85,-86,-205,295,295,-87,-3,-198,]),'GOTO':([114,168,228,234,307,318,324,],[-87,212,-86,212,-2,-87,-87,]),'SHL_ASSIGN':([72,73,74,76,77,78,80,81,82,83,87,89,91,92,93,94,96,120,121,122,124,175,177,178,179,180,202,205,206,217,220,221,254,255,257,273,278,279,283,299,313,],[-143,-120,-138,-144,-137,-148,-149,-88,-139,-90,-140,-121,-145,-146,-147,-141,-142,-91,-124,-125,-126,-134,-122,-31,-123,-89,-121,245,-30,-131,-127,-135,-129,-130,-136,-128,-30,-121,-133,-132,-121,]),'LOR':([72,73,74,76,77,78,80,81,82,83,87,88,89,91,92,93,94,96,120,121,122,124,128,174,175,177,178,179,180,202,206,217,218,220,221,236,254,255,256,257,270,271,273,278,279,283,284,299,302,313,319,],[-143,-120,-138,-144,-137,-148,-149,-88,-139,-90,-140,130,-121,-145,-146,-147,-141,-142,-91,-124,-125,-126,130,130,-134,-122,130,-123,-89,-121,130,-131,130,-127,-135,130,-129,-130,130,-136,130,130,-128,130,-121,-133,130,-132,130,-121,130,]),'COLON':([72,73,74,76,77,78,80,81,82,83,87,89,91,92,93,94,96,120,121,122,123,124,174,175,177,179,180,202,217,218,220,221,254,255,256,257,273,283,295,299,319,],[-143,-120,-138,-144,-137,-148,-149,-88,-139,-90,-140,-121,-145,-146,-147,-141,-142,-91,-124,-125,173,-126,219,-134,-122,-123,-89,234,-131,253,-127,-135,-129,-130,272,-136,-128,-133,307,-132,324,]),'DIV_ASSIGN':([72,73,74,76,77,78,80,81,82,83,87,89,91,92,93,94,96,120,121,122,124,175,177,178,179,180,202,205,206,217,220,221,254,255,257,273,278,279,283,299,313,],[-143,-120,-138,-144,-137,-148,-149,-88,-139,-90,-140,-121,-145,-146,-147,-141,-142,-91,-124,-125,-126,-134,-122,-31,-123,-89,-121,246,-30,-131,-127,-135,-129,-130,-136,-128,-30,-121,-133,-132,-121,]),'MUL':([29,35,48,49,51,61,62,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,90,91,92,93,94,95,96,101,102,109,111,112,114,117,120,121,122,123,124,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,168,173,174,175,177,178,179,180,184,185,187,194,197,202,203,206,214,217,218,219,220,221,222,224,228,231,232,234,236,237,238,239,240,241,242,243,244,245,246,247,252,253,254,255,256,257,259,266,270,271,272,273,275,278,279,283,284,286,289,299,301,302,307,309,313,314,318,319,324,],[-28,51,75,51,51,75,-29,51,-115,75,-143,-120,-138,-118,-144,-137,-148,-117,-149,-88,-139,-90,-114,75,-140,131,-121,-119,-145,-146,-147,-141,-116,-142,75,75,51,51,51,-87,51,-91,-124,-125,75,-126,75,75,131,-104,-92,-107,-108,-98,-102,-93,-113,75,-95,-111,-106,-96,-101,-103,-97,-110,-99,-112,-94,-100,-105,-109,75,75,131,-134,-122,131,-123,-89,-83,-82,51,75,-2,-121,75,131,-2,-131,131,75,-127,-135,75,51,-86,75,-203,75,131,-171,75,-172,-176,-179,-178,-175,-174,-177,-173,-170,75,75,-129,-130,131,-136,274,75,131,131,75,-128,51,131,-121,-133,131,300,75,-132,75,131,-2,75,-121,75,-87,131,-87,]),'DIV':([72,73,74,76,77,78,80,81,82,83,87,88,89,91,92,93,94,96,120,121,122,124,128,174,175,177,178,179,180,202,206,217,218,220,221,236,254,255,256,257,270,271,273,278,279,283,284,299,302,313,319,],[-143,-120,-138,-144,-137,-148,-149,-88,-139,-90,-140,132,-121,-145,-146,-147,-141,-142,-91,-124,-125,-126,132,132,-134,-122,132,-123,-89,-121,132,-131,132,-127,-135,132,-129,-130,132,-136,132,132,-128,132,-121,-133,132,-132,132,-121,132,]),'RUNE':([48,61,70,71,75,79,84,86,90,95,101,102,114,123,125,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,168,173,194,197,203,214,219,222,228,231,232,234,237,238,239,240,241,242,243,244,245,246,247,252,253,266,272,289,301,307,309,314,318,324,],[78,78,-115,78,-118,-117,-114,78,-119,-116,78,78,-87,78,78,78,-104,-92,-107,-108,-98,-102,-93,-113,78,-95,-111,-106,-96,-101,-103,-97,-110,-99,-112,-94,-100,-105,-109,78,78,78,-2,78,-2,78,78,-86,78,-203,78,-171,78,-172,-176,-179,-178,-175,-174,-177,-173,-170,78,78,78,78,78,78,-2,78,78,-87,-87,]),'TRUE':([48,61,70,71,75,79,84,86,90,95,101,102,114,123,125,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,168,173,194,197,203,214,219,222,228,231,232,234,237,238,239,240,241,242,243,244,245,246,247,252,253,266,272,289,301,307,309,314,318,324,],[76,76,-115,76,-118,-117,-114,76,-119,-116,76,76,-87,76,76,76,-104,-92,-107,-108,-98,-102,-93,-113,76,-95,-111,-106,-96,-101,-103,-97,-110,-99,-112,-94,-100,-105,-109,76,76,76,-2,76,-2,76,76,-86,76,-203,76,-171,76,-172,-176,-179,-178,-175,-174,-177,-173,-170,76,76,76,76,76,76,-2,76,76,-87,-87,]),'DOT':([72,73,74,76,77,78,80,82,83,87,89,91,92,93,94,96,121,122,124,175,177,179,202,217,220,221,254,255,257,273,279,283,299,313,],[-143,-120,-138,-144,-137,-148,-149,-139,126,-140,-121,-145,-146,-147,-141,-142,-124,-125,-126,-134,-122,-123,-121,-131,-127,-135,-129,-130,-136,-128,-121,-133,-132,-121,]),'SUB':([48,61,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,90,91,92,93,94,95,96,101,102,114,120,121,122,123,124,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,168,173,174,175,177,178,179,180,194,197,202,203,206,214,217,218,219,220,221,222,228,231,232,234,236,237,238,239,240,241,242,243,244,245,246,247,252,253,254,255,256,257,266,270,271,272,273,278,279,283,284,289,299,301,302,307,309,313,314,318,319,324,],[70,70,-115,70,-143,-120,-138,-118,-144,-137,-148,-117,-149,-88,-139,-90,-114,70,-140,129,-121,-119,-145,-146,-147,-141,-116,-142,70,70,-87,-91,-124,-125,70,-126,70,70,129,-104,-92,-107,-108,-98,-102,-93,-113,70,-95,-111,-106,-96,-101,-103,-97,-110,-99,-112,-94,-100,-105,-109,70,70,129,-134,-122,129,-123,-89,70,-2,-121,70,129,-2,-131,129,70,-127,-135,70,-86,70,-203,70,129,-171,70,-172,-176,-179,-178,-175,-174,-177,-173,-170,70,70,-129,-130,129,-136,70,129,129,70,-128,129,-121,-133,129,70,-132,70,129,-2,70,-121,70,-87,129,-87,]),'CASE':([168,228,268,281,296,297,324,327,329,],[-85,-86,-205,-2,-2,309,-87,-3,-198,]),'BREAK':([114,168,228,234,307,318,324,],[-87,207,-86,207,-2,-87,-87,]),'GEQ':([72,73,74,76,77,78,80,81,82,83,87,88,89,91,92,93,94,96,120,121,122,124,128,174,175,177,178,179,180,202,206,217,218,220,221,236,254,255,256,257,270,271,273,278,279,283,284,299,302,313,319,],[-143,-120,-138,-144,-137,-148,-149,-88,-139,-90,-140,134,-121,-145,-146,-147,-141,-142,-91,-124,-125,-126,134,134,-134,-122,134,-123,-89,-121,134,-131,134,-127,-135,134,-129,-130,134,-136,134,134,-128,134,-121,-133,134,-132,134,-121,134,]),'DEC':([72,73,74,76,77,78,80,81,82,83,87,89,91,92,93,94,96,120,121,122,124,175,177,179,180,202,206,217,220,221,254,255,257,273,278,279,283,299,313,],[-143,-120,-138,-144,-137,-148,-149,-88,-139,-90,-140,-121,-145,-146,-147,-141,-142,-91,-124,-125,-126,-134,-122,-123,-89,-121,248,-131,-127,-135,-129,-130,-136,-128,248,-121,-133,-132,-121,]),'RPAREN':([23,27,34,38,40,44,45,47,50,54,63,72,73,74,76,77,78,80,81,82,83,87,88,89,91,92,93,94,96,97,98,99,100,104,105,108,110,116,118,119,120,121,122,124,125,128,152,153,157,160,161,162,164,165,166,167,171,172,175,176,177,178,179,180,183,217,220,221,222,226,227,254,255,257,273,283,299,],[-14,-26,-37,57,59,66,-47,-48,-49,-50,107,-143,-120,-138,-144,-137,-148,-149,-88,-139,-90,-140,-30,-121,-145,-146,-147,-141,-142,152,153,-64,-65,-13,-25,158,-76,-36,-53,-54,-91,-124,-125,-126,175,179,-45,-46,182,-78,-80,-79,-81,186,-70,-69,-51,-52,-134,221,-122,-31,-123,-89,-77,-131,-127,-135,257,-72,-71,-129,-130,-136,-128,-133,-132,]),'SEMICOLON':([1,5,9,11,12,13,14,17,18,20,21,22,26,33,39,45,47,50,52,53,54,55,57,58,59,60,66,67,72,73,74,76,77,78,80,81,82,83,85,87,88,89,91,92,93,94,96,99,100,106,114,115,118,119,120,121,122,124,152,153,154,155,168,170,171,172,175,177,178,179,180,188,189,190,191,192,194,196,197,198,199,200,201,202,204,206,207,208,209,210,211,213,215,216,217,220,221,223,225,228,229,230,232,233,234,248,249,250,251,254,255,257,261,262,263,264,265,266,267,269,273,276,278,279,280,282,283,285,287,288,289,290,291,292,298,299,302,303,304,305,307,311,315,316,317,318,321,324,325,328,],[4,-10,25,-21,-19,30,-18,-20,-22,-17,-11,-16,-23,-34,-15,-47,-48,-49,-42,-41,-50,-32,-12,104,-24,105,-35,116,-143,-120,-138,-144,-137,-148,-149,-88,-139,-90,-40,-140,-30,-121,-145,-146,-147,-141,-142,-64,-65,-27,-87,-3,-53,-54,-91,-124,-125,-126,-45,-46,-38,-39,-166,-43,-51,-52,-134,-122,-31,-123,-89,-155,228,-158,-164,-163,-182,-156,-2,-151,-160,-186,-188,-121,-150,-162,-184,-153,-157,-152,-161,-165,-154,-84,-131,-127,-135,258,-5,-86,-3,-181,-203,-185,-166,-168,-167,-183,-187,-129,-130,-136,-60,-61,-55,-159,-189,-166,-180,-169,-128,289,-162,-121,-204,-3,-133,-62,-58,-59,301,-204,-204,-3,-190,-132,314,-3,-3,-202,-2,-63,-201,-200,-193,-87,-191,-87,-3,-192,]),'FALLTHROUGH':([114,168,228,234,307,318,324,],[-87,201,-86,201,-2,-87,-87,]),'SHR_ASSIGN':([72,73,74,76,77,78,80,81,82,83,87,89,91,92,93,94,96,120,121,122,124,175,177,178,179,180,202,205,206,217,220,221,254,255,257,273,278,279,283,299,313,],[-143,-120,-138,-144,-137,-148,-149,-88,-139,-90,-140,-121,-145,-146,-147,-141,-142,-91,-124,-125,-126,-134,-122,-31,-123,-89,-121,242,-30,-131,-127,-135,-129,-130,-136,-128,-30,-121,-133,-132,-121,]),'MOD':([72,73,74,76,77,78,80,81,82,83,87,88,89,91,92,93,94,96,120,121,122,124,128,174,175,177,178,179,180,202,206,217,218,220,221,236,254,255,256,257,270,271,273,278,279,283,284,299,302,313,319,],[-143,-120,-138,-144,-137,-148,-149,-88,-139,-90,-140,151,-121,-145,-146,-147,-141,-142,-91,-124,-125,-126,151,151,-134,-122,151,-123,-89,-121,151,-131,151,-127,-135,151,-129,-130,151,-136,151,151,-128,151,-121,-133,151,-132,151,-121,151,]),'SWITCH':([114,168,228,234,307,318,324,],[-87,203,-86,203,-2,-87,-87,]),'LTN':([72,73,74,76,77,78,80,81,82,83,87,88,89,91,92,93,94,96,120,121,122,124,128,174,175,177,178,179,180,202,206,217,218,220,221,236,254,255,256,257,270,271,273,278,279,283,284,299,302,313,319,],[-143,-120,-138,-144,-137,-148,-149,-88,-139,-90,-140,146,-121,-145,-146,-147,-141,-142,-91,-124,-125,-126,146,146,-134,-122,146,-123,-89,-121,146,-131,146,-127,-135,146,-129,-130,146,-136,146,146,-128,146,-121,-133,146,-132,146,-121,146,]),'AND_NOT':([72,73,74,76,77,78,80,81,82,83,87,88,89,91,92,93,94,96,120,121,122,124,128,174,175,177,178,179,180,202,206,217,218,220,221,236,254,255,256,257,270,271,273,278,279,283,284,299,302,313,319,],[-143,-120,-138,-144,-137,-148,-149,-88,-139,-90,-140,136,-121,-145,-146,-147,-141,-142,-91,-124,-125,-126,136,136,-134,-122,136,-123,-89,-121,136,-131,136,-127,-135,136,-129,-130,136,-136,136,136,-128,136,-121,-133,136,-132,136,-121,136,]),'COMMA':([29,45,47,50,54,72,73,74,76,77,78,80,81,82,83,85,87,88,89,91,92,93,94,96,99,100,106,108,109,110,111,118,119,120,121,122,124,152,153,154,155,160,161,162,164,165,166,167,171,172,175,176,177,178,179,180,183,184,185,202,205,206,217,220,221,224,226,227,230,254,255,257,265,269,273,278,279,283,299,313,],[42,-47,-48,-49,-50,-143,-120,-138,-144,-137,-148,-149,-88,-139,-90,127,-140,-30,-121,-145,-146,-147,-141,-142,-64,-65,127,157,159,-76,163,-53,-54,-91,-124,-125,-126,-45,-46,127,127,-78,-80,-79,-81,187,-70,-69,-51,-52,-134,222,-122,-31,-123,-89,-77,-83,-82,42,127,-30,-131,-127,-135,260,-72,-71,127,-129,-130,-136,127,127,-128,-30,42,-133,-132,42,]),'IMPORT':([4,6,25,],[-9,8,-8,]),'NEQ':([72,73,74,76,77,78,80,81,82,83,87,88,89,91,92,93,94,96,120,121,122,124,128,174,175,177,178,179,180,202,206,217,218,220,221,236,254,255,256,257,270,271,273,278,279,283,284,299,302,313,319,],[-143,-120,-138,-144,-137,-148,-149,-88,-139,-90,-140,133,-121,-145,-146,-147,-141,-142,-91,-124,-125,-126,133,133,-134,-122,133,-123,-89,-121,133,-131,133,-127,-135,133,-129,-130,133,-136,133,133,-128,133,-121,-133,133,-132,133,-121,133,]),'ASSIGN':([29,35,41,45,47,50,52,53,54,62,72,73,74,76,77,78,80,81,82,83,87,89,91,92,93,94,96,99,100,118,119,120,121,122,124,152,153,171,172,175,177,178,179,180,202,205,206,217,220,221,254,255,257,273,278,279,283,299,313,],[-28,48,61,-47,-48,-49,101,102,-50,-29,-143,-120,-138,-144,-137,-148,-149,-88,-139,-90,-140,-121,-145,-146,-147,-141,-142,-64,-65,-53,-54,-91,-124,-125,-126,-45,-46,-51,-52,-134,-122,-31,-123,-89,-121,241,-30,-131,-127,-135,-129,-130,-136,-128,-30,-121,-133,-132,-121,]),'DEFINE':([29,62,195,202,279,313,],[-28,-29,231,-28,-28,-28,]),'SUB_ASSIGN':([72,73,74,76,77,78,80,81,82,83,87,89,91,92,93,94,96,120,121,122,124,175,177,178,179,180,202,205,206,217,220,221,254,255,257,273,278,279,283,299,313,],[-143,-120,-138,-144,-137,-148,-149,-88,-139,-90,-140,-121,-145,-146,-147,-141,-142,-91,-124,-125,-126,-134,-122,-31,-123,-89,-121,237,-30,-131,-127,-135,-129,-130,-136,-128,-30,-121,-133,-132,-121,]),'SHR':([72,73,74,76,77,78,80,81,82,83,87,88,89,91,92,93,94,96,120,121,122,124,128,174,175,177,178,179,180,202,206,217,218,220,221,236,254,255,256,257,270,271,273,278,279,283,284,299,302,313,319,],[-143,-120,-138,-144,-137,-148,-149,-88,-139,-90,-140,139,-121,-145,-146,-147,-141,-142,-91,-124,-125,-126,139,139,-134,-122,139,-123,-89,-121,139,-131,139,-127,-135,139,-129,-130,139,-136,139,139,-128,139,-121,-133,139,-132,139,-121,139,]),'XOR':([48,61,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,90,91,92,93,94,95,96,101,102,114,120,121,122,123,124,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,168,173,174,175,177,178,179,180,194,197,202,203,206,214,217,218,219,220,221,222,228,231,232,234,236,237,238,239,240,241,242,243,244,245,246,247,252,253,254,255,256,257,266,270,271,272,273,278,279,283,284,289,299,301,302,307,309,313,314,318,319,324,],[79,79,-115,79,-143,-120,-138,-118,-144,-137,-148,-117,-149,-88,-139,-90,-114,79,-140,140,-121,-119,-145,-146,-147,-141,-116,-142,79,79,-87,-91,-124,-125,79,-126,79,79,140,-104,-92,-107,-108,-98,-102,-93,-113,79,-95,-111,-106,-96,-101,-103,-97,-110,-99,-112,-94,-100,-105,-109,79,79,140,-134,-122,140,-123,-89,79,-2,-121,79,140,-2,-131,140,79,-127,-135,79,-86,79,-203,79,140,-171,79,-172,-176,-179,-178,-175,-174,-177,-173,-170,79,79,-129,-130,140,-136,79,140,140,79,-128,140,-121,-133,140,79,-132,79,140,-2,79,-121,79,-87,140,-87,]),'STRING':([8,23,24,38,48,61,70,71,75,79,84,86,90,95,101,102,104,114,123,125,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,168,173,194,197,203,214,219,222,228,231,232,234,237,238,239,240,241,242,243,244,245,246,247,252,253,266,272,289,301,307,309,314,318,324,],[20,-14,20,20,80,80,-115,80,-118,-117,-114,80,-119,-116,80,80,-13,-87,80,80,80,-104,-92,-107,-108,-98,-102,-93,-113,80,-95,-111,-106,-96,-101,-103,-97,-110,-99,-112,-94,-100,-105,-109,80,80,80,-2,80,-2,80,80,-86,80,-203,80,-171,80,-172,-176,-179,-178,-175,-174,-177,-173,-170,80,80,80,80,80,80,-2,80,80,-87,-87,]),'FOR':([114,168,228,234,307,318,324,],[-87,197,-86,197,-2,-87,-87,]),'PACKAGE':([0,],[3,]),'RBRACK':([46,68,72,73,74,76,77,78,80,81,82,83,87,89,91,92,93,94,96,120,121,122,124,173,174,175,177,179,180,217,218,219,220,221,254,255,256,257,271,273,283,284,299,],[69,117,-143,-120,-138,-144,-137,-148,-149,-88,-139,-90,-140,-121,-145,-146,-147,-141,-142,-91,-124,-125,-126,217,220,-134,-122,-123,-89,-131,254,255,-127,-135,-129,-130,273,-136,283,-128,-133,299,-132,]),'GTN':([72,73,74,76,77,78,80,81,82,83,87,88,89,91,92,93,94,96,120,121,122,124,128,174,175,177,178,179,180,202,206,217,218,220,221,236,254,255,256,257,270,271,273,278,279,283,284,299,302,313,319,],[-143,-120,-138,-144,-137,-148,-149,-88,-139,-90,-140,142,-121,-145,-146,-147,-141,-142,-91,-124,-125,-126,142,142,-134,-122,142,-123,-89,-121,142,-131,142,-127,-135,142,-129,-130,142,-136,142,142,-128,142,-121,-133,142,-132,142,-121,142,]),'ELSE':([216,282,298,],[-84,-3,310,]),'ADD':([48,61,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,90,91,92,93,94,95,96,101,102,114,120,121,122,123,124,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,168,173,174,175,177,178,179,180,194,197,202,203,206,214,217,218,219,220,221,222,228,231,232,234,236,237,238,239,240,241,242,243,244,245,246,247,252,253,254,255,256,257,266,270,271,272,273,278,279,283,284,289,299,301,302,307,309,313,314,318,319,324,],[84,84,-115,84,-143,-120,-138,-118,-144,-137,-148,-117,-149,-88,-139,-90,-114,84,-140,143,-121,-119,-145,-146,-147,-141,-116,-142,84,84,-87,-91,-124,-125,84,-126,84,84,143,-104,-92,-107,-108,-98,-102,-93,-113,84,-95,-111,-106,-96,-101,-103,-97,-110,-99,-112,-94,-100,-105,-109,84,84,143,-134,-122,143,-123,-89,84,-2,-121,84,143,-2,-131,143,84,-127,-135,84,-86,84,-203,84,143,-171,84,-172,-176,-179,-178,-175,-174,-177,-173,-170,84,84,-129,-130,143,-136,84,143,143,84,-128,143,-121,-133,143,84,-132,84,143,-2,84,-121,84,-87,143,-87,]),'LAND':([72,73,74,76,77,78,80,81,82,83,87,88,89,91,92,93,94,96,120,121,122,124,128,174,175,177,178,179,180,202,206,217,218,220,221,236,254,255,256,257,270,271,273,278,279,283,284,299,302,313,319,],[-143,-120,-138,-144,-137,-148,-149,-88,-139,-90,-140,135,-121,-145,-146,-147,-141,-142,-91,-124,-125,-126,135,135,-134,-122,135,-123,-89,-121,135,-131,135,-127,-135,135,-129,-130,135,-136,135,135,-128,135,-121,-133,135,-132,135,-121,135,]),'EQL':([72,73,74,76,77,78,80,81,82,83,87,88,89,91,92,93,94,96,120,121,122,124,128,174,175,177,178,179,180,202,206,217,218,220,221,236,254,255,256,257,270,271,273,278,279,283,284,299,302,313,319,],[-143,-120,-138,-144,-137,-148,-149,-88,-139,-90,-140,144,-121,-145,-146,-147,-141,-142,-91,-124,-125,-126,144,144,-134,-122,144,-123,-89,-121,144,-131,144,-127,-135,144,-129,-130,144,-136,144,144,-128,144,-121,-133,144,-132,144,-121,144,]),'LPAREN':([8,10,16,29,31,32,35,43,48,49,51,61,62,64,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,86,87,89,90,91,92,93,94,95,96,101,102,107,109,111,112,114,117,121,122,123,124,125,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,158,168,173,175,177,179,182,184,185,187,194,197,202,203,214,217,219,220,221,222,224,228,231,232,234,237,238,239,240,241,242,243,244,245,246,247,252,253,254,255,257,266,272,273,275,279,283,289,299,301,307,309,313,314,318,324,],[23,27,34,-28,-2,-44,49,63,86,49,49,86,-29,112,49,-115,86,-143,-120,-138,-118,-144,-137,-148,-117,-149,-139,125,-114,86,-140,-121,-119,-145,-146,-147,-141,-116,-142,86,86,-73,49,49,49,-87,49,-124,-125,86,-126,86,86,-104,-92,-107,-108,-98,-102,-93,-113,86,-95,-111,-106,-96,-101,-103,-97,-110,-99,-112,-94,-100,-105,-109,-74,86,86,-134,-122,-123,-75,-83,-82,49,86,-2,-121,86,-2,-131,86,-127,-135,86,49,-86,86,-203,86,-171,86,-172,-176,-179,-178,-175,-174,-177,-173,-170,86,86,-129,-130,-136,86,86,-128,49,-121,-133,86,-132,86,-2,86,-121,86,-87,-87,]),'VAR':([4,6,7,25,30,114,168,228,234,307,318,324,],[-9,-7,16,-8,-6,-87,16,-86,16,-2,-87,-87,]),'SHL':([72,73,74,76,77,78,80,81,82,83,87,88,89,91,92,93,94,96,120,121,122,124,128,174,175,177,178,179,180,202,206,217,218,220,221,236,254,255,256,257,270,271,273,278,279,283,284,299,302,313,319,],[-143,-120,-138,-144,-137,-148,-149,-88,-139,-90,-140,145,-121,-145,-146,-147,-141,-142,-91,-124,-125,-126,145,145,-134,-122,145,-123,-89,-121,145,-131,145,-127,-135,145,-129,-130,145,-136,145,145,-128,145,-121,-133,145,-132,145,-121,145,]),'ID':([3,8,10,15,16,19,23,27,28,29,34,35,38,40,42,44,48,49,51,61,62,63,69,70,71,75,79,84,86,90,95,101,102,104,105,109,111,112,114,116,117,123,125,126,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,156,157,159,163,168,173,181,184,185,187,194,197,200,203,207,212,214,219,222,224,228,231,232,234,237,238,239,240,241,242,243,244,245,246,247,252,253,258,260,266,272,274,275,289,300,301,307,309,314,318,324,],[5,24,29,32,29,37,-14,-26,41,-28,-37,53,24,29,29,29,89,98,100,89,-29,111,119,-115,89,-118,-117,-114,89,-119,-116,89,89,-13,-25,161,164,167,-87,-36,172,89,89,177,89,-104,-92,-107,-108,-98,-102,-93,-113,89,-95,-111,-106,-96,-101,-103,-97,-110,-99,-112,-94,-100,-105,-109,-57,111,184,185,202,89,224,-83,-82,227,89,-2,233,89,250,251,-2,89,89,262,-86,89,-203,202,-171,89,-172,-176,-179,-178,-175,-174,-177,-173,-170,89,89,-56,29,279,89,285,288,89,311,313,-2,89,313,-87,-87,]),'IF':([114,168,228,234,307,310,318,324,],[-87,214,-86,214,-2,214,-87,-87,]),'AND':([48,61,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,90,91,92,93,94,95,96,101,102,114,120,121,122,123,124,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,168,173,174,175,177,178,179,180,194,197,202,203,206,214,217,218,219,220,221,222,228,231,232,234,236,237,238,239,240,241,242,243,244,245,246,247,252,253,254,255,256,257,266,270,271,272,273,278,279,283,284,289,299,301,302,307,309,313,314,318,319,324,],[90,90,-115,90,-143,-120,-138,-118,-144,-137,-148,-117,-149,-88,-139,-90,-114,90,-140,147,-121,-119,-145,-146,-147,-141,-116,-142,90,90,-87,-91,-124,-125,90,-126,90,90,147,-104,-92,-107,-108,-98,-102,-93,-113,90,-95,-111,-106,-96,-101,-103,-97,-110,-99,-112,-94,-100,-105,-109,90,90,147,-134,-122,147,-123,-89,90,-2,-121,90,147,-2,-131,147,90,-127,-135,90,-86,90,-203,90,147,-171,90,-172,-176,-179,-178,-175,-174,-177,-173,-170,90,90,-129,-130,147,-136,90,147,147,90,-128,147,-121,-133,147,90,-132,90,147,-2,90,-121,90,-87,147,-87,]),'MOD_ASSIGN':([72,73,74,76,77,78,80,81,82,83,87,89,91,92,93,94,96,120,121,122,124,175,177,178,179,180,202,205,206,217,220,221,254,255,257,273,278,279,283,299,313,],[-143,-120,-138,-144,-137,-148,-149,-88,-139,-90,-140,-121,-145,-146,-147,-141,-142,-91,-124,-125,-126,-134,-122,-31,-123,-89,-121,244,-30,-131,-127,-135,-129,-130,-136,-128,-30,-121,-133,-132,-121,]),'LBRACE':([56,64,65,72,73,74,76,77,78,80,81,82,83,87,88,89,91,92,93,94,96,103,107,113,114,120,121,122,124,158,168,175,177,178,179,180,182,186,191,192,193,197,206,213,217,220,221,228,232,234,235,236,248,249,254,255,257,265,266,269,270,273,277,278,279,283,299,301,307,310,312,313,314,318,320,322,324,],[-4,-68,114,-143,-120,-138,-144,-137,-148,-149,-88,-139,-90,-140,-30,-121,-145,-146,-147,-141,-142,156,-73,-66,-87,-91,-124,-125,-126,-74,-2,-134,-122,-31,-123,-89,-75,-67,-164,-163,114,-2,-162,-165,-131,-127,-135,-86,-203,-2,268,-194,-168,-167,-129,-130,-136,-189,114,-169,114,-128,114,114,-121,-133,-132,-166,-2,-2,-207,-121,-166,-87,114,-208,-87,]),'FALSE':([48,61,70,71,75,79,84,86,90,95,101,102,114,123,125,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,168,173,194,197,203,214,219,222,228,231,232,234,237,238,239,240,241,242,243,244,245,246,247,252,253,266,272,289,301,307,309,314,318,324,],[91,91,-115,91,-118,-117,-114,91,-119,-116,91,91,-87,91,91,91,-104,-92,-107,-108,-98,-102,-93,-113,91,-95,-111,-106,-96,-101,-103,-97,-110,-99,-112,-94,-100,-105,-109,91,91,91,-2,91,-2,91,91,-86,91,-203,91,-171,91,-172,-176,-179,-178,-175,-174,-177,-173,-170,91,91,91,91,91,91,-2,91,91,-87,-87,]),'STRUCT':([29,36,37,62,224,275,],[-28,56,-33,-29,259,286,]),'XOR_ASSIGN':([72,73,74,76,77,78,80,81,82,83,87,89,91,92,93,94,96,120,121,122,124,175,177,178,179,180,202,205,206,217,220,221,254,255,257,273,278,279,283,299,313,],[-143,-120,-138,-144,-137,-148,-149,-88,-139,-90,-140,-121,-145,-146,-147,-141,-142,-91,-124,-125,-126,-134,-122,-31,-123,-89,-121,240,-30,-131,-127,-135,-129,-130,-136,-128,-30,-121,-133,-132,-121,]),'INT':([46,48,61,70,71,75,79,84,86,90,95,101,102,114,123,125,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,168,173,194,197,203,214,219,222,228,231,232,234,237,238,239,240,241,242,243,244,245,246,247,252,253,266,272,289,301,307,309,314,318,324,],[68,92,92,-115,92,-118,-117,-114,92,-119,-116,92,92,-87,92,92,92,-104,-92,-107,-108,-98,-102,-93,-113,92,-95,-111,-106,-96,-101,-103,-97,-110,-99,-112,-94,-100,-105,-109,92,92,92,-2,92,-2,92,92,-86,92,-203,92,-171,92,-172,-176,-179,-178,-175,-174,-177,-173,-170,92,92,92,92,92,92,-2,92,92,-87,-87,]),'FLOAT':([48,61,70,71,75,79,84,86,90,95,101,102,114,123,125,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,168,173,194,197,203,214,219,222,228,231,232,234,237,238,239,240,241,242,243,244,245,246,247,252,253,266,272,289,301,307,309,314,318,324,],[93,93,-115,93,-118,-117,-114,93,-119,-116,93,93,-87,93,93,93,-104,-92,-107,-108,-98,-102,-93,-113,93,-95,-111,-106,-96,-101,-103,-97,-110,-99,-112,-94,-100,-105,-109,93,93,93,-2,93,-2,93,93,-86,93,-203,93,-171,93,-172,-176,-179,-178,-175,-174,-177,-173,-170,93,93,93,93,93,93,-2,93,93,-87,-87,]),'OR_ASSIGN':([72,73,74,76,77,78,80,81,82,83,87,89,91,92,93,94,96,120,121,122,124,175,177,178,179,180,202,205,206,217,220,221,254,255,257,273,278,279,283,299,313,],[-143,-120,-138,-144,-137,-148,-149,-88,-139,-90,-140,-121,-145,-146,-147,-141,-142,-91,-124,-125,-126,-134,-122,-31,-123,-89,-121,243,-30,-131,-127,-135,-129,-130,-136,-128,-30,-121,-133,-132,-121,]),'LBRACK':([29,35,49,51,62,69,72,73,74,76,77,78,80,82,83,87,89,91,92,93,94,96,109,111,112,117,121,122,124,175,177,179,184,185,187,202,217,220,221,224,254,255,257,273,275,279,283,299,313,],[-28,46,46,46,-29,46,-143,-120,-138,-144,-137,-148,-149,-139,123,-140,-121,-145,-146,-147,-141,-142,46,46,46,46,-124,-125,-126,-134,-122,-123,-83,-82,46,-121,-131,-127,-135,46,-129,-130,-136,-128,46,-121,-133,-132,-121,]),'ADD_ASSIGN':([72,73,74,76,77,78,80,81,82,83,87,89,91,92,93,94,96,120,121,122,124,175,177,178,179,180,202,205,206,217,220,221,254,255,257,273,278,279,283,299,313,],[-143,-120,-138,-144,-137,-148,-149,-88,-139,-90,-140,-121,-145,-146,-147,-141,-142,-91,-124,-125,-126,-134,-122,-31,-123,-89,-121,247,-30,-131,-127,-135,-129,-130,-136,-128,-30,-121,-133,-132,-121,]),'RBRACE':([114,156,168,169,181,228,258,293,294,296,306,307,308,318,323,324,326,327,329,],[-87,-57,-85,216,225,-86,-56,-196,-206,-197,317,-2,-195,-87,-3,-87,-199,-3,-198,]),'LEQ':([72,73,74,76,77,78,80,81,82,83,87,88,89,91,92,93,94,96,120,121,122,124,128,174,175,177,178,179,180,202,206,217,218,220,221,236,254,255,256,257,270,271,273,278,279,283,284,299,302,313,319,],[-143,-120,-138,-144,-137,-148,-149,-88,-139,-90,-140,149,-121,-145,-146,-147,-141,-142,-91,-124,-125,-126,149,149,-134,-122,149,-123,-89,-121,149,-131,149,-127,-135,149,-129,-130,149,-136,149,149,-128,149,-121,-133,149,-132,149,-121,149,]),'CONTINUE':([114,168,228,234,307,318,324,],[-87,200,-86,200,-2,-87,-87,]),'MUL_ASSIGN':([72,73,74,76,77,78,80,81,82,83,87,89,91,92,93,94,96,120,121,122,124,175,177,178,179,180,202,205,206,217,220,221,254,255,257,273,278,279,283,299,313,],[-143,-120,-138,-144,-137,-148,-149,-88,-139,-90,-140,-121,-145,-146,-147,-141,-142,-91,-124,-125,-126,-134,-122,-31,-123,-89,-121,239,-30,-131,-127,-135,-129,-130,-136,-128,-30,-121,-133,-132,-121,]),'NOT':([48,61,70,71,75,79,84,86,90,95,101,102,114,123,125,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,168,173,194,197,203,214,219,222,228,231,232,234,237,238,239,240,241,242,243,244,245,246,247,252,253,266,272,289,301,307,309,314,318,324,],[95,95,-115,95,-118,-117,-114,95,-119,-116,95,95,-87,95,95,95,-104,-92,-107,-108,-98,-102,-93,-113,95,-95,-111,-106,-96,-101,-103,-97,-110,-99,-112,-94,-100,-105,-109,95,95,95,-2,95,-2,95,95,-86,95,-203,95,-171,95,-172,-176,-179,-178,-175,-174,-177,-173,-170,95,95,95,95,95,95,-2,95,95,-87,-87,]),'$end':([2,4,6,7,25,30,],[0,-9,-7,-1,-8,-6,]),'TYPE':([4,6,7,25,30,114,168,228,234,307,318,324,],[-9,-7,19,-8,-6,-87,19,-86,19,-2,-87,-87,]),'OR':([72,73,74,76,77,78,80,81,82,83,87,88,89,91,92,93,94,96,120,121,122,124,128,174,175,177,178,179,180,202,206,217,218,220,221,236,254,255,256,257,270,271,273,278,279,283,284,299,302,313,319,],[-143,-120,-138,-144,-137,-148,-149,-88,-139,-90,-140,150,-121,-145,-146,-147,-141,-142,-91,-124,-125,-126,150,150,-134,-122,150,-123,-89,-121,150,-131,150,-127,-135,150,-129,-130,150,-136,150,150,-128,150,-121,-133,150,-132,150,-121,150,]),'INC':([72,73,74,76,77,78,80,81,82,83,87,89,91,92,93,94,96,120,121,122,124,175,177,179,180,202,206,217,220,221,254,255,257,273,278,279,283,299,313,],[-143,-120,-138,-144,-137,-148,-149,-88,-139,-90,-140,-121,-145,-146,-147,-141,-142,-91,-124,-125,-126,-134,-122,-123,-89,-121,249,-131,-127,-135,-129,-130,-136,-128,249,-121,-133,-132,-121,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'ContinueStmt':([168,234,],[188,188,]),'FalseLit':([48,61,71,86,101,102,123,125,127,137,168,173,194,203,219,222,231,234,238,252,253,266,272,289,301,309,314,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'Statement':([168,234,],[189,267,]),'IfStmt':([168,234,310,],[190,190,321,]),'Assignment':([168,234,266,301,314,],[191,191,191,191,191,]),'OpenF':([232,],[266,]),'BinaryOp':([88,128,174,178,206,218,236,256,270,271,278,284,302,319,],[137,137,137,137,137,137,137,137,137,137,137,137,137,137,]),'IncDecStmt':([168,234,266,301,314,],[192,192,192,192,192,]),'OpenW':([268,],[281,]),'ParameterDecl':([63,157,],[110,183,]),'OpenS':([31,168,197,214,234,281,296,307,310,],[43,193,232,252,193,297,297,318,320,]),'OpenStructS':([56,],[103,]),'StatementList':([114,318,324,],[169,323,327,]),'RelOp':([88,128,174,178,206,218,236,256,270,271,278,284,302,319,],[148,148,148,148,148,148,148,148,148,148,148,148,148,148,]),'VarDecl':([7,168,234,],[18,18,18,]),'StringLit':([48,61,71,86,101,102,123,125,127,137,168,173,194,203,219,222,231,234,238,252,253,266,272,289,301,309,314,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'PrimaryExpr':([48,61,71,86,101,102,123,125,127,137,168,173,194,203,219,222,231,234,238,252,253,266,272,289,301,309,314,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'TrueLit':([48,61,71,86,101,102,123,125,127,137,168,173,194,203,219,222,231,234,238,252,253,266,272,289,301,309,314,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'Index':([83,],[121,]),'Parameters':([43,],[64,]),'UnaryOp':([48,61,71,86,101,102,123,125,127,137,168,173,194,203,219,222,231,234,238,252,253,266,272,289,301,309,314,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'SourceFile':([0,],[2,]),'ImportPath':([8,24,38,],[22,39,22,]),'TopLevelDecl':([7,],[13,]),'IdentifierList':([10,16,40,42,44,168,234,260,266,301,314,],[28,35,28,62,35,195,195,275,195,195,195,]),'TypeLit':([35,49,51,69,109,111,112,117,187,224,275,],[45,45,45,45,45,45,45,45,45,45,45,]),'PackageClause':([0,],[1,]),'TypeList':([112,],[165,]),'ExprCaseClause':([281,296,],[296,296,]),'GotoStmt':([168,234,],[196,196,]),'AddOp':([88,128,174,178,206,218,236,256,270,271,278,284,302,319,],[138,138,138,138,138,138,138,138,138,138,138,138,138,138,]),'CloseStructS':([225,],[263,]),'FloatLit':([48,61,71,86,101,102,123,125,127,137,168,173,194,203,219,222,231,234,238,252,253,266,272,289,301,309,314,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'PointerType':([35,49,51,69,109,111,112,117,187,224,275,],[50,50,50,50,50,50,50,50,50,50,50,]),'ConstSpec_curl':([27,],[40,]),'Signature':([43,],[65,]),'Block':([65,193,266,270,277,278,320,],[115,229,280,282,290,291,325,]),'ImportSpec_curl':([23,],[38,]),'DefCaseClause':([281,296,],[293,293,]),'SwitchStmt':([168,234,],[199,199,]),'VarSpec':([16,44,],[33,67,]),'Result':([64,],[113,]),'StructName':([19,],[36,]),'TopLevelDecl_curl':([6,],[7,]),'LabelledStmt':([168,234,],[198,198,]),'Literal':([48,61,71,86,101,102,123,125,127,137,168,173,194,203,219,222,231,234,238,252,253,266,272,289,301,309,314,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'Statement_curl':([114,318,324,],[168,168,168,]),'IntLit':([48,61,71,86,101,102,123,125,127,137,168,173,194,203,219,222,231,234,238,252,253,266,272,289,301,309,314,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'MulOp':([88,128,174,178,206,218,236,256,270,271,278,284,302,319,],[141,141,141,141,141,141,141,141,141,141,141,141,141,141,]),'ImportDecl':([6,],[9,]),'CloseS':([115,229,282,292,303,304,323,325,327,],[170,264,298,305,315,316,326,328,329,]),'AssignOp':([205,],[238,]),'CloseW':([294,],[306,]),'FuncName':([15,],[31,]),'CloseF':([280,290,291,],[292,303,304,]),'Declaration':([7,168,234,],[14,204,204,]),'StructType':([36,],[55,]),'ConstSpec':([10,40,],[26,60,]),'ExpressionList':([48,61,101,102,125,168,194,231,234,238,266,301,314,],[85,106,154,155,176,205,230,265,205,269,205,205,205,]),'SimpleStmt':([168,234,266,301,314,],[210,210,276,312,322,]),'Expression':([48,61,86,101,102,123,125,127,168,173,194,203,219,222,231,234,238,252,253,266,272,289,301,309,314,],[88,88,128,88,88,174,88,178,206,218,88,236,256,178,88,206,88,270,271,278,284,302,206,319,206,]),'FieldDecl_curl':([156,],[181,]),'FunctionDecl':([7,],[12,]),'ReturnStmt':([168,234,],[208,208,]),'ParaIdList':([63,157,],[109,109,]),'ConstDecl':([7,168,234,],[17,17,17,]),'FallthroughStmt':([168,234,],[209,209,]),'Slice':([83,],[122,]),'StructDecl':([7,168,234,],[11,11,11,]),'ExpressionName':([203,],[235,]),'ArrayType':([35,49,51,69,109,111,112,117,187,224,275,],[47,47,47,47,47,47,47,47,47,47,47,]),'ImportDecl_curl':([4,],[6,]),'ParameterList':([63,],[108,]),'ForStmt':([168,234,],[211,211,]),'Arguments':([83,],[124,]),'VarSpec_curl':([34,],[44,]),'RuneLit':([48,61,71,86,101,102,123,125,127,137,168,173,194,203,219,222,231,234,238,252,253,266,272,289,301,309,314,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'ImportSpec':([8,38,],[21,58,]),'Type':([35,49,51,69,109,111,112,117,187,224,275,],[52,97,99,118,160,162,166,171,226,261,287,]),'SliceType':([35,49,51,69,109,111,112,117,187,224,275,],[54,54,54,54,54,54,54,54,54,54,54,]),'UnaryExpr':([48,61,71,86,101,102,123,125,127,137,168,173,194,203,219,222,231,234,238,252,253,266,272,289,301,309,314,],[81,81,120,81,81,81,81,81,81,180,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'ForClause':([266,],[277,]),'ShortVarDecl':([168,234,266,301,314,],[213,213,213,213,213,]),'FieldDecl':([181,],[223,]),'BreakStmt':([168,234,],[215,215,]),'ExprCaseClause_curl':([281,296,],[294,308,]),'BasicLit':([48,61,71,86,101,102,123,125,127,137,168,173,194,203,219,222,231,234,238,252,253,266,272,289,301,309,314,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> SourceFile","S'",1,None,None,None),
  ('SourceFile -> PackageClause SEMICOLON ImportDecl_curl TopLevelDecl_curl','SourceFile',4,'p_SourceFile','parser.py',184),
  ('OpenS -> <empty>','OpenS',0,'p_OpenS','parser.py',200),
  ('CloseS -> <empty>','CloseS',0,'p_CloseS','parser.py',209),
  ('OpenStructS -> <empty>','OpenStructS',0,'p_OpenStructS','parser.py',218),
  ('CloseStructS -> <empty>','CloseStructS',0,'p_CloseStructS','parser.py',222),
  ('TopLevelDecl_curl -> TopLevelDecl_curl TopLevelDecl SEMICOLON','TopLevelDecl_curl',3,'p_TopLevelDecl_curl','parser.py',226),
  ('TopLevelDecl_curl -> <empty>','TopLevelDecl_curl',0,'p_TopLevelDecl_curl','parser.py',227),
  ('ImportDecl_curl -> ImportDecl_curl ImportDecl SEMICOLON','ImportDecl_curl',3,'p_ImportDecl_curl','parser.py',236),
  ('ImportDecl_curl -> <empty>','ImportDecl_curl',0,'p_ImportDecl_curl','parser.py',237),
  ('PackageClause -> PACKAGE ID','PackageClause',2,'p_PackageClause','parser.py',246),
  ('ImportDecl -> IMPORT ImportSpec','ImportDecl',2,'p_ImportDecl','parser.py',252),
  ('ImportDecl -> IMPORT LPAREN ImportSpec_curl RPAREN','ImportDecl',4,'p_ImportDecl','parser.py',253),
  ('ImportSpec_curl -> ImportSpec_curl ImportSpec SEMICOLON','ImportSpec_curl',3,'p_ImportSpec_curl','parser.py',259),
  ('ImportSpec_curl -> <empty>','ImportSpec_curl',0,'p_ImportSpec_curl','parser.py',260),
  ('ImportSpec -> ID ImportPath','ImportSpec',2,'p_ImportSpec','parser.py',266),
  ('ImportSpec -> ImportPath','ImportSpec',1,'p_ImportSpec','parser.py',267),
  ('ImportPath -> STRING','ImportPath',1,'p_ImportPath','parser.py',274),
  ('TopLevelDecl -> Declaration','TopLevelDecl',1,'p_TopLevelDecl','parser.py',280),
  ('TopLevelDecl -> FunctionDecl','TopLevelDecl',1,'p_TopLevelDecl','parser.py',281),
  ('Declaration -> ConstDecl','Declaration',1,'p_Declaration','parser.py',287),
  ('Declaration -> StructDecl','Declaration',1,'p_Declaration','parser.py',288),
  ('Declaration -> VarDecl','Declaration',1,'p_Declaration','parser.py',289),
  ('ConstDecl -> CONST ConstSpec','ConstDecl',2,'p_ConstDecl','parser.py',295),
  ('ConstDecl -> CONST LPAREN ConstSpec_curl RPAREN','ConstDecl',4,'p_ConstDecl','parser.py',296),
  ('ConstSpec_curl -> ConstSpec_curl ConstSpec SEMICOLON','ConstSpec_curl',3,'p_ConstSpec_curl','parser.py',305),
  ('ConstSpec_curl -> <empty>','ConstSpec_curl',0,'p_ConstSpec_curl','parser.py',306),
  ('ConstSpec -> IdentifierList ID ASSIGN ExpressionList','ConstSpec',4,'p_ConstSpec','parser.py',314),
  ('IdentifierList -> ID','IdentifierList',1,'p_IdentifierList','parser.py',349),
  ('IdentifierList -> ID COMMA IdentifierList','IdentifierList',3,'p_IdentifierList','parser.py',350),
  ('ExpressionList -> Expression','ExpressionList',1,'p_ExpressionList','parser.py',361),
  ('ExpressionList -> ExpressionList COMMA Expression','ExpressionList',3,'p_ExpressionList','parser.py',362),
  ('StructDecl -> TYPE StructName StructType','StructDecl',3,'p_StructDecl','parser.py',398),
  ('StructName -> ID','StructName',1,'p_StructName','parser.py',406),
  ('VarDecl -> VAR VarSpec','VarDecl',2,'p_VarDecl','parser.py',420),
  ('VarDecl -> VAR LPAREN VarSpec_curl RPAREN','VarDecl',4,'p_VarDecl','parser.py',421),
  ('VarSpec_curl -> VarSpec_curl VarSpec SEMICOLON','VarSpec_curl',3,'p_VarSpec_curl','parser.py',430),
  ('VarSpec_curl -> <empty>','VarSpec_curl',0,'p_VarSpec_curl','parser.py',431),
  ('VarSpec -> IdentifierList Type ASSIGN ExpressionList','VarSpec',4,'p_VarSpec','parser.py',439),
  ('VarSpec -> IdentifierList ID ASSIGN ExpressionList','VarSpec',4,'p_VarSpec','parser.py',440),
  ('VarSpec -> IdentifierList ASSIGN ExpressionList','VarSpec',3,'p_VarSpec','parser.py',441),
  ('VarSpec -> IdentifierList ID','VarSpec',2,'p_VarSpec','parser.py',442),
  ('VarSpec -> IdentifierList Type','VarSpec',2,'p_VarSpec','parser.py',443),
  ('FunctionDecl -> FUNC FuncName OpenS Signature Block CloseS','FunctionDecl',6,'p_FunctionDecl','parser.py',507),
  ('FuncName -> ID','FuncName',1,'p_FuncName','parser.py',515),
  ('Type -> LPAREN Type RPAREN','Type',3,'p_Type','parser.py',527),
  ('Type -> LPAREN ID RPAREN','Type',3,'p_Type','parser.py',528),
  ('Type -> TypeLit','Type',1,'p_Type','parser.py',529),
  ('TypeLit -> ArrayType','TypeLit',1,'p_TypeLit','parser.py',546),
  ('TypeLit -> PointerType','TypeLit',1,'p_TypeLit','parser.py',547),
  ('TypeLit -> SliceType','TypeLit',1,'p_TypeLit','parser.py',548),
  ('ArrayType -> LBRACK INT RBRACK Type','ArrayType',4,'p_ArrayType','parser.py',554),
  ('ArrayType -> LBRACK INT RBRACK ID','ArrayType',4,'p_ArrayType','parser.py',555),
  ('SliceType -> LBRACK RBRACK Type','SliceType',3,'p_SliceType','parser.py',573),
  ('SliceType -> LBRACK RBRACK ID','SliceType',3,'p_SliceType','parser.py',574),
  ('StructType -> STRUCT OpenStructS LBRACE FieldDecl_curl RBRACE CloseStructS','StructType',6,'p_StructType','parser.py',589),
  ('FieldDecl_curl -> FieldDecl_curl FieldDecl SEMICOLON','FieldDecl_curl',3,'p_FieldDecl_curl','parser.py',595),
  ('FieldDecl_curl -> <empty>','FieldDecl_curl',0,'p_FieldDecl_curl','parser.py',596),
  ('FieldDecl -> ID COMMA IdentifierList Type','FieldDecl',4,'p_FieldDecl','parser.py',602),
  ('FieldDecl -> ID COMMA IdentifierList ID','FieldDecl',4,'p_FieldDecl','parser.py',603),
  ('FieldDecl -> ID Type','FieldDecl',2,'p_FieldDecl','parser.py',604),
  ('FieldDecl -> ID ID','FieldDecl',2,'p_FieldDecl','parser.py',605),
  ('FieldDecl -> ID STRUCT MUL ID','FieldDecl',4,'p_FieldDecl','parser.py',606),
  ('FieldDecl -> ID COMMA IdentifierList STRUCT MUL ID','FieldDecl',6,'p_FieldDecl','parser.py',607),
  ('PointerType -> MUL Type','PointerType',2,'p_PointerType','parser.py',677),
  ('PointerType -> MUL ID','PointerType',2,'p_PointerType','parser.py',678),
  ('Signature -> Parameters Result','Signature',2,'p_Signature','parser.py',695),
  ('Result -> LPAREN TypeList RPAREN','Result',3,'p_Result','parser.py',701),
  ('Result -> <empty>','Result',0,'p_Result','parser.py',702),
  ('TypeList -> ID','TypeList',1,'p_TypeList','parser.py',712),
  ('TypeList -> Type','TypeList',1,'p_TypeList','parser.py',713),
  ('TypeList -> TypeList COMMA ID','TypeList',3,'p_TypeList','parser.py',714),
  ('TypeList -> TypeList COMMA Type','TypeList',3,'p_TypeList','parser.py',715),
  ('Parameters -> LPAREN RPAREN','Parameters',2,'p_Parameters','parser.py',737),
  ('Parameters -> LPAREN ParameterList RPAREN','Parameters',3,'p_Parameters','parser.py',738),
  ('Parameters -> LPAREN ParameterList COMMA RPAREN','Parameters',4,'p_Parameters','parser.py',739),
  ('ParameterList -> ParameterDecl','ParameterList',1,'p_ParameterList','parser.py',749),
  ('ParameterList -> ParameterList COMMA ParameterDecl','ParameterList',3,'p_ParameterList','parser.py',750),
  ('ParameterDecl -> ParaIdList Type','ParameterDecl',2,'p_ParameterDecl','parser.py',761),
  ('ParameterDecl -> ID Type','ParameterDecl',2,'p_ParameterDecl','parser.py',762),
  ('ParameterDecl -> ParaIdList ID','ParameterDecl',2,'p_ParameterDecl','parser.py',763),
  ('ParameterDecl -> ID ID','ParameterDecl',2,'p_ParameterDecl','parser.py',764),
  ('ParaIdList -> ID COMMA ID','ParaIdList',3,'p_ParaIdList','parser.py',795),
  ('ParaIdList -> ParaIdList COMMA ID','ParaIdList',3,'p_ParaIdList','parser.py',796),
  ('Block -> LBRACE StatementList RBRACE','Block',3,'p_Block','parser.py',808),
  ('StatementList -> Statement_curl','StatementList',1,'p_StatementList','parser.py',814),
  ('Statement_curl -> Statement_curl Statement SEMICOLON','Statement_curl',3,'p_Statement_curl','parser.py',820),
  ('Statement_curl -> <empty>','Statement_curl',0,'p_Statement_curl','parser.py',821),
  ('Expression -> UnaryExpr','Expression',1,'p_Expression','parser.py',829),
  ('Expression -> Expression BinaryOp UnaryExpr','Expression',3,'p_Expression','parser.py',830),
  ('UnaryExpr -> PrimaryExpr','UnaryExpr',1,'p_UnaryExpr','parser.py',860),
  ('UnaryExpr -> UnaryOp UnaryExpr','UnaryExpr',2,'p_UnaryExpr','parser.py',861),
  ('BinaryOp -> LOR','BinaryOp',1,'p_BinaryOp','parser.py',888),
  ('BinaryOp -> LAND','BinaryOp',1,'p_BinaryOp','parser.py',889),
  ('BinaryOp -> RelOp','BinaryOp',1,'p_BinaryOp','parser.py',890),
  ('BinaryOp -> AddOp','BinaryOp',1,'p_BinaryOp','parser.py',891),
  ('BinaryOp -> MulOp','BinaryOp',1,'p_BinaryOp','parser.py',892),
  ('RelOp -> EQL','RelOp',1,'p_RelOp','parser.py',902),
  ('RelOp -> NEQ','RelOp',1,'p_RelOp','parser.py',903),
  ('RelOp -> LTN','RelOp',1,'p_RelOp','parser.py',904),
  ('RelOp -> LEQ','RelOp',1,'p_RelOp','parser.py',905),
  ('RelOp -> GTN','RelOp',1,'p_RelOp','parser.py',906),
  ('RelOp -> GEQ','RelOp',1,'p_RelOp','parser.py',907),
  ('AddOp -> ADD','AddOp',1,'p_AddOp','parser.py',915),
  ('AddOp -> SUB','AddOp',1,'p_AddOp','parser.py',916),
  ('AddOp -> OR','AddOp',1,'p_AddOp','parser.py',917),
  ('AddOp -> XOR','AddOp',1,'p_AddOp','parser.py',918),
  ('MulOp -> MUL','MulOp',1,'p_MulOp','parser.py',925),
  ('MulOp -> DIV','MulOp',1,'p_MulOp','parser.py',926),
  ('MulOp -> MOD','MulOp',1,'p_MulOp','parser.py',927),
  ('MulOp -> SHL','MulOp',1,'p_MulOp','parser.py',928),
  ('MulOp -> SHR','MulOp',1,'p_MulOp','parser.py',929),
  ('MulOp -> AND','MulOp',1,'p_MulOp','parser.py',930),
  ('MulOp -> AND_NOT','MulOp',1,'p_MulOp','parser.py',931),
  ('UnaryOp -> ADD','UnaryOp',1,'p_UnaryOp','parser.py',938),
  ('UnaryOp -> SUB','UnaryOp',1,'p_UnaryOp','parser.py',939),
  ('UnaryOp -> NOT','UnaryOp',1,'p_UnaryOp','parser.py',940),
  ('UnaryOp -> XOR','UnaryOp',1,'p_UnaryOp','parser.py',941),
  ('UnaryOp -> MUL','UnaryOp',1,'p_UnaryOp','parser.py',942),
  ('UnaryOp -> AND','UnaryOp',1,'p_UnaryOp','parser.py',943),
  ('PrimaryExpr -> Literal','PrimaryExpr',1,'p_PrimaryExpr','parser.py',951),
  ('PrimaryExpr -> ID','PrimaryExpr',1,'p_PrimaryExpr','parser.py',952),
  ('PrimaryExpr -> PrimaryExpr DOT ID','PrimaryExpr',3,'p_PrimaryExpr','parser.py',953),
  ('PrimaryExpr -> LPAREN Expression RPAREN','PrimaryExpr',3,'p_PrimaryExpr','parser.py',954),
  ('PrimaryExpr -> PrimaryExpr Index','PrimaryExpr',2,'p_PrimaryExpr','parser.py',955),
  ('PrimaryExpr -> PrimaryExpr Slice','PrimaryExpr',2,'p_PrimaryExpr','parser.py',956),
  ('PrimaryExpr -> PrimaryExpr Arguments','PrimaryExpr',2,'p_PrimaryExpr','parser.py',957),
  ('Index -> LBRACK Expression RBRACK','Index',3,'p_Index','parser.py',1046),
  ('Slice -> LBRACK Expression COLON Expression RBRACK','Slice',5,'p_Slice','parser.py',1055),
  ('Slice -> LBRACK COLON Expression RBRACK','Slice',4,'p_Slice','parser.py',1056),
  ('Slice -> LBRACK Expression COLON RBRACK','Slice',4,'p_Slice','parser.py',1057),
  ('Slice -> LBRACK COLON RBRACK','Slice',3,'p_Slice','parser.py',1058),
  ('Slice -> LBRACK Expression COLON Expression COLON Expression RBRACK','Slice',7,'p_Slice','parser.py',1059),
  ('Slice -> LBRACK COLON Expression COLON Expression RBRACK','Slice',6,'p_Slice','parser.py',1060),
  ('Arguments -> LPAREN RPAREN','Arguments',2,'p_Arguments','parser.py',1066),
  ('Arguments -> LPAREN ExpressionList RPAREN','Arguments',3,'p_Arguments','parser.py',1067),
  ('Arguments -> LPAREN ExpressionList COMMA RPAREN','Arguments',4,'p_Arguments','parser.py',1068),
  ('Literal -> BasicLit','Literal',1,'p_Literal','parser.py',1089),
  ('BasicLit -> IntLit','BasicLit',1,'p_BasicLit','parser.py',1095),
  ('BasicLit -> FloatLit','BasicLit',1,'p_BasicLit','parser.py',1096),
  ('BasicLit -> RuneLit','BasicLit',1,'p_BasicLit','parser.py',1097),
  ('BasicLit -> StringLit','BasicLit',1,'p_BasicLit','parser.py',1098),
  ('BasicLit -> TrueLit','BasicLit',1,'p_BasicLit','parser.py',1099),
  ('BasicLit -> FalseLit','BasicLit',1,'p_BasicLit','parser.py',1100),
  ('TrueLit -> TRUE','TrueLit',1,'p_TrueLit','parser.py',1106),
  ('FalseLit -> FALSE','FalseLit',1,'p_FalseLit','parser.py',1114),
  ('IntLit -> INT','IntLit',1,'p_IntLit','parser.py',1122),
  ('FloatLit -> FLOAT','FloatLit',1,'p_FloatLit','parser.py',1130),
  ('RuneLit -> RUNE','RuneLit',1,'p_RuneLit','parser.py',1138),
  ('StringLit -> STRING','StringLit',1,'p_StringLit','parser.py',1146),
  ('Statement -> Declaration','Statement',1,'p_Statement','parser.py',1154),
  ('Statement -> LabelledStmt','Statement',1,'p_Statement','parser.py',1155),
  ('Statement -> SimpleStmt','Statement',1,'p_Statement','parser.py',1156),
  ('Statement -> ReturnStmt','Statement',1,'p_Statement','parser.py',1157),
  ('Statement -> BreakStmt','Statement',1,'p_Statement','parser.py',1158),
  ('Statement -> ContinueStmt','Statement',1,'p_Statement','parser.py',1159),
  ('Statement -> GotoStmt','Statement',1,'p_Statement','parser.py',1160),
  ('Statement -> FallthroughStmt','Statement',1,'p_Statement','parser.py',1161),
  ('Statement -> IfStmt','Statement',1,'p_Statement','parser.py',1162),
  ('Statement -> OpenS Block CloseS','Statement',3,'p_Statement','parser.py',1163),
  ('Statement -> SwitchStmt','Statement',1,'p_Statement','parser.py',1164),
  ('Statement -> ForStmt','Statement',1,'p_Statement','parser.py',1165),
  ('SimpleStmt -> Expression','SimpleStmt',1,'p_SimpleStmt','parser.py',1174),
  ('SimpleStmt -> IncDecStmt','SimpleStmt',1,'p_SimpleStmt','parser.py',1175),
  ('SimpleStmt -> Assignment','SimpleStmt',1,'p_SimpleStmt','parser.py',1176),
  ('SimpleStmt -> ShortVarDecl','SimpleStmt',1,'p_SimpleStmt','parser.py',1177),
  ('SimpleStmt -> <empty>','SimpleStmt',0,'p_SimpleStmt','parser.py',1178),
  ('IncDecStmt -> Expression INC','IncDecStmt',2,'p_IncDecStmt','parser.py',1193),
  ('IncDecStmt -> Expression DEC','IncDecStmt',2,'p_IncDecStmt','parser.py',1194),
  ('Assignment -> ExpressionList AssignOp ExpressionList','Assignment',3,'p_Assignment','parser.py',1221),
  ('AssignOp -> ADD_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1266),
  ('AssignOp -> SUB_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1267),
  ('AssignOp -> MUL_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1268),
  ('AssignOp -> DIV_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1269),
  ('AssignOp -> MOD_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1270),
  ('AssignOp -> OR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1271),
  ('AssignOp -> XOR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1272),
  ('AssignOp -> SHL_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1273),
  ('AssignOp -> SHR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1274),
  ('AssignOp -> ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1275),
  ('LabelledStmt -> ID COLON Statement','LabelledStmt',3,'p_LabelledStmt','parser.py',1283),
  ('ReturnStmt -> RETURN ExpressionList','ReturnStmt',2,'p_ReturnStmt','parser.py',1288),
  ('ReturnStmt -> RETURN','ReturnStmt',1,'p_ReturnStmt','parser.py',1289),
  ('BreakStmt -> BREAK ID','BreakStmt',2,'p_BreakStmt','parser.py',1299),
  ('BreakStmt -> BREAK','BreakStmt',1,'p_BreakStmt','parser.py',1300),
  ('ContinueStmt -> CONTINUE ID','ContinueStmt',2,'p_ContinueStmt','parser.py',1309),
  ('ContinueStmt -> CONTINUE','ContinueStmt',1,'p_ContinueStmt','parser.py',1310),
  ('GotoStmt -> GOTO ID','GotoStmt',2,'p_GotoStmt','parser.py',1319),
  ('FallthroughStmt -> FALLTHROUGH','FallthroughStmt',1,'p_FallthroughStmt','parser.py',1324),
  ('ShortVarDecl -> IdentifierList DEFINE ExpressionList','ShortVarDecl',3,'p_ShortVarDecl','parser.py',1329),
  ('IfStmt -> IF OpenS Expression Block CloseS','IfStmt',5,'p_IfStmt','parser.py',1352),
  ('IfStmt -> IF OpenS Expression Block CloseS ELSE IfStmt','IfStmt',7,'p_IfStmt','parser.py',1353),
  ('IfStmt -> IF OpenS Expression Block CloseS ELSE OpenS Block CloseS','IfStmt',9,'p_IfStmt','parser.py',1354),
  ('SwitchStmt -> SWITCH ExpressionName LBRACE OpenW ExprCaseClause_curl CloseW RBRACE','SwitchStmt',7,'p_SwitchStmt','parser.py',1386),
  ('ExpressionName -> Expression','ExpressionName',1,'p_ExpressionName','parser.py',1397),
  ('ExprCaseClause_curl -> ExprCaseClause ExprCaseClause_curl','ExprCaseClause_curl',2,'p_ExprCaseClause_curl','parser.py',1413),
  ('ExprCaseClause_curl -> DefCaseClause','ExprCaseClause_curl',1,'p_ExprCaseClause_curl','parser.py',1414),
  ('ExprCaseClause_curl -> ExprCaseClause','ExprCaseClause_curl',1,'p_ExprCaseClause_curl','parser.py',1415),
  ('ExprCaseClause -> OpenS CASE Expression COLON StatementList CloseS','ExprCaseClause',6,'p_ExprCaseClause','parser.py',1426),
  ('DefCaseClause -> DEFAULT COLON OpenS StatementList CloseS','DefCaseClause',5,'p_DefCaseClause','parser.py',1448),
  ('ForStmt -> FOR OpenS OpenF Expression Block CloseF CloseS','ForStmt',7,'p_ForStmt','parser.py',1455),
  ('ForStmt -> FOR OpenS OpenF ForClause Block CloseF CloseS','ForStmt',7,'p_ForStmt','parser.py',1456),
  ('ForStmt -> FOR OpenS OpenF Block CloseF CloseS','ForStmt',6,'p_ForStmt','parser.py',1457),
  ('OpenF -> <empty>','OpenF',0,'p_OpenF','parser.py',1489),
  ('CloseF -> <empty>','CloseF',0,'p_CloseF','parser.py',1498),
  ('OpenW -> <empty>','OpenW',0,'p_OpenW','parser.py',1505),
  ('CloseW -> <empty>','CloseW',0,'p_CloseW','parser.py',1512),
  ('ForClause -> SimpleStmt SEMICOLON SEMICOLON SimpleStmt','ForClause',4,'p_ForClause','parser.py',1519),
  ('ForClause -> SimpleStmt SEMICOLON Expression SEMICOLON SimpleStmt','ForClause',5,'p_ForClause','parser.py',1520),
]
